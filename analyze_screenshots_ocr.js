const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');

function printWordTable(words) {
  if (!words || words.length === 0) {
    console.log('‚ùå –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤.');
    return;
  }
  console.log('\nüì¶ –í—Å–µ —Å–ª–æ–≤–∞ (–¥–æ 30):');
  console.log('Idx | Text                | Conf | x0   | y0   | x1   | y1   | W   | H');
  words.slice(0, 30).forEach((w, i) => {
    const b = w.bbox || { x0: '', y0: '', x1: '', y1: '' };
    const width = b.x1 && b.x0 ? b.x1 - b.x0 : '';
    const height = b.y1 && b.y0 ? b.y1 - b.y0 : '';
    console.log(
      `${String(i + 1).padEnd(3)} | ${w.text.padEnd(20)} | ${Math.round(w.confidence).toString().padEnd(4)} | ${String(b.x0).padEnd(4)} | ${String(b.y0).padEnd(4)} | ${String(b.x1).padEnd(4)} | ${String(b.y1).padEnd(4)} | ${String(width).padEnd(3)} | ${String(height).padEnd(3)}`
    );
  });
}

async function analyzeScreenshotUniversal(imagePath, searchKeywords = []) {
  if (!fs.existsSync(imagePath)) {
    console.error('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', imagePath);
    return;
  }
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç:', imagePath);
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const result = await Tesseract.recognize(imagePath, 'rus+eng', {
      logger: m => {
        if (m.status === 'recognizing text') {
          process.stdout.write(`\r${Math.round(m.progress * 100)}%`);
        }
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      psm: 6, // PSM_SINGLE_UNIFORM_BLOCK
      oem: 3, // OEM_DEFAULT
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789.,!?()[]{}:;"\'`~@#$%^&*+=|\\/<>-_ ',
      tessedit_pageseg_mode: 6
    });
    
    console.log(`\n‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç (${result.data.text.length} —Å–∏–º–≤–æ–ª–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(result.data.confidence)}%)`);
    
    // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('\nüî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê TESSERACT:');
    console.log('‚îÄ'.repeat(60));
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ result:');
    console.log('  - result.data:', typeof result.data);
    console.log('  - result.data.text:', typeof result.data.text, `(${result.data.text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    console.log('  - result.data.confidence:', typeof result.data.confidence, result.data.confidence);
    console.log('  - result.data.words:', typeof result.data.words, Array.isArray(result.data.words) ? `(${result.data.words.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : '–ù–ï –ú–ê–°–°–ò–í');
    console.log('  - result.data.lines:', typeof result.data.lines, Array.isArray(result.data.lines) ? `(${result.data.lines.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : '–ù–ï –ú–ê–°–°–ò–í');
    console.log('  - result.data.blocks:', typeof result.data.blocks, Array.isArray(result.data.blocks) ? `(${result.data.blocks.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : '–ù–ï –ú–ê–°–°–ò–í');
    console.log('  - result.data.paragraphs:', typeof result.data.paragraphs, Array.isArray(result.data.paragraphs) ? `(${result.data.paragraphs.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)` : '–ù–ï –ú–ê–°–°–ò–í');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ result.data
    console.log('\nüìã –í—Å–µ –ø–æ–ª—è –≤ result.data:');
    Object.keys(result.data).forEach(key => {
      const value = result.data[key];
      if (Array.isArray(value)) {
        console.log(`  - ${key}: –º–∞—Å—Å–∏–≤ (${value.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        if (value.length > 0 && value.length <= 3) {
          console.log(`    –ü—Ä–∏–º–µ—Ä—ã:`, value.slice(0, 3).map(v => typeof v === 'object' ? JSON.stringify(v).substring(0, 100) + '...' : v));
        }
      } else if (typeof value === 'object' && value !== null) {
        console.log(`  - ${key}: –æ–±—ä–µ–∫—Ç (${Object.keys(value).length} –ø–æ–ª–µ–π)`);
      } else {
        console.log(`  - ${key}: ${typeof value} = ${value}`);
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å words, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (result.data.words && Array.isArray(result.data.words) && result.data.words.length > 0) {
      console.log('\nüì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞:');
      const firstWord = result.data.words[0];
      console.log('  - firstWord:', JSON.stringify(firstWord, null, 2));
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å lines, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (result.data.lines && Array.isArray(result.data.lines) && result.data.lines.length > 0) {
      console.log('\nüìè –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏:');
      const firstLine = result.data.lines[0];
      console.log('  - firstLine:', JSON.stringify(firstLine, null, 2));
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ blocks
    if (result.data.blocks && Array.isArray(result.data.blocks)) {
      console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑ blocks –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:');
      result.data.blocks.forEach((block, index) => {
        if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–ª–æ–∫–∞
          console.log(`  –ë–ª–æ–∫ ${index}:`, JSON.stringify(block, null, 2));
        }
      });
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ hocr
    if (result.data.hocr) {
      console.log('\nüìã HOCR –¥–∞–Ω–Ω—ã–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç):');
      console.log('  - hocr –¥–æ—Å—Ç—É–ø–µ–Ω:', !!result.data.hocr);
      if (typeof result.data.hocr === 'string') {
        console.log('  - hocr –¥–ª–∏–Ω–∞:', result.data.hocr.length);
        console.log('  - hocr –Ω–∞—á–∞–ª–æ:', result.data.hocr.substring(0, 200) + '...');
      }
    }
    
    console.log('‚îÄ'.repeat(60));
    
    console.log('\nüìã –¢–µ–∫—Å—Ç:');
    console.log('‚îÄ'.repeat(40));
    console.log(result.data.text);
    console.log('‚îÄ'.repeat(40));

    // Bounding box –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const keywords = searchKeywords.length > 0 ? searchKeywords : [
      '–í–æ–π—Ç–∏', 'Login', '–ü—Ä–æ—Ñ–∏–ª—å', '–í—ã—Ö–æ–¥', 'Sign in', 'Sign out',
      '–ì–æ—Å—Ç—å', 'Guest', '–ü–æ—Å—Ç', 'Post', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'Comment',
      '–ß–∞—Ç', 'Chat', '–°–æ–æ–±—â–µ–Ω–∏–µ', 'Message', '–õ–∞–π–∫', 'Like', '–†–µ–∞–∫—Ü–∏—è', 'Reaction',
      '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'Notification', '–û–Ω–ª–∞–π–Ω', 'Online', '–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£', '–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨'
    ];
    
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    console.log('\nüîë –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ:');
    keywords.forEach(keyword => {
      if (result.data.text.toLowerCase().includes(keyword.toLowerCase())) {
        console.log(`  ‚úÖ "${keyword}" - –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ`);
      }
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ bounding box –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const foundWords = (result.data.words || []).filter(w =>
      keywords.some(k => w.text.toLowerCase().includes(k.toLowerCase()))
    );
    if (foundWords.length > 0) {
      console.log('\nüîë –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:');
      foundWords.forEach(w => {
        const b = w.bbox || { x0: '', y0: '', x1: '', y1: '' };
        const width = b.x1 && b.x0 ? b.x1 - b.x0 : '';
        const height = b.y1 && b.y0 ? b.y1 - b.y0 : '';
        console.log(`  - "${w.text}" (conf: ${Math.round(w.confidence)}%, x: ${b.x0}, y: ${b.y0}, w: ${width}, h: ${height})`);
      });
    } else {
      console.log('\n‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, Tesseract –Ω–µ –≤–µ—Ä–Ω—É–ª words)');
    }

    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ (–ø–æ —Ç–µ–∫—Å—Ç—É)
    const buttonRegex = /([–ê-–Ø–∞-—èA-Za-z0-9\s]+)(–∫–Ω–æ–ø–∫–∞|button|btn|–Ω–∞–∂–º–∏—Ç–µ|click|–í–æ–π—Ç–∏|Login|Sign in|–ü–†–û–î–û–õ–ñ–ò–¢–¨|Continue|–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£|–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨)/gi;
    const buttonMatches = result.data.text.match(buttonRegex);
    if (buttonMatches) {
      console.log('\nüñ±Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É:');
      buttonMatches.forEach(btn => console.log(`  ‚Ä¢ ${btn.trim()}`));
    }

    // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º
    const formRegex = /([–ê-–Ø–∞-—èA-Za-z0-9\s]+)(—Ñ–æ—Ä–º–∞|form|–≤–≤–µ–¥–∏—Ç–µ|enter|email|–ø–∞—Ä–æ–ª—å|password)/gi;
    const formMatches = result.data.text.match(formRegex);
    if (formMatches) {
      console.log('\nüìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:');
      formMatches.forEach(form => console.log(`  ‚Ä¢ ${form.trim()}`));
    }

    // –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Å–ª–æ–≤
    printWordTable(result.data.words);

    // –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const keyElements = [
      '–≤–æ–π—Ç–∏', 'login', 'sign in', '–≥–æ—Å—Ç—å', 'guest',
      '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'user', '–ø—Ä–æ—Ñ–∏–ª—å', 'profile',
      '–ø–æ—Å—Ç', 'post', '—Å–æ–æ–±—â–µ–Ω–∏–µ', 'message',
      '—á–∞—Ç', 'chat', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'comment',
      '–ª–∞–π–∫', 'like', '—Ä–µ–∞–∫—Ü–∏—è', 'reaction',
      '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'notification', '–æ–Ω–ª–∞–π–Ω', 'online'
    ];
    console.log('\nüîç –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º:');
    keyElements.forEach(element => {
      if (result.data.text.toLowerCase().includes(element.toLowerCase())) {
        console.log(`  ‚úÖ "${element}"`);
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è UI-—Ç–µ—Å—Ç–æ–≤
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è UI-—Ç–µ—Å—Ç–æ–≤:');
    if (result.data.text.toLowerCase().includes('–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')) {
      console.log('  ‚Ä¢ –ò—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£"');
      console.log('  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:');
      console.log('    - XPath: //button[contains(., "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]');
      console.log('    - CSS: button:contains("–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")');
      console.log('    - Puppeteer: page.$x(\'//*[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]\')');
    }
    if (result.data.text.toLowerCase().includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å')) {
      console.log('  ‚Ä¢ –ò—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

// CLI –∑–∞–ø—É—Å–∫: node analyze_screenshots_ocr.js <–∏–º—è_—Ñ–∞–π–ª–∞> [–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ]
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node analyze_screenshots_ocr.js <–∏–º—è_—Ñ–∞–π–ª–∞> [–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ1,–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ2,...]');
    process.exit(0);
  }
  const file = args[0];
  const keywords = args[1] ? args[1].split(',') : [];
  analyzeScreenshotUniversal(file, keywords);
} 