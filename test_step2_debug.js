const puppeteer = require('puppeteer');

async function testStep2Debug() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —à–∞–≥–∞ 2');
    
    let browser;
    
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä');
        browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized']
        });
        
        const page = await browser.newPage();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
        console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç');
        await page.screenshot({ path: 'test_screenshots/step2_debug_01_initial.png', fullPage: true });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        const buttonAnalysis = await page.evaluate(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            const buttonInfo = buttons.map((btn, index) => ({
                index,
                tagName: btn.tagName,
                textContent: btn.textContent.trim(),
                innerText: btn.innerText.trim(),
                innerHTML: btn.innerHTML.substring(0, 100) + '...',
                className: btn.className,
                id: btn.id,
                'data-testid': btn.getAttribute('data-testid'),
                'aria-label': btn.getAttribute('aria-label'),
                visible: btn.offsetParent !== null,
                rect: btn.getBoundingClientRect()
            }));
            
            return buttonInfo;
        });
        
        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫:', buttonAnalysis.length);
        buttonAnalysis.forEach((btn, index) => {
            console.log(`–ö–Ω–æ–ø–∫–∞ ${index}:`, {
                text: btn.textContent,
                innerText: btn.innerText,
                className: btn.className,
                visible: btn.visible,
                rect: btn.rect
            });
        });
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º');
        const searchResults = await page.evaluate(() => {
            const results = {};
            
            // –ü–æ —Ç–µ–∫—Å—Ç—É
            results.byTextContent = Array.from(document.querySelectorAll('button')).filter(btn => 
                btn.textContent.includes('–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨')
            ).length;
            
            results.byInnerText = Array.from(document.querySelectorAll('button')).filter(btn => 
                btn.innerText.includes('–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨')
            ).length;
            
            // –ü–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            results.byPartialText = Array.from(document.querySelectorAll('button')).filter(btn => 
                btn.textContent.includes('–ì–û–°–¢–¨')
            ).length;
            
            results.byPartialInnerText = Array.from(document.querySelectorAll('button')).filter(btn => 
                btn.innerText.includes('–ì–û–°–¢–¨')
            ).length;
            
            // –ü–æ aria-label
            results.byAriaLabel = Array.from(document.querySelectorAll('button')).filter(btn => 
                btn.getAttribute('aria-label') && btn.getAttribute('aria-label').includes('–ì–û–°–¢–¨')
            ).length;
            
            return results;
        });
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', searchResults);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–ì–û–°–¢–¨"
        console.log('üîç –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–ì–û–°–¢–¨"');
        const guestElements = await page.evaluate(() => {
            const allElements = Array.from(document.querySelectorAll('*'));
            const guestElements = allElements.filter(el => 
                el.textContent && el.textContent.includes('–ì–û–°–¢–¨')
            ).map(el => ({
                tagName: el.tagName,
                textContent: el.textContent.trim(),
                className: el.className,
                id: el.id,
                visible: el.offsetParent !== null,
                rect: el.getBoundingClientRect()
            }));
            
            return guestElements;
        });
        
        console.log('üìä –≠–ª–µ–º–µ–Ω—Ç—ã —Å "–ì–û–°–¢–¨":', guestElements.length);
        guestElements.forEach((el, index) => {
            console.log(`–≠–ª–µ–º–µ–Ω—Ç ${index}:`, {
                tag: el.tagName,
                text: el.textContent,
                visible: el.visible
            });
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM
        console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM');
        const domStructure = await page.evaluate(() => {
            const body = document.body;
            const children = Array.from(body.children).map(child => ({
                tagName: child.tagName,
                id: child.id,
                className: child.className,
                childrenCount: child.children.length
            }));
            
            return children;
        });
        
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DOM:', domStructure);
        
        console.log('‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
    } finally {
        if (browser) await browser.close();
    }
}

testStep2Debug().catch(console.error); 