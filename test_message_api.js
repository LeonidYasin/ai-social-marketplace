const fetch = require('node-fetch');

async function testMessageAPI() {
  console.log('üöÄ –¢–µ—Å—Ç API —Å–æ–æ–±—â–µ–Ω–∏–π');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    const usersResponse = await fetch('http://localhost:8000/api/users', {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!usersResponse.ok) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.status);
      return;
    }
    
    const users = await usersResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users.length);
    
    if (users.length < 2) {
      console.log('‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞');
      return;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const user1 = users[0];
    const user2 = users[1];
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1:', user1.username, '(ID:', user1.id, ')');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2:', user2.username, '(ID:', user2.id, ')');
    
    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    console.log('\nüîê –®–∞–≥ 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: 'test_user_1',
        email: 'test1@example.com',
        password: 'password123',
        first_name: 'Test',
        last_name: 'User1'
      })
    });
    
    if (!registerResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.status);
      const errorText = await registerResponse.text();
      console.log('–û—à–∏–±–∫–∞:', errorText);
      return;
    }
    
    const registerData = await registerResponse.json();
    const token = registerData.token;
    const senderId = registerData.user.id;
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    console.log('üîë –¢–æ–∫–µ–Ω:', token.substring(0, 20) + '...');
    console.log('üÜî ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', senderId);
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüí¨ –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
    const messageResponse = await fetch('http://localhost:8000/api/messages/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        receiverId: user2.id,
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API —Ç–µ—Å—Ç–∞'
      })
    });
    
    console.log('üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:', messageResponse.status);
    
    if (!messageResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      const errorText = await messageResponse.text();
      console.log('–û—à–∏–±–∫–∞:', errorText);
      return;
    }
    
    const messageData = await messageResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageData);
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('\nüì• –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    const conversationResponse = await fetch(`http://localhost:8000/api/messages/conversation/${user2.id}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('üì• –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', conversationResponse.status);
    
    if (!conversationResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
      const errorText = await conversationResponse.text();
      console.log('–û—à–∏–±–∫–∞:', errorText);
      return;
    }
    
    const conversation = await conversationResponse.json();
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞:', conversation.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
    
    if (conversation.length > 0) {
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', conversation[conversation.length - 1]);
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMessageAPI(); 