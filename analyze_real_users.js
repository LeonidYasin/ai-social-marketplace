const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');

class RealUserAnalyzer {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.userProfiles = [];
        this.stepCounter = 0;
    }

    async init(browserCount = 2) {
        console.log(`üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for (let i = 0; i < browserCount; i++) {
            const profileDir = `./isolated-user-data-${i}`;
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
            }
            
            this.userProfiles.push(profileDir);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: [
                    '--start-maximized', 
                    '--no-sandbox',
                    `--user-data-dir=${this.userProfiles[i]}`,
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            });
            
            const page = await browser.newPage();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            await page.setExtraHTTPHeaders({
                'X-User-Agent': `RealAnalyzer-${i + 1}`,
                'X-User-ID': `user-${i + 1}`
            });
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º: ${this.userProfiles[i]}`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/real_analysis_step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async extractAllText(imagePath) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    resolve([]);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    resolve([]);
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const allText = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        
                        if (text && conf > 30) {
                            allText.push({
                                text: text.toLowerCase(),
                                confidence: conf
                            });
                        }
                    }
                }

                resolve(allText);
            });
        });
    }

    async analyzeDOM(pageIndex) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã`);
        
        try {
            const domInfo = await this.pages[pageIndex].evaluate(() => {
                const info = {
                    title: document.title,
                    url: window.location.href,
                    currentUser: null,
                    sidebarUsers: [],
                    allButtons: [],
                    userElements: [],
                    chatElements: [],
                    postElements: [],
                    sidebarElements: [],
                    rightPanelElements: [],
                    leftPanelElements: [],
                    mainContentElements: []
                };

                // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const userElements = document.querySelectorAll('[class*="user"], [class*="profile"], [data-testid*="user"], [class*="avatar"]');
                userElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const elementInfo = {
                            tagName: el.tagName,
                            className: el.className,
                            id: el.id,
                            text: el.textContent?.trim() || '',
                            dataTestId: el.getAttribute('data-testid') || '',
                            ariaLabel: el.getAttribute('aria-label') || '',
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                        
                        info.userElements.push(elementInfo);
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–æ–±—ã—á–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
                        if (rect.y < 100 && elementInfo.text) {
                            info.currentUser = elementInfo;
                        }
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π–¥–±–∞—Ä–∞ (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
                const rightSidebar = document.querySelectorAll('[class*="sidebar"], [class*="right"], [class*="panel"]');
                rightSidebar.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
                        if (rect.x > window.innerWidth * 0.6) {
                            info.rightPanelElements.push({
                                tagName: el.tagName,
                                className: el.className,
                                text: el.textContent?.substring(0, 200),
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                const leftSidebar = document.querySelectorAll('[class*="sidebar"], [class*="left"], [class*="nav"]');
                leftSidebar.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
                        if (rect.x < window.innerWidth * 0.3) {
                            info.leftPanelElements.push({
                                tagName: el.tagName,
                                className: el.className,
                                text: el.textContent?.substring(0, 200),
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                    }
                });

                // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.allButtons.push({
                            text: btn.textContent?.trim() || '',
                            ariaLabel: btn.getAttribute('aria-label') || '',
                            className: btn.className,
                            id: btn.id,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
                const chatElements = document.querySelectorAll('[class*="chat"], [class*="message"], [class*="conversation"]');
                chatElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.chatElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
                const postElements = document.querySelectorAll('[class*="post"], [class*="feed"], [class*="card"]');
                postElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.postElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const mainContent = document.querySelectorAll('[class*="main"], [class*="content"], [class*="app"]');
                mainContent.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.mainContentElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                return info;
            });

            console.log(`üìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: DOM –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${domInfo.userElements.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${domInfo.rightPanelElements.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${domInfo.leftPanelElements.length}`);
            console.log(`   - –ö–Ω–æ–ø–æ–∫: ${domInfo.allButtons.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞: ${domInfo.chatElements.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤: ${domInfo.postElements.length}`);

            return domInfo;

        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOM:`, error.message);
            return null;
        }
    }

    async analyzeRealUsers(pageIndex) {
        console.log(`\nüîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, 'real_users_analysis');
        const domInfo = await this.analyzeDOM(pageIndex);
        const allText = await this.extractAllText(screenshotPath);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(`üë§ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`);
        if (domInfo.currentUser) {
            console.log(`   - –ò–º—è: "${domInfo.currentUser.text}"`);
            console.log(`   - –ö–ª–∞—Å—Å: ${domInfo.currentUser.className}`);
            console.log(`   - ID: ${domInfo.currentUser.id}`);
            console.log(`   - –ü–æ–∑–∏—Ü–∏—è: x=${domInfo.currentUser.position.x}, y=${domInfo.currentUser.position.y}`);
        } else {
            console.log(`   - –ù–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å (–≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        console.log(`\nüë• –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):`);
        if (domInfo.rightPanelElements.length > 0) {
            domInfo.rightPanelElements.forEach((element, index) => {
                console.log(`   ${index + 1}. ${element.tagName}.${element.className}`);
                console.log(`      –¢–µ–∫—Å—Ç: "${element.text.substring(0, 100)}..."`);
                console.log(`      –ü–æ–∑–∏—Ü–∏—è: x=${element.position.x}, y=${element.position.y}`);
            });
        } else {
            console.log(`   - –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞`);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log(`\nüîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        const userNames = new Set();
        domInfo.userElements.forEach((element, index) => {
            if (element.text) {
                userNames.add(element.text);
                console.log(`   ${index + 1}. "${element.text}" (${element.className})`);
            }
        });
        
        console.log(`\nüìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${domInfo.userElements.length}`);
        console.log(`   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: ${userNames.size}`);
        console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${domInfo.rightPanelElements.length}`);
        console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${domInfo.leftPanelElements.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const hasOtherUsers = domInfo.rightPanelElements.length > 0;
        const otherUserNames = Array.from(userNames).filter(name => 
            name !== domInfo.currentUser?.text && 
            (name.includes('–≥–æ—Å—Ç—å') || name.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || name.includes('user'))
        );
        
        console.log(`\nüéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –í—ã–≤–æ–¥:`);
        if (hasOtherUsers && otherUserNames.length > 0) {
            console.log(`   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${otherUserNames.join(', ')}`);
            console.log(`   ‚úÖ –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } else {
            console.log(`   ‚ùå –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
            console.log(`   ‚ùå –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ "–º–µ—Ä—Ç–≤—ã–µ –¥—É—à–∏" - —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–æ–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏`);
        }
        
        return {
            currentUser: domInfo.currentUser,
            rightPanelUsers: domInfo.rightPanelElements,
            allUserNames: Array.from(userNames),
            otherUserNames: otherUserNames,
            hasRealUsers: hasOtherUsers && otherUserNames.length > 0,
            domInfo: domInfo,
            allText: allText
        };
    }

    async performGuestLogin(pageIndex) {
        console.log(`\nüéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞`);
        
        try {
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
            const result = await this.pages[pageIndex].evaluate(() => {
                const buttons = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"]'));
                const guestButton = buttons.find(btn => {
                    const text = btn.textContent?.toLowerCase() || '';
                    const ariaLabel = btn.getAttribute('aria-label')?.toLowerCase() || '';
                    return text.includes('–≥–æ—Å—Ç—å') || ariaLabel.includes('–≥–æ—Å—Ç—å');
                });
                
                if (guestButton) {
                    const rect = guestButton.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        guestButton.click();
                        return {
                            success: true,
                            text: guestButton.textContent?.trim(),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                    }
                }
                
                return { success: false, reason: 'button_not_found' };
            });
            
            if (result.success) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ "${result.text}"`);
                await new Promise(resolve => setTimeout(resolve, 3000));
                return { success: true };
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return { success: false };
            }
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞:`, error.message);
            return { success: false, error: error.message };
        }
    }

    async runRealUserAnalysis() {
        try {
            console.log('üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            console.log('\nüìã –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            for (let i = 0; i < this.pages.length; i++) {
                const loginResult = await this.performGuestLogin(i);
                if (!loginResult.success) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return false;
                }
            }
            
            // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('\nüìã –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            const analysisResults = [];
            
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const analysisResult = await this.analyzeRealUsers(i);
                analysisResults.push(analysisResult);
            }
            
            // –®–∞–≥ 4: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            console.log('\nüìã –®–∞–≥ 4: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
            console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏:');
            
            for (let i = 0; i < analysisResults.length; i++) {
                for (let j = i + 1; j < analysisResults.length; j++) {
                    console.log(`\nüìä –ë—Ä–∞—É–∑–µ—Ä ${i + 1} vs –ë—Ä–∞—É–∑–µ—Ä ${j + 1}:`);
                    
                    const user1 = analysisResults[i].currentUser?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                    const user2 = analysisResults[j].currentUser?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                    
                    console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${user1}"`);
                    console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${j + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${user2}"`);
                    
                    if (user1 !== user2) {
                        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ - –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                    } else {
                        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –∏–∑–æ–ª—è—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞
                    const users1 = analysisResults[i].otherUserNames;
                    const users2 = analysisResults[j].otherUserNames;
                    
                    console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö: ${users1.join(', ') || '–Ω–∏–∫–æ–≥–æ'}`);
                    console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${j + 1} –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö: ${users2.join(', ') || '–Ω–∏–∫–æ–≥–æ'}`);
                    
                    const user1SeesUser2 = users1.some(name => name.includes(user2) || user2.includes(name));
                    const user2SeesUser1 = users2.some(name => name.includes(user1) || user1.includes(name));
                    
                    if (user1SeesUser2 && user2SeesUser1) {
                        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ - —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ!`);
                    } else {
                        console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ - "–º–µ—Ä—Ç–≤—ã–µ –¥—É—à–∏" –∏–ª–∏ –Ω–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è`);
                    }
                }
            }
            
            console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        for (const profileDir of this.userProfiles) {
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
                console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: ${profileDir}`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function main() {
    const analyzer = new RealUserAnalyzer();
    
    try {
        await analyzer.init(2); // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        const success = await analyzer.runRealUserAnalysis();
        
        if (success) {
            console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await analyzer.close();
    }
}

main().catch(console.error); 