const { AIEnhancedOCRBot } = require('./ai_enhanced_ocr_bot');

async function demonstrateAIBot() {
    console.log('ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ò-–£–õ–£–ß–®–ï–ù–ù–û–ì–û OCR –ë–û–¢–ê');
    console.log('=' .repeat(60));
    
    const bot = new AIEnhancedOCRBot({
        headless: false,
        slowMo: 200,
        timeout: 30000
    });
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–±–æ—Ç–∞...');
        await bot.initialize();
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        console.log('\nüåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await bot.navigateTo('http://localhost:3000');
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        console.log('\nüß† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ò-–ê–ù–ê–õ–ò–ó–ê –°–û–°–¢–û–Ø–ù–ò–Ø');
        console.log('=' .repeat(50));
        
        const initialAnalysis = await bot.analyzeCurrentState();
        
        if (initialAnalysis) {
            console.log(`üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialAnalysis.detectedState.name}`);
            console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(initialAnalysis.confidence * 100).toFixed(1)}%`);
            console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${initialAnalysis.detectedState.description}`);
            
            if (initialAnalysis.context) {
                console.log(`üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ${initialAnalysis.context.availableActions.join(', ')}`);
                console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${initialAnalysis.context.suggestedNextActions.join(', ')}`);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑
            if (initialAnalysis.aiAnalysis) {
                console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ò–ò-–ê–ù–ê–õ–ò–ó:');
                
                if (initialAnalysis.aiAnalysis.layout) {
                    console.log('üèóÔ∏è Layout –∞–Ω–∞–ª–∏–∑:');
                    console.log(`   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${JSON.stringify(initialAnalysis.aiAnalysis.layout.structure)}`);
                    console.log(`   - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${initialAnalysis.aiAnalysis.layout.components.map(c => c.name).join(', ')}`);
                }
                
                if (initialAnalysis.aiAnalysis.semantics) {
                    console.log('üìù –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:');
                    console.log(`   - –¢–µ–º—ã: ${initialAnalysis.aiAnalysis.semantics.topics.map(t => t.name).join(', ')}`);
                    console.log(`   - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${initialAnalysis.aiAnalysis.semantics.sentiment}`);
                    console.log(`   - –ù–∞–º–µ—Ä–µ–Ω–∏—è: ${initialAnalysis.aiAnalysis.semantics.intent.join(', ')}`);
                }
                
                if (initialAnalysis.aiAnalysis.context) {
                    console.log('üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:');
                    console.log(`   - –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${initialAnalysis.aiAnalysis.context.userRole}`);
                    console.log(`   - –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ${initialAnalysis.aiAnalysis.context.currentTask}`);
                    console.log(`   - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: ${initialAnalysis.aiAnalysis.context.systemState}`);
                }
            }
        }
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ú–ù–û–ì–û –ü–û–ò–°–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í');
        console.log('=' .repeat(50));
        
        const guestButton = await bot.findElementByText('–≥–æ—Å—Ç—å', {
            exact: false,
            confidence: 60
        });
        
        if (guestButton) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: "${guestButton.text}"`);
            console.log(`üìç –ü–æ–∑–∏—Ü–∏—è: (${guestButton.x}, ${guestButton.y})`);
            console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${guestButton.confidence}%`);
            console.log(`üîß –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: ${guestButton.method}`);
            
            // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
            console.log('\nüñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É...');
            await bot.clickElement(guestButton);
            
            // –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            console.log('\nüß† –ê–ù–ê–õ–ò–ó –ù–û–í–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø');
            console.log('=' .repeat(50));
            
            const newAnalysis = await bot.analyzeCurrentState();
            
            if (newAnalysis) {
                console.log(`üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${newAnalysis.detectedState.name}`);
                console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(newAnalysis.confidence * 100).toFixed(1)}%`);
                
                if (newAnalysis.context) {
                    console.log(`üõ†Ô∏è –ù–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ${newAnalysis.context.availableActions.join(', ')}`);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if (initialAnalysis && newAnalysis) {
                    console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${initialAnalysis.detectedState.name} ‚Üí ${newAnalysis.detectedState.name}`);
                }
            }
        } else {
            console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç "–≥–æ—Å—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        console.log('\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–û–ô –ü–†–û–í–ï–†–ö–ò');
        console.log('=' .repeat(50));
        
        const postCheck = await bot.verifyText('–ø–æ—Å—Ç', {
            state: '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª',
            actions: ['create_post', 'view_profile']
        });
        
        if (postCheck) {
            console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else {
            console.log('‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
        }
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        console.log('\nüîç –ü–û–ò–°–ö –ö–ù–û–ü–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê');
        console.log('=' .repeat(50));
        
        const createButton = await bot.findElementByText('—Å–æ–∑–¥–∞—Ç—å', {
            exact: false,
            confidence: 50
        });
        
        if (createButton) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: "${createButton.text}"`);
            console.log(`üìç –ü–æ–∑–∏—Ü–∏—è: (${createButton.x}, ${createButton.y})`);
            
            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
            console.log('\nüñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...');
            await bot.clickElement(createButton);
            
            // –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            console.log('\nüß† –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê');
            console.log('=' .repeat(50));
            
            const createAnalysis = await bot.analyzeCurrentState();
            
            if (createAnalysis) {
                console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${createAnalysis.detectedState.name}`);
                console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(createAnalysis.confidence * 100).toFixed(1)}%`);
                
                if (createAnalysis.context) {
                    console.log(`üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ${createAnalysis.context.availableActions.join(', ')}`);
                }
            }
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó');
        console.log('=' .repeat(50));
        
        console.log(`üìà –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${bot.stateHistory.length}`);
        
        const stateCounts = {};
        bot.stateHistory.forEach(analysis => {
            const stateName = analysis.detectedState.name;
            stateCounts[stateName] = (stateCounts[stateName] || 0) + 1;
        });
        
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:');
        Object.entries(stateCounts).forEach(([state, count]) => {
            console.log(`   ${state}: ${count} —Ä–∞–∑`);
        });
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        const report = {
            timestamp: new Date().toISOString(),
            demo: true,
            states: bot.stateHistory,
            summary: {
                totalStates: bot.stateHistory.length,
                uniqueStates: Object.keys(stateCounts).length,
                averageConfidence: bot.stateHistory.reduce((sum, s) => sum + s.confidence, 0) / bot.stateHistory.length
            }
        };
        
        const reportFile = `./test_logs/ai_demo_report_${Date.now()}.json`;
        require('fs').writeFileSync(reportFile, JSON.stringify(report, null, 2));
        
        console.log(`üíæ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
        
        console.log('\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('üéØ –ò–ò-–±–æ—Ç –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    } finally {
        await bot.cleanup();
        console.log('\nüßπ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
    demonstrateAIBot().catch(console.error);
}

module.exports = { demonstrateAIBot }; 