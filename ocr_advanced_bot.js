const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class OCRAdvancedBot {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        this.context = {
            currentState: 'initial',
            loginAttempts: 0,
            maxRetries: 3,
            lastAction: null,
            modalWindows: [],
            expectedChanges: []
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir);
        }
    }

    async init(browserCount = 1) {
        console.log(`üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ OCR –±–æ—Ç–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: ['--start-maximized', '--no-sandbox', `--user-data-dir=./user-data-${i}`]
            });
            
            const page = await browser.newPage();
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async analyzeDOM(pageIndex) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ê–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã`);
        
        try {
            const domInfo = await this.pages[pageIndex].evaluate(() => {
                const info = {
                    title: document.title,
                    url: window.location.href,
                    modals: [],
                    buttons: [],
                    forms: [],
                    loginElements: [],
                    mainAppElements: []
                };

                // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.modals.push({
                            tagName: modal.tagName,
                            className: modal.className,
                            id: modal.id,
                            text: modal.textContent?.substring(0, 100),
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.buttons.push({
                            text: btn.textContent?.trim(),
                            ariaLabel: btn.getAttribute('aria-label'),
                            className: btn.className,
                            id: btn.id,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —Ñ–æ—Ä–º—ã
                const forms = document.querySelectorAll('form, [class*="form"]');
                forms.forEach(form => {
                    const rect = form.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.forms.push({
                            className: form.className,
                            id: form.id,
                            action: form.action,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞
                const loginElements = document.querySelectorAll('[class*="login"], [class*="auth"], [class*="signin"]');
                loginElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.loginElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: rect.width > 0 && rect.height > 0
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const mainElements = document.querySelectorAll('[class*="post"], [class*="feed"], [class*="chat"], [class*="sidebar"]');
                mainElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.mainAppElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: rect.width > 0 && rect.height > 0
                        });
                    }
                });

                return info;
            });

            console.log(`üìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: DOM –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`   - –ú–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: ${domInfo.modals.length}`);
            console.log(`   - –ö–Ω–æ–ø–æ–∫: ${domInfo.buttons.length}`);
            console.log(`   - –§–æ—Ä–º: ${domInfo.forms.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ö–æ–¥–∞: ${domInfo.loginElements.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${domInfo.mainAppElements.length}`);

            return domInfo;

        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOM:`, error.message);
            return null;
        }
    }

    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 0) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    async analyzeScreenState(pageIndex, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `analyze_${description.replace(/\s+/g, '_')}`);
        const domInfo = await this.analyzeDOM(pageIndex);
        const allText = await this.extractAllText(screenshotPath);
        
        // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const state = this.determineAdvancedState(allText, domInfo);
        
        console.log(`üìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}`);
        console.log(`üîç –ü—Ä–∏–∑–Ω–∞–∫–∏: ${state.indicators.join(', ')}`);
        
        return {
            state: state,
            allText: allText,
            domInfo: domInfo,
            screenshotPath: screenshotPath
        };
    }

    async extractAllText(imagePath) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    resolve([]);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    resolve([]);
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const allText = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        
                        if (text && conf > 30) {
                            allText.push({
                                text: text.toLowerCase(),
                                confidence: conf
                            });
                        }
                    }
                }

                resolve(allText);
            });
        });
    }

    determineAdvancedState(allText, domInfo) {
        const textStrings = allText.map(item => item.text);
        const fullText = textStrings.join(' ');
        
        const indicators = [];
        let stateName = 'unknown';
        let description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        const hasModals = domInfo && domInfo.modals.length > 0;
        if (hasModals) {
            indicators.push('–º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞
        const hasLoginElements = domInfo && domInfo.loginElements.length > 0;
        if (hasLoginElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const hasMainElements = domInfo && domInfo.mainAppElements.length > 0;
        if (hasMainElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ DOM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (fullText.includes('–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É') && fullText.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å')) {
            stateName = 'login_selection';
            description = '–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            indicators.push('–∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞', '–∫–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç—è');
        }
        else if (fullText.includes('–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞') || fullText.includes('email') || fullText.includes('google')) {
            stateName = 'login_methods';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            indicators.push('—Å–ø–æ—Å–æ–±—ã –≤—Ö–æ–¥–∞', 'email', 'google');
        }
        else if (fullText.includes('–ø–æ—Å—Ç') && fullText.includes('—á–∞—Ç') && fullText.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª)';
            indicators.push('–ø–æ—Å—Ç—ã', '—á–∞—Ç', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
        }
        else if (fullText.includes('–≤–æ–π—Ç–∏') && fullText.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
            stateName = 'login_form';
            description = '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞';
            indicators.push('—Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
        }
        else if (fullText.includes('–æ—à–∏–±–∫–∞') || fullText.includes('–Ω–µ–≤–µ—Ä–Ω–æ')) {
            stateName = 'error_state';
            description = '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏';
            indicators.push('–æ—à–∏–±–∫–∞');
        }
        else if (hasModals && hasLoginElements) {
            stateName = 'login_modal';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞';
            indicators.push('–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ', '—ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞');
        }
        else if (hasMainElements && !hasLoginElements) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ DOM)';
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }

        return {
            name: stateName,
            description: description,
            indicators: indicators,
            hasModals: hasModals,
            hasLoginElements: hasLoginElements,
            hasMainElements: hasMainElements
        };
    }

    async smartClickWithVerification(pageIndex, searchText, expectedState, description = '') {
        console.log(`üéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –£–º–Ω—ã–π –∫–ª–∏–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π "${searchText}" ${description}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–ª–∏–∫–∞
        const beforeState = await this.analyzeScreenState(pageIndex, 'before_click');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (beforeState.state.name === expectedState) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "${expectedState}"`);
            return { success: true, alreadyInState: true };
        }
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞
        const screenshotPath = await this.takeScreenshot(pageIndex, `search_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length === 0) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return { success: false, reason: 'element_not_found' };
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const target = coords[0];
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–æ "${target.text}" (conf: ${target.confidence}%)`);
        console.log(`üìç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${target.x}, y=${target.y}, —Ü–µ–Ω—Ç—Ä: (${target.centerX}, ${target.centerY})`);

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
        await this.pages[pageIndex].mouse.click(target.centerX, target.centerY);
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
        
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        const afterState = await this.analyzeScreenState(pageIndex, 'after_click');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const stateChanged = beforeState.state.name !== afterState.state.name;
        const reachedExpectedState = afterState.state.name === expectedState;
        
        console.log(`üîÑ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${stateChanged ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`üìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: ${beforeState.state.name} ‚Üí ${afterState.state.name}`);
        console.log(`üéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${reachedExpectedState ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (reachedExpectedState) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
            return { success: true, stateChange: true, reachedExpected: true };
        } else if (stateChanged) {
            console.log(`‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–æ –Ω–µ –Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ`);
            return { 
                success: false, 
                reason: 'unexpected_state_change',
                expected: expectedState,
                actual: afterState.state.name,
                stateChange: true
            };
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å`);
            return { 
                success: false, 
                reason: 'no_state_change',
                expected: expectedState,
                actual: afterState.state.name,
                stateChange: false
            };
        }
    }

    async retryAction(action, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
            
            const result = await action();
            
            if (result.success) {
                console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
                return result;
            }
            
            if (attempt < maxRetries) {
                console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
        }
        
        console.log(`‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
        return { success: false, reason: 'max_retries_exceeded' };
    }

    async smartGuestLogin(pageIndex) {
        console.log(`\nüéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const initialState = await this.analyzeScreenState(pageIndex, 'initial');
        
        if (initialState.state.name === 'main_app') {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
            return { success: true, alreadyLoggedIn: true };
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if (initialState.state.hasModals && initialState.state.hasLoginElements) {
            console.log(`üîß –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const closeResult = await this.smartClickWithVerification(
                pageIndex,
                '–∑–∞–∫—Ä—ã—Ç—å',
                'login_selection',
                '–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞'
            );
            
            if (!closeResult.success) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, –∫–ª–∏–∫–∞–µ–º –≤ —É–≥–æ–ª —ç–∫—Ä–∞–Ω–∞
                await this.pages[pageIndex].mouse.click(50, 50);
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"
        const guestLoginResult = await this.retryAction(async () => {
            return await this.smartClickWithVerification(
                pageIndex, 
                '–≥–æ—Å—Ç—å', 
                'main_app', 
                '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞'
            );
        });
        
        if (guestLoginResult.success) {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
            const finalState = await this.analyzeScreenState(pageIndex, 'after_login');
            
            if (finalState.state.name === 'main_app' && finalState.state.hasMainElements) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                return { success: true, loginMethod: 'guest' };
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${finalState.state.name}`);
                return { success: false, reason: 'login_failed', state: finalState.state.name };
            }
        }
        
        return guestLoginResult;
    }

    async runAdvancedTest() {
        try {
            console.log('üß† –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            const loginResults = [];
            
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const loginResult = await this.smartGuestLogin(i);
                loginResults.push(loginResult);
                
                if (!loginResult.success) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return false;
                }
            }
            
            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            if (this.pages.length > 1) {
                console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
                for (let i = 0; i < this.pages.length; i++) {
                    const state = await this.analyzeScreenState(i, 'multiuser_check');
                    
                    // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const hasOtherUsers = state.allText.some(item => 
                        item.text.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || 
                        item.text.includes('user') || 
                        item.text.includes('–≥–æ—Å—Ç—å')
                    );
                    
                    if (hasOtherUsers) {
                        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
                    } else {
                        console.log(`‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                    }
                }
            }
            
            console.log('\nüéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞
async function main() {
    const bot = new OCRAdvancedBot();
    
    try {
        await bot.init(2); // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const success = await bot.runAdvancedTest();
        
        if (success) {
            console.log('\n‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await bot.close();
    }
}

main().catch(console.error); 