const fetch = require('node-fetch');

async function testPostCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ç–æ–∫–µ–Ω
    console.log('üîë –ü–æ–ª—É—á–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ç–æ–∫–µ–Ω...');
    const guestResponse = await fetch('http://localhost:8000/api/auth/guest', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: `guest_test_${Date.now()}`
      })
    });
    
    if (!guestResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: ${guestResponse.status}`);
    }
    
    const guestData = await guestResponse.json();
    const token = guestData.token;
    
    console.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token.substring(0, 20) + '...');
    
    // 2. –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç...');
    const postData = {
      content: `–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ - ${new Date().toLocaleString()}`,
      media_urls: [],
      media_type: null,
      background_color: null,
      privacy: 'public',
      section: 'tribune',
      location: null,
      is_ai_generated: false,
      ai_prompt: null
    };
    
    const postResponse = await fetch('http://localhost:8000/api/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(postData)
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', postResponse.status);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(postResponse.headers.entries()));
    
    if (!postResponse.ok) {
      const errorText = await postResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', errorText);
      throw new Error(`HTTP ${postResponse.status}: ${errorText}`);
    }
    
    const postResult = await postResponse.json();
    console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', postResult);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤...');
    const postsResponse = await fetch('http://localhost:8000/api/posts', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (postsResponse.ok) {
      const posts = await postsResponse.json();
      console.log('üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:', posts.length);
      if (posts.length > 0) {
        console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:', posts[0]);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testPostCreation(); 