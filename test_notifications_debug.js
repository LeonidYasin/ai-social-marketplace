const fetch = require('node-fetch');

class NotificationDebugTest {
  constructor() {
    this.baseUrl = 'http://localhost:8000';
  }

  async testNotifications() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...');

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤
      console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
      const backendHealth = await this.checkBackendHealth();
      if (!backendHealth) {
        console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }
      console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = await this.getUsers();
      if (!users || users.length === 0) {
        console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ');
        return false;
      }
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.map(u => u.username).slice(0, 5));

      // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const user1 = await this.createOrGetUser('test_notif_1', 'test1@notif.com');
      const user2 = await this.createOrGetUser('test_notif_2', 'test2@notif.com');
      
      if (!user1 || !user2) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return false;
      }
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

      // 4. –í—Ö–æ–¥–∏–º –ø–æ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      console.log('\n4. –í—Ö–æ–¥ –ø–æ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...');
      const token1 = await this.loginUser(user1.username, 'testpass123');
      if (!token1) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return false;
      }
      console.log('‚úÖ –í—Ö–æ–¥ –ø–æ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω');

      // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log('\n5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      const message = await this.sendMessage(token1, user2.id, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!');
      if (!message) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return false;
      }
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', message.content);

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
      const wsStatus = await this.checkWebSocket();
      console.log('WebSocket —Å—Ç–∞—Ç—É—Å:', wsStatus);

      console.log('\nüéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –¥–≤—É—Ö –≤–∫–ª–∞–¥–∫–∞—Ö');
      console.log('2. –í –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ test_notif_1');
      console.log('3. –í–æ –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–µ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ test_notif_2');
      console.log('4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É');
      console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤ MessageNotifications');
      console.log('6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');

      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
      return false;
    }
  }

  async checkBackendHealth() {
    try {
      const response = await fetch(`${this.baseUrl}/api/health`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async getUsers() {
    try {
      const response = await fetch(`${this.baseUrl}/api/users`);
      if (response.ok) {
        return await response.json();
      }
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return null;
    }
  }

  async createOrGetUser(username, email) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const users = await this.getUsers();
      if (users) {
        const existingUser = users.find(u => u.username === username);
        if (existingUser) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username}`);
          return existingUser;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await fetch(`${this.baseUrl}/api/users/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username,
          email,
          password: 'testpass123',
          first_name: username,
          last_name: 'Test'
        })
      });

      if (response.ok) {
        const userData = await response.json();
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username}`);
        return userData.user;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, response.status);
        return null;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error.message);
      return null;
    }
  }

  async loginUser(username, password) {
    try {
      const response = await fetch(`${this.baseUrl}/api/users/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username,
          password
        })
      });

      if (response.ok) {
        const loginData = await response.json();
        return loginData.token;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${username}:`, response.status);
        return null;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${username}:`, error.message);
      return null;
    }
  }

  async sendMessage(token, receiverId, content) {
    try {
      const response = await fetch(`${this.baseUrl}/api/messages/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          receiverId,
          content
        })
      });

      if (response.ok) {
        return await response.json();
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', response.status);
        const errorText = await response.text();
        console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async checkWebSocket() {
    try {
      const response = await fetch(`${this.baseUrl}/api/health`);
      if (response.ok) {
        return 'Backend –¥–æ—Å—Ç—É–ø–µ–Ω, WebSocket –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å';
      }
      return 'Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } catch (error) {
      return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend';
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runNotificationDebugTest() {
  const test = new NotificationDebugTest();
  
  try {
    const result = await test.testNotifications();
    
    if (result) {
      console.log('\nüéâ –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\n‚ùå –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runNotificationDebugTest();
}

module.exports = NotificationDebugTest; 

async function testNotificationsDebug() {
  console.log('=== –û–¢–õ–ê–î–ö–ê –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  
  // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const testUser = {
    username: `test_user_${Date.now()}`,
    email: `test${Date.now()}@example.com`,
    password: 'testpass123',
    first_name: 'Test',
    last_name: 'User'
  };
  
  try {
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testUser)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.status);
    
    if (registerResponse.ok) {
      const userData = await registerResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', userData);
      
      // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const usersResponse = await fetch('http://localhost:8000/api/users', {
        headers: {
          'Authorization': `Bearer ${userData.token}`
        }
      });
      
      if (usersResponse.ok) {
        const users = await usersResponse.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 1 –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        const targetUser = users.find(u => u.id !== userData.id);
        if (targetUser) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å:', targetUser);
          
          // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          console.log('\n3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
          const messageData = {
            receiverId: targetUser.id,
            content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
          };
          
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', messageData);
          
          const messageResponse = await fetch('http://localhost:8000/api/messages/send', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${userData.token}`
            },
            body: JSON.stringify(messageData)
          });
          
          console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageResponse.status);
          
          if (messageResponse.ok) {
            const messageResult = await messageResponse.json();
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageResult);
            
            // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
            setTimeout(async () => {
              const notificationsResponse = await fetch(`http://localhost:8000/api/notifications/user/${targetUser.id}`, {
                headers: {
                  'Authorization': `Bearer ${userData.token}`
                }
              });
              
              console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationsResponse.status);
              
              if (notificationsResponse.ok) {
                const notifications = await notificationsResponse.json();
                console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:', notifications);
                
                if (notifications.length > 0) {
                  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
                } else {
                  console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }
              } else {
                const errorText = await notificationsResponse.text();
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', errorText);
              }
              
              process.exit(0);
            }, 2000);
            
          } else {
            const errorText = await messageResponse.text();
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorText);
            process.exit(1);
          }
          
        } else {
          console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
          process.exit(1);
        }
        
      } else {
        const errorText = await usersResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', errorText);
        process.exit(1);
      }
      
    } else {
      const errorText = await registerResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', errorText);
      process.exit(1);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

testNotificationsDebug(); 