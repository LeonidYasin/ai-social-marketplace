const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');

class IntelligentUIAnalyzer {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.userProfiles = [];
        this.stepCounter = 0;
    }

    async init(browserCount = 2) {
        console.log(`üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ UI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for (let i = 0; i < browserCount; i++) {
            const profileDir = `./intelligent-user-data-${i}`;
            
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
            }
            
            this.userProfiles.push(profileDir);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: [
                    '--start-maximized', 
                    '--no-sandbox',
                    `--user-data-dir=${this.userProfiles[i]}`,
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            });
            
            const page = await browser.newPage();
            
            await page.setExtraHTTPHeaders({
                'X-User-Agent': `IntelligentAnalyzer-${i + 1}`,
                'X-User-ID': `user-${i + 1}`
            });
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º: ${this.userProfiles[i]}`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/intelligent_step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async extractAllText(imagePath) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    resolve([]);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    resolve([]);
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const allText = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        
                        if (text && conf > 30) {
                            allText.push({
                                text: text.toLowerCase(),
                                confidence: conf
                            });
                        }
                    }
                }

                resolve(allText);
            });
        });
    }

    async analyzeIntelligentDOM(pageIndex) {
        console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã`);
        
        try {
            const intelligentInfo = await this.pages[pageIndex].evaluate(() => {
                const info = {
                    // –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    pageStructure: {
                        title: document.title,
                        url: window.location.href,
                        viewport: {
                            width: window.innerWidth,
                            height: window.innerHeight
                        }
                    },
                    
                    // –ê–Ω–∞–ª–∏–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    modals: [],
                    
                    // –ê–Ω–∞–ª–∏–∑ –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    buttons: {
                        all: [],
                        loginButtons: [],
                        guestButtons: [],
                        profileButtons: [],
                        navigationButtons: [],
                        actionButtons: []
                    },
                    
                    // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    forms: [],
                    
                    // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    userInterface: {
                        header: null,
                        sidebar: {
                            left: null,
                            right: null
                        },
                        mainContent: null,
                        footer: null
                    },
                    
                    // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    users: {
                        currentUser: null,
                        otherUsers: [],
                        userElements: []
                    },
                    
                    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content: {
                        posts: [],
                        chats: [],
                        messages: [],
                        notifications: []
                    }
                };

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ú–û–î–ê–õ–¨–ù–´–• –û–ö–ù–û–í
                const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"], [class*="overlay"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const modalText = modal.textContent?.toLowerCase() || '';
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        let modalType = 'unknown';
                        if (modalText.includes('–≤–æ–π—Ç–∏') || modalText.includes('login') || modalText.includes('–≤—Ö–æ–¥')) {
                            modalType = 'login';
                        } else if (modalText.includes('–ø—Ä–æ—Ñ–∏–ª—å') || modalText.includes('profile') || modalText.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏')) {
                            modalType = 'profile';
                        } else if (modalText.includes('–≤—ã–±–µ—Ä–∏—Ç–µ') || modalText.includes('–≤—ã–±–æ—Ä') || modalText.includes('choose')) {
                            modalType = 'selection';
                        }
                        
                        info.modals.push({
                            type: modalType,
                            tagName: modal.tagName,
                            className: modal.className,
                            id: modal.id,
                            text: modal.textContent?.substring(0, 300),
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            context: modalText
                        });
                    }
                });

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ù–û–ü–û–ö
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const buttonText = btn.textContent?.trim() || '';
                        const ariaLabel = btn.getAttribute('aria-label') || '';
                        const className = btn.className || '';
                        const fullText = (buttonText + ' ' + ariaLabel).toLowerCase();
                        
                        const buttonInfo = {
                            text: buttonText,
                            ariaLabel: ariaLabel,
                            className: className,
                            id: btn.id,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            context: fullText
                        };
                        
                        info.buttons.all.push(buttonInfo);
                        
                        // –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ö–ù–û–ü–û–ö –ü–û –ö–û–ù–¢–ï–ö–°–¢–£
                        
                        // –ö–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
                        if (fullText.includes('–≤–æ–π—Ç–∏') || fullText.includes('login') || fullText.includes('sign in')) {
                            info.buttons.loginButtons.push(buttonInfo);
                        }
                        
                        // –ö–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                        if (fullText.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å') || 
                            fullText.includes('continue as guest') ||
                            (fullText.includes('–≥–æ—Å—Ç—å') && fullText.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                            (fullText.includes('guest') && fullText.includes('continue'))) {
                            info.buttons.guestButtons.push(buttonInfo);
                        }
                        
                        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∏–∫–æ–Ω–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
                        if (fullText.includes('–ø—Ä–æ—Ñ–∏–ª—å') || fullText.includes('profile') || 
                            fullText.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏') || fullText.includes('settings') ||
                            className.includes('avatar') || className.includes('profile') ||
                            buttonText.length === 1 || buttonText.length === 0) {
                            info.buttons.profileButtons.push(buttonInfo);
                        }
                        
                        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                        if (fullText.includes('–¥–æ–º–æ–π') || fullText.includes('home') ||
                            fullText.includes('—á–∞—Ç') || fullText.includes('chat') ||
                            fullText.includes('–ø–æ—Å—Ç—ã') || fullText.includes('posts')) {
                            info.buttons.navigationButtons.push(buttonInfo);
                        }
                        
                        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        if (fullText.includes('—Å–æ–∑–¥–∞—Ç—å') || fullText.includes('create') ||
                            fullText.includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') || fullText.includes('send') ||
                            fullText.includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') || fullText.includes('save')) {
                            info.buttons.actionButtons.push(buttonInfo);
                        }
                    }
                });

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´
                
                // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                const header = document.querySelector('header, [class*="header"], [class*="app-bar"]');
                if (header) {
                    const rect = header.getBoundingClientRect();
                    info.userInterface.header = {
                        element: header.tagName,
                        className: header.className,
                        text: header.textContent?.substring(0, 200),
                        position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                    };
                }
                
                // –ê–Ω–∞–ª–∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                const leftSidebar = document.querySelector('[class*="sidebar"], [class*="nav"], [class*="menu"]');
                if (leftSidebar) {
                    const rect = leftSidebar.getBoundingClientRect();
                    if (rect.x < window.innerWidth * 0.3) {
                        info.userInterface.sidebar.left = {
                            element: leftSidebar.tagName,
                            className: leftSidebar.className,
                            text: leftSidebar.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                    }
                }
                
                // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
                const rightSidebar = document.querySelector('[class*="sidebar"], [class*="panel"], [class*="users"]');
                if (rightSidebar) {
                    const rect = rightSidebar.getBoundingClientRect();
                    if (rect.x > window.innerWidth * 0.6) {
                        info.userInterface.sidebar.right = {
                            element: rightSidebar.tagName,
                            className: rightSidebar.className,
                            text: rightSidebar.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                    }
                }
                
                // –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const mainContent = document.querySelector('main, [class*="main"], [class*="content"], [class*="feed"]');
                if (mainContent) {
                    const rect = mainContent.getBoundingClientRect();
                    info.userInterface.mainContent = {
                        element: mainContent.tagName,
                        className: mainContent.className,
                        text: mainContent.textContent?.substring(0, 200),
                        position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                    };
                }

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
                const userElements = document.querySelectorAll('[class*="user"], [class*="profile"], [data-testid*="user"], [class*="avatar"]');
                userElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const elementInfo = {
                            tagName: el.tagName,
                            className: el.className,
                            id: el.id,
                            text: el.textContent?.trim() || '',
                            dataTestId: el.getAttribute('data-testid') || '',
                            ariaLabel: el.getAttribute('aria-label') || '',
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                        
                        info.users.userElements.push(elementInfo);
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
                        if (rect.y < 100 && elementInfo.text) {
                            info.users.currentUser = elementInfo;
                        }
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏)
                        if (rect.x > window.innerWidth * 0.6 && elementInfo.text) {
                            info.users.otherUsers.push(elementInfo);
                        }
                    }
                });

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–û–†–ú
                const forms = document.querySelectorAll('form, [class*="form"]');
                forms.forEach(form => {
                    const rect = form.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const formText = form.textContent?.toLowerCase() || '';
                        
                        let formType = 'unknown';
                        if (formText.includes('–≤–æ–π—Ç–∏') || formText.includes('login')) {
                            formType = 'login';
                        } else if (formText.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è') || formText.includes('register')) {
                            formType = 'register';
                        } else if (formText.includes('–ø–æ—Å—Ç') || formText.includes('post')) {
                            formType = 'post';
                        } else if (formText.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ') || formText.includes('message')) {
                            formType = 'message';
                        }
                        
                        info.forms.push({
                            type: formType,
                            className: form.className,
                            id: form.id,
                            action: form.action,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            context: formText
                        });
                    }
                });

                // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê
                
                // –ü–æ—Å—Ç—ã
                const posts = document.querySelectorAll('[class*="post"], [class*="feed"], [class*="card"]');
                posts.forEach(post => {
                    const rect = post.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.content.posts.push({
                            tagName: post.tagName,
                            className: post.className,
                            text: post.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });
                
                // –ß–∞—Ç—ã
                const chats = document.querySelectorAll('[class*="chat"], [class*="conversation"]');
                chats.forEach(chat => {
                    const rect = chat.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.content.chats.push({
                            tagName: chat.tagName,
                            className: chat.className,
                            text: chat.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });
                
                // –°–æ–æ–±—â–µ–Ω–∏—è
                const messages = document.querySelectorAll('[class*="message"], [class*="msg"]');
                messages.forEach(msg => {
                    const rect = msg.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.content.messages.push({
                            tagName: msg.tagName,
                            className: msg.className,
                            text: msg.textContent?.substring(0, 100),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                return info;
            });

            console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`   - –ú–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: ${intelligentInfo.modals.length}`);
            console.log(`   - –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: ${intelligentInfo.buttons.all.length}`);
            console.log(`   - –ö–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥–∞: ${intelligentInfo.buttons.loginButtons.length}`);
            console.log(`   - –ö–Ω–æ–ø–æ–∫ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞: ${intelligentInfo.buttons.guestButtons.length}`);
            console.log(`   - –ö–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è: ${intelligentInfo.buttons.profileButtons.length}`);
            console.log(`   - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${intelligentInfo.users.userElements.length}`);
            console.log(`   - –î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${intelligentInfo.users.otherUsers.length}`);
            console.log(`   - –§–æ—Ä–º: ${intelligentInfo.forms.length}`);
            console.log(`   - –ü–æ—Å—Ç–æ–≤: ${intelligentInfo.content.posts.length}`);
            console.log(`   - –ß–∞—Ç–æ–≤: ${intelligentInfo.content.chats.length}`);

            return intelligentInfo;

        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:`, error.message);
            return null;
        }
    }

    determineIntelligentState(intelligentInfo, allText) {
        console.log(`üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
        
        const textStrings = allText.map(item => item.text);
        const fullText = textStrings.join(' ');
        
        // –ê–ù–ê–õ–ò–ó –û–ë–©–ï–ô –ö–ê–†–¢–ò–ù–´
        const analysis = {
            hasModals: intelligentInfo.modals.length > 0,
            hasLoginModal: intelligentInfo.modals.some(m => m.type === 'login'),
            hasProfileModal: intelligentInfo.modals.some(m => m.type === 'profile'),
            hasSelectionModal: intelligentInfo.modals.some(m => m.type === 'selection'),
            
            hasLoginButtons: intelligentInfo.buttons.loginButtons.length > 0,
            hasGuestButtons: intelligentInfo.buttons.guestButtons.length > 0,
            hasProfileButtons: intelligentInfo.buttons.profileButtons.length > 0,
            
            hasCurrentUser: intelligentInfo.users.currentUser !== null,
            hasOtherUsers: intelligentInfo.users.otherUsers.length > 0,
            hasManyUsers: intelligentInfo.users.userElements.length > 10, // –ú–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            hasMainContent: intelligentInfo.userInterface.mainContent !== null,
            hasRightSidebar: intelligentInfo.userInterface.sidebar.right !== null,
            hasLeftSidebar: intelligentInfo.userInterface.sidebar.left !== null,
            
            hasPosts: intelligentInfo.content.posts.length > 0,
            hasChats: intelligentInfo.content.chats.length > 0,
            hasMessages: intelligentInfo.content.messages.length > 0,
            
            hasLoginForms: intelligentInfo.forms.some(f => f.type === 'login'),
            hasPostForms: intelligentInfo.forms.some(f => f.type === 'post'),
            hasMessageForms: intelligentInfo.forms.some(f => f.type === 'message')
        };
        
        // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø
        let stateName = 'unknown';
        let description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
        let confidence = 0;
        const indicators = [];
        
        // –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø (–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫)
        
        // 1. –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        if (analysis.hasLoginModal && analysis.hasGuestButtons) {
            stateName = 'guest_login_modal';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞';
            confidence = 95;
            indicators.push('–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞', '–∫–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
        }
        
        // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞
        else if (analysis.hasSelectionModal && (fullText.includes('–≤—ã–±–µ—Ä–∏—Ç–µ') || fullText.includes('choose'))) {
            stateName = 'login_methods';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            confidence = 90;
            indicators.push('–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞', '—Å–ø–æ—Å–æ–±—ã –≤—Ö–æ–¥–∞');
        }
        
        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
        else if (analysis.hasProfileModal) {
            stateName = 'profile_modal';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            confidence = 85;
            indicators.push('–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        // 4. –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
        else if (!analysis.hasModals && (analysis.hasManyUsers || analysis.hasOtherUsers || analysis.hasMainContent)) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª)';
            confidence = 95;
            indicators.push('–Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω', '–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª');
        }
        
        // 5. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ—Å—Ç—ã, —á–∞—Ç—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª
        else if (analysis.hasMainContent && (analysis.hasPosts || analysis.hasChats || analysis.hasMessages)) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª)';
            confidence = 95;
            indicators.push('–æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–ø–æ—Å—Ç—ã/—á–∞—Ç—ã', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª');
        }
        
        // 6. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–æ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        else if (analysis.hasCurrentUser && !analysis.hasMainContent) {
            stateName = 'user_profile';
            description = '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            confidence = 80;
            indicators.push('—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å');
        }
        
        // 7. –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞, –Ω–æ –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        else if (analysis.hasLoginButtons && !analysis.hasModals) {
            stateName = 'login_selection';
            description = '–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            confidence = 75;
            indicators.push('–∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞', '–≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞');
        }
        
        // 8. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        else if (analysis.hasLoginForms) {
            stateName = 'login_form';
            description = '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞';
            confidence = 85;
            indicators.push('—Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞');
        }
        
        // 9. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        else if (fullText.includes('–æ—à–∏–±–∫–∞') || fullText.includes('error') || fullText.includes('–Ω–µ–≤–µ—Ä–Ω–æ')) {
            stateName = 'error_state';
            description = '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏';
            confidence = 90;
            indicators.push('–æ—à–∏–±–∫–∞');
        }
        
        return {
            name: stateName,
            description: description,
            confidence: confidence,
            indicators: indicators,
            analysis: analysis,
            intelligentInfo: intelligentInfo
        };
    }

    async analyzeIntelligentState(pageIndex, description = '') {
        console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `intelligent_${description.replace(/\s+/g, '_')}`);
        const intelligentInfo = await this.analyzeIntelligentDOM(pageIndex);
        const allText = await this.extractAllText(screenshotPath);
        
        // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const state = this.determineIntelligentState(intelligentInfo, allText);
        
        console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
        console.log(`   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${state.confidence}%)`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}`);
        console.log(`   üîç –ü—Ä–∏–∑–Ω–∞–∫–∏: ${state.indicators.join(', ')}`);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (intelligentInfo.users.currentUser) {
            console.log(`   üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${intelligentInfo.users.currentUser.text}"`);
        }
        
        if (intelligentInfo.users.otherUsers.length > 0) {
            console.log(`   üë• –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${intelligentInfo.users.otherUsers.length}`);
            intelligentInfo.users.otherUsers.forEach((user, index) => {
                console.log(`      ${index + 1}. "${user.text}"`);
            });
        }
        
        if (intelligentInfo.buttons.guestButtons.length > 0) {
            console.log(`   üéØ –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞: ${intelligentInfo.buttons.guestButtons.length}`);
            intelligentInfo.buttons.guestButtons.forEach((btn, index) => {
                console.log(`      ${index + 1}. "${btn.text}" (${btn.ariaLabel})`);
            });
        }
        
        return {
            state: state,
            intelligentInfo: intelligentInfo,
            allText: allText,
            screenshotPath: screenshotPath
        };
    }

    async intelligentGuestLogin(pageIndex) {
        console.log(`\nüß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥`);
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const initialState = await this.analyzeIntelligentState(pageIndex, 'initial');
        if (initialState.state.name === 'main_app') {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
            return { success: true, alreadyLoggedIn: true, currentUser: initialState.intelligentInfo.users.currentUser };
        }
        // 1. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        const guestButtons = await this.pages[pageIndex].evaluate(() => {
            const candidates = [];
            const elements = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"], [data-testid], [aria-label]'));
            for (const el of elements) {
                const text = el.textContent?.toLowerCase() || '';
                const aria = el.getAttribute('aria-label')?.toLowerCase() || '';
                const testid = el.getAttribute('data-testid')?.toLowerCase() || '';
                const role = el.getAttribute('role')?.toLowerCase() || '';
                let cls = '';
                if (typeof el.className === 'string') {
                    cls = el.className.toLowerCase();
                } else if (el.className && typeof el.className.baseVal === 'string') {
                    cls = el.className.baseVal.toLowerCase();
                }
                if (
                    (text.includes('–≥–æ—Å—Ç—å') && text.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                    (aria.includes('–≥–æ—Å—Ç—å') && aria.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                    (text.includes('guest') && text.includes('continue')) ||
                    (aria.includes('guest') && aria.includes('continue')) ||
                    (testid.includes('guest')) ||
                    (role === 'button' && (text.includes('–≥–æ—Å—Ç—å') || aria.includes('–≥–æ—Å—Ç—å')))
                ) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        candidates.push({
                            text,
                            aria,
                            testid,
                            role,
                            cls,
                            x: rect.x,
                            y: rect.y,
                            width: rect.width,
                            height: rect.height
                        });
                    }
                }
            }
            return candidates;
        });
        if (guestButtons.length === 0) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            return { success: false, reason: 'no_guest_buttons_found' };
        }
        const btn = guestButtons[0];
        // 2. –ö–ª–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—Ü–µ–Ω—Ç—Ä –∫–Ω–æ–ø–∫–∏)
        const clickX = btn.x + btn.width / 2;
        const clickY = btn.y + btn.height / 2;
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${clickX}, ${clickY}) –ø–æ –∫–Ω–æ–ø–∫–µ "${btn.text}"`);
        await this.pages[pageIndex].mouse.click(clickX, clickY);
        // 3. –ñ–¥–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        await new Promise(resolve => setTimeout(resolve, 3000));
        const afterState = await this.analyzeIntelligentState(pageIndex, 'after_guest_login');
        if (afterState.state.name === 'main_app') {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return { success: true, loginMethod: 'guest', currentUser: afterState.intelligentInfo.users.currentUser };
        } else if (afterState.state.name === 'login_methods') {
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞ ‚Äî –∏—â–µ–º email
            const emailBtn = afterState.intelligentInfo.buttons.all.find(b => b.text.toLowerCase().includes('email') || b.ariaLabel.toLowerCase().includes('email'));
            if (emailBtn) {
                const emailClickX = emailBtn.position.x + emailBtn.position.width / 2;
                const emailClickY = emailBtn.position.y + emailBtn.position.height / 2;
                console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${emailClickX}, ${emailClickY}) –ø–æ –∫–Ω–æ–ø–∫–µ email`);
                await this.pages[pageIndex].mouse.click(emailClickX, emailClickY);
                await new Promise(resolve => setTimeout(resolve, 2000));
                const finalState = await this.analyzeIntelligentState(pageIndex, 'after_email_login');
                if (finalState.state.name === 'main_app') {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: Email –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    return { success: true, loginMethod: 'email', currentUser: finalState.intelligentInfo.users.currentUser };
                }
            }
        } else if (afterState.state.name === 'profile_modal') {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—Ç–∫—Ä—ã–ª—Å—è –ø—Ä–æ—Ñ–∏–ª—å –≤–º–µ—Å—Ç–æ –≤—Ö–æ–¥–∞ ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞`);
            return { success: false, reason: 'wrong_button_clicked' };
        }
        return { success: false, reason: 'unexpected_state_after_click', state: afterState.state.name };
    }

    async checkRealUserInteraction(pageIndex) {
        console.log(`\nüß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        const state = await this.analyzeIntelligentState(pageIndex, 'user_interaction_check');
        
        const currentUser = state.intelligentInfo.users.currentUser;
        const otherUsers = state.intelligentInfo.users.otherUsers;
        
        console.log(`üë§ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${currentUser?.text || '–ù–µ –Ω–∞–π–¥–µ–Ω'}"`);
        console.log(`üë• –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${otherUsers.length}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const uniqueUserNames = new Set();
        otherUsers.forEach((user, index) => {
            console.log(`   ${index + 1}. "${user.text}" (${user.className})`);
            if (user.text) {
                // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                let cleanName = user.text.replace(/[–ì–¢]/g, '').replace(/\(–í—ã\)/g, '').trim();
                if (cleanName && cleanName.length > 2) {
                    uniqueUserNames.add(cleanName);
                }
            }
        });
        
        console.log(`\nüìä –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        Array.from(uniqueUserNames).forEach((name, index) => {
            console.log(`   ${index + 1}. "${name}"`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const hasRealOtherUsers = uniqueUserNames.size > 1; // –ë–æ–ª—å—à–µ 1, —Ç–∞–∫ –∫–∞–∫ –æ–¥–∏–Ω - —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        if (hasRealOtherUsers) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
            return { 
                success: true, 
                currentUser: currentUser,
                otherUsers: otherUsers,
                uniqueUserNames: Array.from(uniqueUserNames),
                userCount: uniqueUserNames.size
            };
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
            return { 
                success: false, 
                currentUser: currentUser,
                otherUsers: [],
                uniqueUserNames: Array.from(uniqueUserNames),
                userCount: uniqueUserNames.size
            };
        }
    }

    async runIntelligentTest() {
        try {
            console.log('üß† –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
            console.log('\nüìã –®–∞–≥ 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            const loginResults = [];
            
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const loginResult = await this.intelligentGuestLogin(i);
                loginResults.push(loginResult);
                
                if (!loginResult.success) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return false;
                }
            }
            
            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            if (this.pages.length > 1) {
                console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                
                const interactionResults = [];
                for (let i = 0; i < this.pages.length; i++) {
                    console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                    const interactionResult = await this.checkRealUserInteraction(i);
                    interactionResults.push(interactionResult);
                }
                
                // –®–∞–≥ 4: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                console.log('\nüìã –®–∞–≥ 4: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
                
                for (let i = 0; i < interactionResults.length; i++) {
                    for (let j = i + 1; j < interactionResults.length; j++) {
                        console.log(`\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} vs –ë—Ä–∞—É–∑–µ—Ä ${j + 1}:`);
                        
                        const user1 = loginResults[i].currentUser?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                        const user2 = loginResults[j].currentUser?.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                        
                        console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${user1}"`);
                        console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${j + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${user2}"`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
                        if (user1 !== user2) {
                            console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ - –∏–∑–æ–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                        } else {
                            console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –∏–∑–æ–ª—è—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞
                        const users1 = interactionResults[i].uniqueUserNames;
                        const users2 = interactionResults[j].uniqueUserNames;
                        
                        console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö: ${users1.join(', ') || '–Ω–∏–∫–æ–≥–æ'}`);
                        console.log(`   –ë—Ä–∞—É–∑–µ—Ä ${j + 1} –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö: ${users2.join(', ') || '–Ω–∏–∫–æ–≥–æ'}`);
                        
                        // –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        const user1SeesUser2 = users1.some(name1 => 
                            users2.some(name2 => 
                                name1.toLowerCase().includes(name2.toLowerCase()) || 
                                name2.toLowerCase().includes(name1.toLowerCase()) ||
                                name1.toLowerCase() === name2.toLowerCase()
                            )
                        );
                        
                        const user2SeesUser1 = users2.some(name2 => 
                            users1.some(name1 => 
                                name2.toLowerCase().includes(name1.toLowerCase()) || 
                                name1.toLowerCase().includes(name2.toLowerCase()) ||
                                name2.toLowerCase() === name1.toLowerCase()
                            )
                        );
                        
                        if (user1SeesUser2 && user2SeesUser1) {
                            console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ - –†–ï–ê–õ–¨–ù–û–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï!`);
                        } else if (user1SeesUser2 || user2SeesUser1) {
                            console.log(`   ‚ö†Ô∏è –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –≤–∏–¥–∏–º–æ—Å—Ç—å - —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ`);
                        } else {
                            console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ - "–º–µ—Ä—Ç–≤—ã–µ –¥—É—à–∏" –∏–ª–∏ –Ω–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è`);
                        }
                        
                        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
                        const intersections = [];
                        users1.forEach(name1 => {
                            users2.forEach(name2 => {
                                if (name1.toLowerCase().includes(name2.toLowerCase()) || 
                                    name2.toLowerCase().includes(name1.toLowerCase()) ||
                                    name1.toLowerCase() === name2.toLowerCase()) {
                                    intersections.push({ name1, name2 });
                                }
                            });
                        });
                        
                        if (intersections.length > 0) {
                            console.log(`   üîç –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–º–µ–Ω:`);
                            intersections.forEach(({ name1, name2 }) => {
                                console.log(`      "${name1}" ‚Üî "${name2}"`);
                            });
                        }
                    }
                }
            }
            
            console.log('\nüéâ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        for (const profileDir of this.userProfiles) {
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
                console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: ${profileDir}`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
async function main() {
    const analyzer = new IntelligentUIAnalyzer();
    
    try {
        await analyzer.init(2); // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        const success = await analyzer.runIntelligentTest();
        
        if (success) {
            console.log('\n‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await analyzer.close();
    }
}

main().catch(console.error); 