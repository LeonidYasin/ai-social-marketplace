// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend –∏ backend

async function testIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend –∏ backend...\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ backend API
  try {
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ backend API...');
    const healthResponse = await fetch('http://localhost:8000/api/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData.message);
  } catch (error) {
    console.log('‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return;
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
  try {
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend...');
    const frontendResponse = await fetch('http://localhost:3000');
    console.log('‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å:', frontendResponse.status, ')');
  } catch (error) {
    console.log('‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return;
  }

  // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  try {
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await fetch('http://localhost:8000/api/users');
    const usersData = await usersResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', usersData.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    usersData.forEach(user => {
      console.log(`   - ${user.first_name} ${user.last_name} (@${user.username})`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  }

  // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
  try {
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...');
    const postsResponse = await fetch('http://localhost:8000/api/posts');
    const postsData = await postsResponse.json();
    console.log('‚úÖ –ü–æ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', postsData.posts.length, '–ø–æ—Å—Ç–æ–≤');
    postsData.posts.forEach(post => {
      console.log(`   - "${post.content.substring(0, 50)}..." –æ—Ç ${post.first_name} ${post.last_name}`);
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', error.message);
  }

  // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
  try {
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...');
    const newPostData = {
      user_id: 1,
      content: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é! üéâ',
      privacy: 'public',
      section: 'general'
    };

    const createResponse = await fetch('http://localhost:8000/api/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newPostData)
    });

    const createData = await createResponse.json();
    console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:', createData.message);
    console.log('   ID –ø–æ—Å—Ç–∞:', createData.post.id);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error.message);
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
  try {
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS...');
    const corsResponse = await fetch('http://localhost:8000/api/users', {
      method: 'OPTIONS'
    });
    const corsHeaders = corsResponse.headers;
    console.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('   Access-Control-Allow-Origin:', corsHeaders.get('Access-Control-Allow-Origin'));
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ CORS:', error.message);
  }

  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('   - Backend API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
  console.log('   - Frontend: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω');
  console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞');
  console.log('   - CORS: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω');
  console.log('\nüåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testIntegration().catch(console.error); 