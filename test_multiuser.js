const fetch = require('node-fetch');

const API_BASE = 'http://localhost:8000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const testUsers = [
  {
    username: 'testuser1',
    email: 'test1@example.com',
    password: 'password123',
    first_name: '–¢–µ—Å—Ç',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1'
  },
  {
    username: 'testuser2', 
    email: 'test2@example.com',
    password: 'password123',
    first_name: '–¢–µ—Å—Ç',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2'
  },
  {
    username: 'testuser3',
    email: 'test3@example.com', 
    password: 'password123',
    first_name: '–¢–µ—Å—Ç',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(userData) {
  try {
    const response = await fetch(`${API_BASE}/users/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(userData)
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:`, data.user.id);
      return data.token;
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${userData.username}:`, error.error);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${userData.username}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loginUser(userData) {
  try {
    const response = await fetch(`${API_BASE}/users/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: userData.email,
        password: userData.password
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username} –≤–æ—à–µ–ª:`, data.user.id);
      return data.token;
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ ${userData.username}:`, error.error);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ ${userData.username}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUsers(token) {
  try {
    const response = await fetch(`${API_BASE}/users`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const users = await response.json();
      console.log(`üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${users.length}):`);
      users.forEach(user => {
        console.log(`  - ${user.username} (${user.first_name} ${user.last_name})`);
      });
      return users;
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, error.error);
      return [];
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser(token) {
  try {
    const response = await fetch(`${API_BASE}/auth/me`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const user = await response.json();
      console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${user.first_name} ${user.last_name})`);
      return user;
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.error);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testMultiUser() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã...\n');
  
  const tokens = [];
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  for (const userData of testUsers) {
    const token = await registerUser(userData);
    if (token) {
      tokens.push({ user: userData.username, token });
    }
  }
  
  console.log('\nüîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
  for (const userData of testUsers) {
    const token = await loginUser(userData);
    if (token) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
      const existingIndex = tokens.findIndex(t => t.user === userData.username);
      if (existingIndex >= 0) {
        tokens[existingIndex].token = token;
      } else {
        tokens.push({ user: userData.username, token });
      }
    }
  }
  
  console.log('\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º:');
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
  for (const { user, token } of tokens) {
    console.log(`\n--- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user} ---`);
    await getCurrentUser(token);
    await getUsers(token);
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${tokens.length}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMultiUser().catch(console.error); 