async function debugNotificationCreation() {
  console.log('=== –û–¢–õ–ê–î–ö–ê –°–û–ó–î–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      username: `debug_test_${Date.now()}`,
      email: `debug_test${Date.now()}@example.com`,
      password: 'testpass123',
      first_name: 'Debug',
      last_name: 'Test'
    };
    
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testUser)
    });
    
    if (!registerResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.status}`);
    }
    
    const userData = await registerResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', userData.username);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694" (ID: 109)...');
    const messageResponse = await fetch('http://localhost:8000/api/messages/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${userData.token}`
      },
      body: JSON.stringify({
        receiverId: 109,
        content: 'üîî –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'
      })
    });
    
    if (!messageResponse.ok) {
      const errorText = await messageResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${messageResponse.status} - ${errorText}`);
    }
    
    const messageData = await messageResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageData);
    
    // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    setTimeout(async () => {
      try {
        const notificationsResponse = await fetch('http://localhost:8000/api/notifications', {
          headers: { 'Authorization': `Bearer ${userData.token}` }
        });
        
        if (notificationsResponse.ok) {
          const notifications = await notificationsResponse.json();
          console.log('üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifications);
          
          if (notifications.notifications && notifications.notifications.length > 0) {
            console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!');
            notifications.notifications.forEach((notif, index) => {
              console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
            });
          } else {
            console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationsResponse.status);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ì–æ—Å—Ç—å 4694)...');
        
        // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∫–∞–∫ –ì–æ—Å—Ç—å 4694
        const guestLoginResponse = await fetch('http://localhost:8000/api/users/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            username: 'guest_469492e4_4g6cde',
            password: 'guest_password'
          })
        });
        
        if (guestLoginResponse.ok) {
          const guestData = await guestLoginResponse.json();
          console.log('‚úÖ –í—Ö–æ–¥ –ø–æ–¥ –ì–æ—Å—Ç—å 4694 –≤—ã–ø–æ–ª–Ω–µ–Ω');
          
          const guestNotificationsResponse = await fetch('http://localhost:8000/api/notifications', {
            headers: { 'Authorization': `Bearer ${guestData.token}` }
          });
          
          if (guestNotificationsResponse.ok) {
            const guestNotifications = await guestNotificationsResponse.json();
            console.log('üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ì–æ—Å—Ç—å 4694:', guestNotifications);
            
            if (guestNotifications.notifications && guestNotifications.notifications.length > 0) {
              console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã!');
              guestNotifications.notifications.forEach((notif, index) => {
                console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
              });
            } else {
              console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', guestNotificationsResponse.status);
          }
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–¥ –ì–æ—Å—Ç—å 4694');
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
      }
      
      process.exit(0);
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

debugNotificationCreation(); 