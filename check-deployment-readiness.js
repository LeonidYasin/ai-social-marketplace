#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com...\n');

let allChecksPassed = true;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: render.yaml
console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml...');
if (fs.existsSync('render.yaml')) {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  if (renderYaml.includes('buildCommand: cd backend') && 
      renderYaml.includes('startCommand: cd backend') &&
      renderYaml.includes('buildCommand: cd frontend')) {
    console.log('‚úÖ render.yaml –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } else {
    console.log('‚ùå render.yaml —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    allChecksPassed = false;
  }
} else {
  console.log('‚ùå render.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allChecksPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: backend/package.json
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/package.json...');
if (fs.existsSync('backend/package.json')) {
  const backendPackage = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
  if (backendPackage.scripts && backendPackage.scripts.start) {
    console.log('‚úÖ backend/package.json —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç start');
  } else {
    console.log('‚ùå backend/package.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç start');
    allChecksPassed = false;
  }
} else {
  console.log('‚ùå backend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allChecksPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: frontend/package.json
console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend/package.json...');
if (fs.existsSync('frontend/package.json')) {
  const frontendPackage = JSON.parse(fs.readFileSync('frontend/package.json', 'utf8'));
  if (frontendPackage.scripts && frontendPackage.scripts.build) {
    console.log('‚úÖ frontend/package.json —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç build');
  } else {
    console.log('‚ùå frontend/package.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç build');
    allChecksPassed = false;
  }
} else {
  console.log('‚ùå frontend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allChecksPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: backend/src/app.js
console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/src/app.js...');
if (fs.existsSync('backend/src/app.js')) {
  console.log('‚úÖ backend/src/app.js –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå backend/src/app.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allChecksPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: frontend/src/App.jsx
console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend/src/App.jsx...');
if (fs.existsSync('frontend/src/App.jsx')) {
  console.log('‚úÖ frontend/src/App.jsx –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå frontend/src/App.jsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allChecksPassed = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
const envFiles = ['backend/config.env', 'frontend/.env', '.env'];
let envFileFound = false;

for (const envFile of envFiles) {
  if (fs.existsSync(envFile)) {
    console.log(`‚úÖ ${envFile} –Ω–∞–π–¥–µ–Ω`);
    envFileFound = true;
    break;
  }
}

if (!envFileFound) {
  console.log('‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è production)');
}

// –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
console.log('\n' + '='.repeat(50));
if (allChecksPassed) {
  console.log('üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m "Fix render deployment"');
  console.log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: git push origin main');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Render Dashboard');
  console.log('4. –í—ã–±–µ—Ä–∏—Ç–µ "Blueprint" –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render Dashboard');
} else {
  console.log('‚ùå –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
  console.log('\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –≤—ã—à–µ –ø—Ä–æ–±–ª–µ–º—ã');
}

console.log('\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
console.log('- –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: QUICK_DEPLOY.md');
console.log('- –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: DEPLOYMENT_GUIDE.md'); 