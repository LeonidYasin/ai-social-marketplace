const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com...\n');

// –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'render.yaml',
  'backend/package.json',
  'frontend/package.json',
  'backend/src/app.js',
  'frontend/src/App.jsx',
  'setup_database.sql',
  'backend/init-db.js',
  'backend/health-check.js',
  'frontend/env.example'
];

// –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const recommendedFiles = [
  'DEPLOYMENT_GUIDE.md',
  'README.md',
  '.gitignore'
];

let allGood = true;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤:');
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    allGood = false;
  }
});

console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:');
recommendedFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ö†Ô∏è  ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json —Ñ–∞–π–ª—ã
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json —Ñ–∞–π–ª–æ–≤:');

// Backend package.json
try {
  const backendPackage = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
  const backendScripts = backendPackage.scripts || {};
  
  console.log('  Backend scripts:');
  ['start', 'init-db', 'health-check'].forEach(script => {
    if (backendScripts[script]) {
      console.log(`    ‚úÖ ${script}`);
    } else {
      console.log(`    ‚ùå ${script} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      allGood = false;
    }
  });
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è backend/package.json');
  allGood = false;
}

// Frontend package.json
try {
  const frontendPackage = JSON.parse(fs.readFileSync('frontend/package.json', 'utf8'));
  const frontendScripts = frontendPackage.scripts || {};
  
  console.log('  Frontend scripts:');
  ['start', 'build'].forEach(script => {
    if (frontendScripts[script]) {
      console.log(`    ‚úÖ ${script}`);
    } else {
      console.log(`    ‚ùå ${script} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      allGood = false;
    }
  });
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è frontend/package.json');
  allGood = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º render.yaml
console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml:');
try {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  
  const checks = [
    { name: 'PostgreSQL Database', pattern: 'type: pserv' },
    { name: 'Backend Service', pattern: 'name: social-marketplace-backend' },
    { name: 'Frontend Service', pattern: 'name: social-marketplace-frontend' },
    { name: 'Database Connection', pattern: 'fromDatabase:' },
    { name: 'Environment Variables', pattern: 'envVars:' }
  ];
  
  checks.forEach(check => {
    if (renderYaml.includes(check.pattern)) {
      console.log(`  ‚úÖ ${check.name}`);
    } else {
      console.log(`  ‚ùå ${check.name} - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      allGood = false;
    }
  });
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è render.yaml');
  allGood = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore:');
try {
  const gitignore = fs.readFileSync('.gitignore', 'utf8');
  const gitignoreChecks = [
    'node_modules',
    '.env',
    'logs',
    '*.log'
  ];
  
  gitignoreChecks.forEach(item => {
    if (gitignore.includes(item)) {
      console.log(`  ‚úÖ ${item}`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${item} - –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore`);
    }
  });
} catch (error) {
  console.log('  ‚ö†Ô∏è  .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
console.log('\n' + '='.repeat(50));
if (allGood) {
  console.log('üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –∑–∞–∫–æ–º–º–∏—á–µ–Ω –≤ git');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –≤ Render Dashboard');
  console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–º. –≤ DEPLOYMENT_GUIDE.md');
} else {
  console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—é');
  console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞');
}
console.log('='.repeat(50)); 