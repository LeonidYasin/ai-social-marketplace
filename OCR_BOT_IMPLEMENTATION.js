const puppeteer = require('puppeteer');
const tesseract = require('node-tesseract-ocr');
const fs = require('fs').promises;
const path = require('path');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π OCR –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 */
class OCRBot {
  constructor(config = {}) {
    this.config = {
      browser: {
        headless: false,
        slowMo: 100,
        defaultViewport: { width: 1920, height: 1080 }
      },
      devices: {
        desktop: { width: 1920, height: 1080 },
        mobile: { width: 375, height: 667 }
      },
      urls: {
        base: 'http://localhost:3000',
        api: 'http://localhost:8000/api'
      },
      timeouts: {
        pageLoad: 30000,
        elementWait: 10000,
        actionDelay: 1000
      },
      ocr: {
        language: 'rus+eng',
        confidence: 0.8
      },
      ...config
    };
    
    this.browser = null;
    this.page = null;
    this.errors = [];
    this.screenshots = [];
    this.currentTest = null;
    this.testResults = [];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  async init(device = 'desktop') {
    try {
      console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ${device}`);
      
      // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
      this.browser = await puppeteer.launch({
        headless: this.config.browser.headless,
        slowMo: this.config.browser.slowMo,
        defaultViewport: this.config.devices[device] || this.config.browser.defaultViewport,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      this.page = await this.browser.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
      this.page.setDefaultTimeout(this.config.timeouts.elementWait);
      this.page.setDefaultNavigationTimeout(this.config.timeouts.pageLoad);
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      this.page.on('console', msg => {
        if (msg.type() === 'error') {
          console.error('Browser Error:', msg.text());
        }
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      this.page.on('pageerror', error => {
        console.error('Page Error:', error.message);
        this.errors.push({
          type: 'page_error',
          message: error.message,
          timestamp: new Date().toISOString()
        });
      });

      console.log('‚úÖ OCR –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
   */
  async takeScreenshot(name) {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `${name}_${timestamp}.png`;
      const filepath = path.join(__dirname, 'reports', 'screenshots', filename);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await fs.mkdir(path.dirname(filepath), { recursive: true });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      await this.page.screenshot({
        path: filepath,
        fullPage: true
      });
      
      this.screenshots.push({
        name,
        filepath,
        timestamp: new Date().toISOString()
      });
      
      console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
      return filepath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
   */
  async recognizeText(imagePath) {
    try {
      const config = {
        lang: this.config.ocr.language,
        oem: 1,
        psm: 3,
      };
      
      const text = await tesseract.recognize(imagePath, config);
      return text.trim();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
      return '';
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  async findText(text, timeout = 5000) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞: "${text}"`);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è OCR
      const screenshotPath = await this.takeScreenshot(`search_${text.replace(/\s+/g, '_')}`);
      
      // OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
      const recognizedText = await this.recognizeText(screenshotPath);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
      const found = recognizedText.toLowerCase().includes(text.toLowerCase());
      
      if (found) {
        console.log(`‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω: "${text}"`);
        return {
          found: true,
          text: recognizedText,
          screenshot: screenshotPath
        };
      } else {
        console.log(`‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${text}"`);
        console.log(`üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${recognizedText}"`);
        return {
          found: false,
          text: recognizedText,
          screenshot: screenshotPath
        };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞:', error);
      return { found: false, error: error.message };
    }
  }

  /**
   * –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º
   */
  async clickText(text, timeout = 5000) {
    try {
      console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É: "${text}"`);
      
      // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞
      const searchResult = await this.findText(text, timeout);
      
      if (!searchResult.found) {
        throw new Error(`–¢–µ–∫—Å—Ç "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ —á–µ—Ä–µ–∑ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const selectors = [
        `text="${text}"`,
        `text*="${text}"`,
        `text~="${text}"`,
        `text^="${text}"`,
        `text$="${text}"`
      ];
      
      for (const selector of selectors) {
        try {
          await this.page.waitForSelector(selector, { timeout: 2000 });
          await this.page.click(selector);
          console.log(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
          return true;
        } catch (e) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
      
      // –ï—Å–ª–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      console.log('‚ö†Ô∏è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–∞
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –≤ —Ü–µ–Ω—Ç—Ä
      await this.page.waitForTimeout(1000);
      await this.page.click('body');
      
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É "${text}":`, error);
      throw error;
    }
  }

  /**
   * –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
   */
  async typeText(placeholder, text) {
    try {
      console.log(`‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ "${placeholder}": "${text}"`);
      
      // –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞
      const inputSelectors = [
        `input[placeholder*="${placeholder}"]`,
        `textarea[placeholder*="${placeholder}"]`,
        `input[aria-label*="${placeholder}"]`,
        `textarea[aria-label*="${placeholder}"]`
      ];
      
      let inputElement = null;
      for (const selector of inputSelectors) {
        try {
          inputElement = await this.page.$(selector);
          if (inputElement) break;
        } catch (e) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
      
      if (!inputElement) {
        throw new Error(`–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å placeholder "${placeholder}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
      await inputElement.click();
      await inputElement.type(text);
      
      console.log(`‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω: "${text}"`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ "${placeholder}":`, error);
      throw error;
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  async waitForElement(text, timeout = 10000) {
    try {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: "${text}"`);
      
      const startTime = Date.now();
      
      while (Date.now() - startTime < timeout) {
        const searchResult = await this.findText(text, 1000);
        if (searchResult.found) {
          console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è: "${text}"`);
          return true;
        }
        await this.page.waitForTimeout(500);
      }
      
      throw new Error(`–≠–ª–µ–º–µ–Ω—Ç "${text}" –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ ${timeout}ms`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ "${text}":`, error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ —Ç–µ—Å—Ç–∞
   */
  async executeStep(step, bot) {
    const stepResult = {
      name: step.name,
      status: 'pending',
      startTime: new Date().toISOString(),
      endTime: null,
      error: null,
      screenshot: null
    };
    
    try {
      console.log(`\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${step.name}`);
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      if (step.action) {
        await step.action(bot);
      }
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (step.wait) {
        await this.page.waitForTimeout(step.wait);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (step.expected) {
        const searchResult = await this.findText(step.expected);
        if (!searchResult.found) {
          throw new Error(`–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${step.expected}"`);
        }
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      stepResult.screenshot = await this.takeScreenshot(`step_${step.name.replace(/\s+/g, '_')}`);
      
      stepResult.status = 'passed';
      stepResult.endTime = new Date().toISOString();
      
      console.log(`‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${step.name}`);
      
    } catch (error) {
      stepResult.status = 'failed';
      stepResult.error = error.message;
      stepResult.endTime = new Date().toISOString();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—à–∏–±–∫–∏
      stepResult.screenshot = await this.takeScreenshot(`error_${step.name.replace(/\s+/g, '_')}`);
      
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ "${step.name}":`, error.message);
      
      this.errors.push({
        step: step.name,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
    
    return stepResult;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runScenario(scenario) {
    console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
    
    const scenarioResult = {
      name: scenario.name,
      startTime: new Date().toISOString(),
      endTime: null,
      steps: [],
      status: 'pending',
      errors: []
    };
    
    try {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (scenario.startUrl) {
        console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${scenario.startUrl}`);
        await this.page.goto(scenario.startUrl, { waitUntil: 'networkidle0' });
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤
      for (const step of scenario.steps) {
        const stepResult = await this.executeStep(step, this);
        scenarioResult.steps.push(stepResult);
        
        // –ï—Å–ª–∏ —à–∞–≥ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        if (stepResult.status === 'failed') {
          scenarioResult.status = 'failed';
          break;
        }
      }
      
      if (scenarioResult.status !== 'failed') {
        scenarioResult.status = 'passed';
      }
      
    } catch (error) {
      scenarioResult.status = 'failed';
      scenarioResult.errors.push(error.message);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}":`, error);
    }
    
    scenarioResult.endTime = new Date().toISOString();
    this.testResults.push(scenarioResult);
    
    console.log(`üèÅ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${scenario.name} - ${scenarioResult.status}`);
    
    return scenarioResult;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
   */
  async generateReport() {
    console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
    
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalScenarios: this.testResults.length,
        passedScenarios: this.testResults.filter(r => r.status === 'passed').length,
        failedScenarios: this.testResults.filter(r => r.status === 'failed').length,
        totalSteps: this.testResults.reduce((sum, r) => sum + r.steps.length, 0),
        passedSteps: this.testResults.reduce((sum, r) => sum + r.steps.filter(s => s.status === 'passed').length, 0),
        failedSteps: this.testResults.reduce((sum, r) => sum + r.steps.filter(s => s.status === 'failed').length, 0)
      },
      scenarios: this.testResults,
      errors: this.errors,
      screenshots: this.screenshots,
      recommendations: this.generateRecommendations()
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON
    const reportPath = path.join(__dirname, 'reports', `report_${new Date().toISOString().replace(/[:.]/g, '-')}.json`);
    await fs.mkdir(path.dirname(reportPath), { recursive: true });
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
    await this.generateHTMLReport(report);
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    
    return report;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations() {
    const recommendations = [];
    
    if (this.errors.length > 0) {
      recommendations.push({
        type: 'error',
        message: `–ù–∞–π–¥–µ–Ω–æ ${this.errors.length} –æ—à–∏–±–æ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ.`,
        priority: 'high'
      });
    }
    
    const failedScenarios = this.testResults.filter(r => r.status === 'failed');
    if (failedScenarios.length > 0) {
      recommendations.push({
        type: 'scenario',
        message: `${failedScenarios.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.`,
        priority: 'high'
      });
    }
    
    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
   */
  async generateHTMLReport(report) {
    const html = `
<!DOCTYPE html>
<html>
<head>
    <title>OCR Bot Test Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .summary { background: #f5f5f5; padding: 20px; border-radius: 5px; }
        .scenario { margin: 20px 0; border: 1px solid #ddd; padding: 15px; }
        .passed { border-left: 5px solid #4CAF50; }
        .failed { border-left: 5px solid #f44336; }
        .step { margin: 10px 0; padding: 10px; background: #f9f9f9; }
        .error { color: #f44336; }
        .screenshot { max-width: 300px; margin: 10px 0; }
    </style>
</head>
<body>
    <h1>OCR Bot Test Report</h1>
    <div class="summary">
        <h2>Summary</h2>
        <p>Total Scenarios: ${report.summary.totalScenarios}</p>
        <p>Passed: ${report.summary.passedScenarios}</p>
        <p>Failed: ${report.summary.failedScenarios}</p>
        <p>Total Steps: ${report.summary.totalSteps}</p>
        <p>Passed Steps: ${report.summary.passedSteps}</p>
        <p>Failed Steps: ${report.summary.failedSteps}</p>
    </div>
    
    <h2>Scenarios</h2>
    ${report.scenarios.map(scenario => `
        <div class="scenario ${scenario.status}">
            <h3>${scenario.name} - ${scenario.status}</h3>
            <p>Duration: ${new Date(scenario.endTime) - new Date(scenario.startTime)}ms</p>
            ${scenario.steps.map(step => `
                <div class="step ${step.status}">
                    <h4>${step.name} - ${step.status}</h4>
                    ${step.error ? `<p class="error">Error: ${step.error}</p>` : ''}
                    ${step.screenshot ? `<img src="${step.screenshot}" class="screenshot" alt="Screenshot">` : ''}
                </div>
            `).join('')}
        </div>
    `).join('')}
    
    <h2>Errors</h2>
    ${report.errors.map(error => `
        <div class="error">
            <p><strong>${error.step || 'Unknown'}</strong>: ${error.error}</p>
            <p>Time: ${error.timestamp}</p>
        </div>
    `).join('')}
    
    <h2>Recommendations</h2>
    ${report.recommendations.map(rec => `
        <div class="recommendation">
            <p><strong>${rec.type}</strong>: ${rec.message}</p>
            <p>Priority: ${rec.priority}</p>
        </div>
    `).join('')}
</body>
</html>
    `;
    
    const htmlPath = path.join(__dirname, 'reports', `report_${new Date().toISOString().replace(/[:.]/g, '-')}.html`);
    await fs.writeFile(htmlPath, html);
    
    console.log(`üåê HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${htmlPath}`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  async cleanup() {
    try {
      if (this.browser) {
        await this.browser.close();
        console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
    }
  }
}

module.exports = OCRBot; 