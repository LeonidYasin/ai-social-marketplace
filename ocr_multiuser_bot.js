const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class OCRMultiUserBot {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir);
        }
    }

    async init() {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç-–±–æ—Ç–∞...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        for (let i = 0; i < 2; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: ['--start-maximized', '--no-sandbox', `--user-data-dir=./user-data-${i}`]
            });
            
            const page = await browser.newPage();
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 0) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    async clickOnText(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò—â–µ–º —Ç–µ–∫—Å—Ç "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `search_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length === 0) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const target = coords[0];
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–æ "${target.text}" (conf: ${target.confidence}%)`);
        console.log(`üìç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${target.x}, y=${target.y}, —Ü–µ–Ω—Ç—Ä: (${target.centerX}, ${target.centerY})`);

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
        await this.pages[pageIndex].mouse.click(target.centerX, target.centerY);
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        return true;
    }

    async verifyTextExists(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `verify_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length > 0) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–∞–π–¥–µ–Ω (${coords.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)`);
            return true;
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }
    }

    async runMultiUserTest() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–≤—É—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –¥–≤—É—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö');
            for (let i = 0; i < 2; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –í—Ö–æ–¥–∏–º –∫–∞–∫ –≥–æ—Å—Ç–∏ –≤ –æ–±–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            console.log('\nüìã –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤ –æ–±–∞ –±—Ä–∞—É–∑–µ—Ä–∞');
            for (let i = 0; i < 2; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
                const guestButtonExists = await this.verifyTextExists(i, '–≥–æ—Å—Ç—å', '–Ω–∞ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
                
                if (!guestButtonExists) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                    return false;
                }
                
                // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
                const guestClickSuccess = await this.clickOnText(i, '–≥–æ—Å—Ç—å', '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
                
                if (!guestClickSuccess) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞`);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                const loginSuccess = await this.verifyTextExists(i, '–ø–æ—Å—Ç', '–≤ –ª–µ–Ω—Ç–µ –ø–æ—Å—Ç–æ–≤');
                
                if (!loginSuccess) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                    return false;
                }
                
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            }
            
            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
            console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∞–π–¥–±–∞—Ä–µ');
            for (let i = 0; i < 2; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∞–π–¥–±–∞—Ä–µ
                const usersInSidebar = await this.verifyTextExists(i, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–≤ —Å–∞–π–¥–±–∞—Ä–µ');
                
                if (usersInSidebar) {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –Ω–∞–π–¥–µ–Ω—ã`);
                } else {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            }
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
            console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤');
            for (let i = 0; i < 2; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                const createPostButton = await this.verifyTextExists(i, '—Å–æ–∑–¥–∞—Ç—å', '–∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
                
                if (createPostButton) {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞`);
                    
                    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                    const createPostClick = await this.clickOnText(i, '—Å–æ–∑–¥–∞—Ç—å', '–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
                    
                    if (createPostClick) {
                        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                        const formExists = await this.verifyTextExists(i, '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–≤ —Ñ–æ—Ä–º–µ –ø–æ—Å—Ç–∞');
                        
                        if (formExists) {
                            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
                        } else {
                            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                        }
                    }
                } else {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            }
            
            // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            console.log('\nüìã –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
            
            // –í –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏ –∫–ª–∏–∫–∞–µ–º –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
            console.log('\n--- –ë—Ä–∞—É–∑–µ—Ä 1: –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ ---');
            const chatClickSuccess = await this.clickOnText(0, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
            
            if (chatClickSuccess) {
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä 1: –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                const messageInput = await this.verifyTextExists(0, '—Å–æ–æ–±—â–µ–Ω–∏–µ', '–ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
                
                if (messageInput) {
                    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä 1: –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ');
                } else {
                    console.log('‚ùå –ë—Ä–∞—É–∑–µ—Ä 1: –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
            } else {
                console.log('‚ùå –ë—Ä–∞—É–∑–µ—Ä 1: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç');
            }
            
            // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            console.log('\nüìã –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
            for (let i = 0; i < 2; i++) {
                const notifications = await this.verifyTextExists(i, '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
                
                if (notifications) {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã`);
                } else {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            }
            
            console.log('\nüéâ –ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞
async function main() {
    const bot = new OCRMultiUserBot();
    
    try {
        await bot.init();
        const success = await bot.runMultiUserTest();
        
        if (success) {
            console.log('\n‚úÖ –í—Å–µ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await bot.close();
    }
}

main().catch(console.error); 