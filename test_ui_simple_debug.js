const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function simpleDebug() {
  console.log('üîç –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1000,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await page.screenshot({ path: path.join(screenshotsDir, 'simple_01_initial.png') });

    // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –∏ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const selectors = [
      'button',
      '[role="button"]',
      '.MuiButton-root',
      '.MuiIconButton-root',
      'a[role="button"]'
    ];
    
    for (const selector of selectors) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
        const elements = await page.$$(selector);
        console.log(`   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${elements.length}`);
        
        if (elements.length > 0) {
          const texts = await page.evaluate((sel) => {
            return Array.from(document.querySelectorAll(sel)).map(el => el.textContent.trim());
          }, selector);
          console.log(`   –¢–µ–∫—Å—Ç—ã: ${texts.slice(0, 5).join(', ')}...`);
        }
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    await page.screenshot({ path: path.join(screenshotsDir, 'simple_02_after_wait.png') });
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
    
    const loginButtonSelectors = [
      'button:has-text("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")',
      'button:has-text("–í–æ–π—Ç–∏")',
      '[role="button"]:has-text("–í–æ–π—Ç–∏")',
      '.MuiButton-root:has-text("–í–æ–π—Ç–∏")'
    ];
    
    for (const selector of loginButtonSelectors) {
      try {
        const button = await page.$(selector);
        if (button) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑: ${selector}`);
          await button.click();
          console.log('üñ±Ô∏è –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ');
          await new Promise(resolve => setTimeout(resolve, 3000));
          await page.screenshot({ path: path.join(screenshotsDir, `simple_03_after_click_${selector.replace(/[^a-zA-Z0-9]/g, '_')}.png`) });
          break;
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}: ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const result = await page.evaluate(() => {
      return {
        hasDialog: !!document.querySelector('[role="dialog"]'),
        dialogTitle: document.querySelector('[role="dialog"] h1, [role="dialog"] h2, [role="dialog"] h3, [role="dialog"] h4, [role="dialog"] h5, [role="dialog"] h6')?.textContent,
        allButtons: Array.from(document.querySelectorAll('button')).map(btn => btn.textContent.trim()).filter(t => t),
        pageTitle: document.title
      };
    });
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    await page.screenshot({ path: path.join(screenshotsDir, 'simple_04_final.png') });
    
    console.log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (page) {
      await page.screenshot({ path: path.join(screenshotsDir, 'simple_error.png') });
    }
  } finally {
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}

simpleDebug().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 