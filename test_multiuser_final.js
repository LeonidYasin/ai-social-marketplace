const { OCRMasterBot } = require('./ocr_master_bot');

class FinalMultiUserTester {
  constructor() {
    this.bot = null;
    this.results = [];
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞...');
    
    this.bot = new OCRMasterBot();
    await this.bot.init(3); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 3 –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å 3 –±—Ä–∞—É–∑–µ—Ä–∞–º–∏');
  }

  async runComprehensiveTest() {
    console.log('\nüéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    
    const scenario = {
      name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç',
      description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç—Ä–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –í—Ö–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 1,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 2,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        // –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 1,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 2,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        {
          action: 'verify',
          browserIndex: 0,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        },
        {
          action: 'verify',
          browserIndex: 1,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        },
        {
          action: 'verify',
          browserIndex: 2,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–∫–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ –≤ —Ç—Ä–µ—Ç—å–µ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        },
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        {
          action: 'verify',
          browserIndex: 0,
          text: '–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
          description: '–∫–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        },
        {
          action: 'verify',
          browserIndex: 1,
          text: '–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
          description: '–∫–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        },
        {
          action: 'verify',
          browserIndex: 2,
          text: '–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
          description: '–∫–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ç—Ä–µ—Ç—å–µ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          required: false
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        errors: result.errors
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runInteractionTest() {
    console.log('\nüí¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...');
    
    const scenario = {
      name: '–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–∏—Ç
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'
        },
        // –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–∞–µ—Ç –ø–æ—Å—Ç
        {
          action: 'click',
          browserIndex: 1,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 1,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'
        },
        {
          action: 'click',
          browserIndex: 1,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–ª–∞–π–∫ –ø–æ—Å—Ç–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
          required: false
        },
        // –¢—Ä–µ—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç
        {
          action: 'click',
          browserIndex: 2,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 2,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'
        },
        {
          action: 'click',
          browserIndex: 2,
          text: '–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
          description: '–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
          required: false
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        errors: result.errors
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runRealTimeSyncTest() {
    console.log('\n‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
    
    const scenario = {
      name: '–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Ö–æ–¥—è—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 1,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 2,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        // –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 1,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 2,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        {
          action: 'click',
          browserIndex: 0,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–ª–∞–π–∫ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          required: false
        },
        {
          action: 'click',
          browserIndex: 1,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–ª–∞–π–∫ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          required: false
        },
        {
          action: 'click',
          browserIndex: 2,
          text: '–Ω—Ä–∞–≤–∏—Ç—Å—è',
          description: '–ª–∞–π–∫ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          required: false
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        errors: result.errors
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runPerformanceTest() {
    console.log('\n‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const startTime = Date.now();
    
    const scenario = {
      name: '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç—Ä–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 2000,
          description: '–ö—Ä–∞—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 1,
          text: '–≥–æ—Å—Ç—å',
          description: '–±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'click',
          browserIndex: 2,
          text: '–≥–æ—Å—Ç—å',
          description: '–±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 5000,
          description: '–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 1,
          text: '–ø–æ—Å—Ç',
          timeout: 5000,
          description: '–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        },
        {
          action: 'waitFor',
          browserIndex: 2,
          text: '–ø–æ—Å—Ç',
          timeout: 5000,
          description: '–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        errors: result.errors,
        performance: {
          duration: duration,
          averageStepTime: duration / scenario.steps.length
        }
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
      console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥: ${(duration / scenario.steps.length).toFixed(0)}ms`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  generateFinalReport() {
    console.log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    console.log('=' .repeat(60));
    
    const totalTests = this.results.length;
    const successfulTests = this.results.filter(r => r.success).length;
    const failedTests = totalTests - successfulTests;
    
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedTests}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successfulTests / totalTests) * 100).toFixed(1)}%`);
    
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    this.results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`\n${status} ${result.scenario}`);
      
      if (!result.success && result.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
      
      if (result.steps) {
        const successfulSteps = result.steps.filter(s => s.success).length;
        const totalSteps = result.steps.length;
        const stepSuccessRate = ((successfulSteps / totalSteps) * 100).toFixed(1);
        console.log(`   üìä –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successfulSteps}/${totalSteps} (${stepSuccessRate}%)`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏
        const failedSteps = result.steps.filter(s => !s.success);
        if (failedSteps.length > 0) {
          console.log(`   ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏:`);
          failedSteps.forEach(step => {
            console.log(`      - –®–∞–≥ ${step.step}: ${step.description}`);
            if (step.error) {
              console.log(`        –û—à–∏–±–∫–∞: ${step.error}`);
            }
          });
        }
      }
      
      if (result.performance) {
        console.log(`   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${result.performance.duration}ms (${result.performance.averageStepTime.toFixed(0)}ms/—à–∞–≥)`);
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceTests = this.results.filter(r => r.performance);
    if (performanceTests.length > 0) {
      console.log('\n‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
      const avgDuration = performanceTests.reduce((sum, r) => sum + r.performance.duration, 0) / performanceTests.length;
      const avgStepTime = performanceTests.reduce((sum, r) => sum + r.performance.averageStepTime, 0) / performanceTests.length;
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${avgDuration.toFixed(0)}ms`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥: ${avgStepTime.toFixed(0)}ms`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    const allSteps = this.results.flatMap(r => r.steps || []);
    const failedSteps = allSteps.filter(s => !s.success);
    
    if (failedSteps.length > 0) {
      console.log('   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:');
      const commonIssues = {};
      failedSteps.forEach(step => {
        const issue = step.description;
        commonIssues[issue] = (commonIssues[issue] || 0) + 1;
      });
      
      Object.entries(commonIssues)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3)
        .forEach(([issue, count]) => {
          console.log(`      - ${issue}: ${count} —Ä–∞–∑`);
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests,
        successfulTests,
        failedTests,
        successRate: (successfulTests / totalTests) * 100
      },
      results: this.results,
      performance: performanceTests.length > 0 ? {
        averageDuration: performanceTests.reduce((sum, r) => sum + r.performance.duration, 0) / performanceTests.length,
        averageStepTime: performanceTests.reduce((sum, r) => sum + r.performance.averageStepTime, 0) / performanceTests.length
      } : null,
      recommendations: {
        commonIssues: failedSteps.length > 0 ? Object.entries(
          failedSteps.reduce((acc, step) => {
            const issue = step.description;
            acc[issue] = (acc[issue] || 0) + 1;
            return acc;
          }, {})
        ).sort(([,a], [,b]) => b - a).slice(0, 3) : []
      }
    };
    
    const fs = require('fs');
    const reportPath = './test_logs/final_multiuser_report.json';
    
    if (!fs.existsSync('./test_logs')) {
      fs.mkdirSync('./test_logs', { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
    const htmlReport = this.generateHTMLReport(report);
    const htmlPath = './test_logs/final_multiuser_report.html';
    fs.writeFileSync(htmlPath, htmlReport);
    console.log(`üåê HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${htmlPath}`);
  }

  generateHTMLReport(report) {
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .summary { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .test-result { margin: 15px 0; padding: 15px; border-radius: 5px; }
        .success { background: #d4edda; border-left: 5px solid #28a745; }
        .failure { background: #f8d7da; border-left: 5px solid #dc3545; }
        .performance { background: #d1ecf1; border-left: 5px solid #17a2b8; }
        .step { margin: 5px 0; padding: 5px; }
        .step.success { background: #d4edda; }
        .step.failure { background: #f8d7da; }
        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .timestamp { color: #666; text-align: center; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä –û—Ç—á–µ—Ç –æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</h1>
        <p class="timestamp">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(report.timestamp).toLocaleString('ru-RU')}</p>
        
        <div class="summary">
            <h2>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <p><strong>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</strong> ${report.summary.totalTests}</p>
            <p><strong>–£—Å–ø–µ—à–Ω—ã—Ö:</strong> ${report.summary.successfulTests}</p>
            <p><strong>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</strong> ${report.summary.failedTests}</p>
            <p><strong>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:</strong> ${report.summary.successRate.toFixed(1)}%</p>
        </div>
        
        <h2>üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
        ${report.results.map(result => `
            <div class="test-result ${result.success ? 'success' : 'failure'}">
                <h3>${result.success ? '‚úÖ' : '‚ùå'} ${result.scenario}</h3>
                ${result.steps ? `
                    <p><strong>–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong> ${result.steps.filter(s => s.success).length}/${result.steps.length}</p>
                    ${result.steps.map(step => `
                        <div class="step ${step.success ? 'success' : 'failure'}">
                            <strong>–®–∞–≥ ${step.step}:</strong> ${step.description}
                            ${!step.success && step.error ? `<br><em>–û—à–∏–±–∫–∞: ${step.error}</em>` : ''}
                        </div>
                    `).join('')}
                ` : ''}
                ${result.performance ? `
                    <div class="performance">
                        <p><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${result.performance.duration}ms (${result.performance.averageStepTime.toFixed(0)}ms/—à–∞–≥)</p>
                    </div>
                ` : ''}
            </div>
        `).join('')}
        
        ${report.recommendations.commonIssues.length > 0 ? `
            <div class="recommendations">
                <h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
                <h3>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:</h3>
                <ul>
                    ${report.recommendations.commonIssues.map(([issue, count]) => `
                        <li><strong>${issue}:</strong> ${count} —Ä–∞–∑</li>
                    `).join('')}
                </ul>
            </div>
        ` : ''}
        
        ${report.performance ? `
            <div class="performance">
                <h2>‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h2>
                <p><strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${report.performance.averageDuration.toFixed(0)}ms</p>
                <p><strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —à–∞–≥:</strong> ${report.performance.averageStepTime.toFixed(0)}ms</p>
            </div>
        ` : ''}
    </div>
</body>
</html>
    `;
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.bot) {
      await this.bot.close();
      console.log('‚úÖ –ë–æ—Ç –æ—á–∏—â–µ–Ω');
    }
  }

  async runAllTests() {
    try {
      await this.initialize();
      
      console.log('\nüéØ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–´–• –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –¢–ï–°–¢–û–í');
      console.log('=' .repeat(60));
      
      // –¢–µ—Å—Ç 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
      await this.runComprehensiveTest();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –¢–µ—Å—Ç 2: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      await this.runInteractionTest();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –¢–µ—Å—Ç 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      await this.runRealTimeSyncTest();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      await this.runPerformanceTest();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      this.generateFinalReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
      await this.cleanup();
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
async function checkServers() {
  const http = require('http');
  
  const checkServer = (port, name) => {
    return new Promise((resolve) => {
      const req = http.request(`http://localhost:${port}`, { method: 'HEAD' }, (res) => {
        console.log(`‚úÖ ${name} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(true);
      });
      
      req.on('error', () => {
        console.log(`‚ùå ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.setTimeout(3000, () => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${name} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.end();
    });
  };
  
  const backendOk = await checkServer(8000, 'Backend');
  const frontendOk = await checkServer(3000, 'Frontend');
  
  if (!backendOk || !frontendOk) {
    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.');
    console.log('Backend: npm start (–ø–æ—Ä—Ç 8000)');
    console.log('Frontend: npm start (–ø–æ—Ä—Ç 3000)');
    return false;
  }
  
  return true;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new FinalMultiUserTester();
  await tester.runAllTests();
}

// –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä–≤–µ—Ä–æ–≤
if (require.main === module) {
  checkServers().then(serversOk => {
    if (serversOk) {
      console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
      main().catch(console.error);
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤');
      process.exit(1);
    }
  });
}

module.exports = { FinalMultiUserTester }; 