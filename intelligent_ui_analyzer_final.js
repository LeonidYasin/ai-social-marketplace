const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');

class IntelligentUIAnalyzerFinal {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.userProfiles = [];
        this.stepCounter = 0;
        this.userNames = [];
    }

    async init(browserCount = 2) {
        console.log(`üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ UI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for (let i = 0; i < browserCount; i++) {
            const profileDir = `./intelligent-final-user-data-${i}`;
            
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
            }
            
            this.userProfiles.push(profileDir);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: [
                    '--start-maximized', 
                    '--no-sandbox',
                    `--user-data-dir=${this.userProfiles[i]}`,
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            });
            
            const page = await browser.newPage();
            
            await page.setExtraHTTPHeaders({
                'X-User-Agent': `IntelligentFinal-${i + 1}`,
                'X-User-ID': `user-${i + 1}`
            });
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º: ${this.userProfiles[i]}`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/intelligent_final_step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async analyzeFourPanelLayout(pageIndex) {
        console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ê–Ω–∞–ª–∏–∑ 4-–ø–∞–Ω–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
        
        try {
            const layoutInfo = await this.pages[pageIndex].evaluate(() => {
                const info = {
                    viewport: {
                        width: window.innerWidth,
                        height: window.innerHeight
                    },
                    panels: {
                        top: null,      // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (header, app bar)
                        left: null,     // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–Ω–∞–≤–∏–≥–∞—Ü–∏—è, –º–µ–Ω—é)
                        right: null,    // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —á–∞—Ç—ã)
                        center: null    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç)
                    },
                    profileButton: null,
                    rightPanelToggle: null
                };

                // –ê–ù–ê–õ–ò–ó –í–ï–†–•–ù–ï–ô –ü–ê–ù–ï–õ–ò (TOP PANEL)
                const topElements = document.querySelectorAll('header, [class*="header"], [class*="app-bar"], [class*="top"], [class*="navbar"]');
                for (const el of topElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && rect.y < window.innerHeight * 0.2) {
                        info.panels.top = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            elements: []
                        };
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
                        const topChildren = el.querySelectorAll('button, [role="button"], .btn, [class*="button"], [class*="avatar"], [class*="profile"]');
                        topChildren.forEach(child => {
                            const childRect = child.getBoundingClientRect();
                            if (childRect.width > 0 && childRect.height > 0) {
                                const elementInfo = {
                                    tagName: child.tagName,
                                    className: typeof child.className === 'string' ? child.className : '',
                                    text: child.textContent?.trim() || '',
                                    ariaLabel: child.getAttribute('aria-label') || '',
                                    position: { x: childRect.x, y: childRect.y, width: childRect.width, height: childRect.height }
                                };
                                
                                info.panels.top.elements.push(elementInfo);
                                
                                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
                                if (child.className?.includes('avatar') || 
                                    child.className?.includes('profile') || 
                                    child.getAttribute('aria-label')?.includes('–ø—Ä–æ—Ñ–∏–ª—å') ||
                                    child.getAttribute('aria-label')?.includes('profile') ||
                                    child.textContent?.includes('(–í—ã)') ||
                                    child.textContent?.includes('(You)')) {
                                    info.profileButton = elementInfo;
                                }
                            }
                        });
                        break;
                    }
                }

                // –ê–ù–ê–õ–ò–ó –õ–ï–í–û–ô –ü–ê–ù–ï–õ–ò (LEFT PANEL)
                const leftElements = document.querySelectorAll('[class*="sidebar"], [class*="nav"], [class*="menu"], [class*="left"]');
                for (const el of leftElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && rect.x < window.innerWidth * 0.3) {
                        info.panels.left = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            elements: []
                        };
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                        const leftChildren = el.querySelectorAll('button, [role="button"], .btn, [class*="button"], [class*="nav-item"]');
                        leftChildren.forEach(child => {
                            const childRect = child.getBoundingClientRect();
                            if (childRect.width > 0 && childRect.height > 0) {
                                info.panels.left.elements.push({
                                    tagName: child.tagName,
                                    className: typeof child.className === 'string' ? child.className : '',
                                    text: child.textContent?.trim() || '',
                                    ariaLabel: child.getAttribute('aria-label') || '',
                                    position: { x: childRect.x, y: childRect.y, width: childRect.width, height: childRect.height }
                                });
                            }
                        });
                        break;
                    }
                }

                // –ê–ù–ê–õ–ò–ó –ü–†–ê–í–û–ô –ü–ê–ù–ï–õ–ò (RIGHT PANEL) - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
                const rightElements = document.querySelectorAll('[class*="sidebar"], [class*="panel"], [class*="users"], [class*="right"], [class*="chat"]');
                for (const el of rightElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && rect.x > window.innerWidth * 0.6) {
                        info.panels.right = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            users: []
                        };
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
                        const userElements = el.querySelectorAll('[class*="user"], [class*="profile"], [data-testid*="user"], [class*="avatar"], [class*="list-item"], [class*="chat-item"]');
                        userElements.forEach(user => {
                            const userRect = user.getBoundingClientRect();
                            if (userRect.width > 0 && userRect.height > 0) {
                                info.panels.right.users.push({
                                    tagName: user.tagName,
                                    className: typeof user.className === 'string' ? user.className : '',
                                    text: user.textContent?.trim() || '',
                                    ariaLabel: user.getAttribute('aria-label') || '',
                                    dataTestId: user.getAttribute('data-testid') || '',
                                    position: { x: userRect.x, y: userRect.y, width: userRect.width, height: userRect.height },
                                    isCurrentUser: user.textContent?.includes('(–í—ã)') || user.textContent?.includes('(You)') || false
                                });
                            }
                        });
                        break;
                    }
                }

                // –ê–ù–ê–õ–ò–ó –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ô –ü–ê–ù–ï–õ–ò (CENTER PANEL) - –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢
                const centerElements = document.querySelectorAll('main, [class*="main"], [class*="content"], [class*="feed"], [class*="center"]');
                for (const el of centerElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && 
                        rect.x > window.innerWidth * 0.2 && rect.x < window.innerWidth * 0.6) {
                        info.panels.center = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            elements: []
                        };
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                        const centerChildren = el.querySelectorAll('[class*="post"], [class*="card"], [class*="feed"], [class*="content"]');
                        centerChildren.forEach(child => {
                            const childRect = child.getBoundingClientRect();
                            if (childRect.width > 0 && childRect.height > 0) {
                                info.panels.center.elements.push({
                                    tagName: child.tagName,
                                    className: typeof child.className === 'string' ? child.className : '',
                                    text: child.textContent?.substring(0, 100),
                                    position: { x: childRect.x, y: childRect.y, width: childRect.width, height: childRect.height }
                                });
                            }
                        });
                        break;
                    }
                }

                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
                const toggleButtons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                for (const btn of toggleButtons) {
                    const text = btn.textContent?.toLowerCase() || '';
                    const aria = btn.getAttribute('aria-label')?.toLowerCase() || '';
                    if (text.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') || text.includes('users') || 
                        aria.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') || aria.includes('users') ||
                        text.includes('—á–∞—Ç') || text.includes('chat') ||
                        aria.includes('—á–∞—Ç') || aria.includes('chat')) {
                        const rect = btn.getBoundingClientRect();
                        if (rect.width > 0 && rect.height > 0) {
                            info.rightPanelToggle = {
                                tagName: btn.tagName,
                                className: typeof btn.className === 'string' ? btn.className : '',
                                text: btn.textContent?.trim() || '',
                                ariaLabel: btn.getAttribute('aria-label') || '',
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            };
                            break;
                        }
                    }
                }

                return info;
            });

            console.log(`üß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ê–Ω–∞–ª–∏–∑ 4-–ø–∞–Ω–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω`);
            console.log(`   - –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: ${layoutInfo.panels.top ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: ${layoutInfo.panels.left ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: ${layoutInfo.panels.right ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å: ${layoutInfo.panels.center ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${layoutInfo.profileButton ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${layoutInfo.rightPanelToggle ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: ${layoutInfo.panels.right?.users.length || 0}`);

            return layoutInfo;

        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ 4-–ø–∞–Ω–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`, error.message);
            return null;
        }
    }

    async getUserNameFromProfile(pageIndex) {
        console.log(`üë§ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å`);
        
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const layoutInfo = await this.analyzeFourPanelLayout(pageIndex);
            
            if (!layoutInfo.profileButton) {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return null;
            }
            
            console.log(`üéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è "${layoutInfo.profileButton.text}"`);
            
            // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
            const clickX = layoutInfo.profileButton.position.x + layoutInfo.profileButton.position.width / 2;
            const clickY = layoutInfo.profileButton.position.y + layoutInfo.profileButton.position.height / 2;
            console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é (${clickX}, ${clickY})`);
            await this.pages[pageIndex].mouse.click(clickX, clickY);
            
            // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.takeScreenshot(pageIndex, 'profile_opened');
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã–≤—à–∏–π—Å—è –ø—Ä–æ—Ñ–∏–ª—å
            const profileInfo = await this.pages[pageIndex].evaluate(() => {
                const profileElements = document.querySelectorAll('[class*="profile"], [class*="user-info"], [class*="modal"], [class*="dialog"], [class*="drawer"]');
                const userInfo = [];
                
                profileElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        userInfo.push({
                            tagName: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.trim() || '',
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });
                
                return userInfo;
            });
            
            console.log(`üìã –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–æ ${profileInfo.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è`);
            
            // –ò—â–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            let userName = null;
            for (const element of profileInfo) {
                const text = element.text.toLowerCase();
                if (text.includes('–≥–æ—Å—Ç—å') || text.includes('guest') || text.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || text.includes('user')) {
                    // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    let cleanName = element.text.replace(/[–ì–¢]/g, '').replace(/\(–í—ã\)/g, '').trim();
                    if (cleanName && cleanName.length > 2) {
                        userName = cleanName;
                        break;
                    }
                }
            }
            
            if (userName) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: "${userName}"`);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–∫–ª–∏–∫–∞–µ–º –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è)
                await this.pages[pageIndex].keyboard.press('Escape');
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                return userName;
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ`);
                console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ—Ñ–∏–ª—è:`);
                profileInfo.forEach((element, index) => {
                    console.log(`   ${index + 1}. "${element.text}"`);
                });
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                await this.pages[pageIndex].keyboard.press('Escape');
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                return null;
            }
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
            return null;
        }
    }

    async ensureRightPanelVisible(pageIndex) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
        
        try {
            const layoutInfo = await this.analyzeFourPanelLayout(pageIndex);
            
            if (layoutInfo.panels.right) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —É–∂–µ –≤–∏–¥–Ω–∞`);
                return true;
            }
            
            // –ï—Å–ª–∏ –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –≤–∏–¥–Ω–∞, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –µ—ë –æ—Ç–∫—Ä—ã—Ç–∏—è
            if (layoutInfo.rightPanelToggle) {
                console.log(`üîÑ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å`);
                
                const clickX = layoutInfo.rightPanelToggle.position.x + layoutInfo.rightPanelToggle.position.width / 2;
                const clickY = layoutInfo.rightPanelToggle.position.y + layoutInfo.rightPanelToggle.position.height / 2;
                console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (${clickX}, ${clickY})`);
                await this.pages[pageIndex].mouse.click(clickX, clickY);
                
                // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
                const newLayoutInfo = await this.analyzeFourPanelLayout(pageIndex);
                if (newLayoutInfo.panels.right) {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞`);
                    return true;
                } else {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å`);
                    return false;
                }
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏:`, error.message);
            return false;
        }
    }

    async checkUserVisibilityInRightPanel(pageIndex, targetUserName) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${targetUserName}" –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
        
        try {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –≤–∏–¥–Ω–∞
            const panelVisible = await this.ensureRightPanelVisible(pageIndex);
            if (!panelVisible) {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
                return { visible: false, reason: 'right_panel_not_available' };
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
            const layoutInfo = await this.analyzeFourPanelLayout(pageIndex);
            
            if (!layoutInfo.panels.right) {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è`);
                return { visible: false, reason: 'right_panel_not_found' };
            }
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
            const targetUser = layoutInfo.panels.right.users.find(user => {
                const userText = user.text.toLowerCase();
                const targetText = targetUserName.toLowerCase();
                return userText.includes(targetText) || targetText.includes(userText);
            });
            
            if (targetUser) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${targetUserName}" –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
                console.log(`   - –¢–µ–∫—Å—Ç: "${targetUser.text}"`);
                console.log(`   - –ö–ª–∞—Å—Å: ${targetUser.className}`);
                console.log(`   - –ü–æ–∑–∏—Ü–∏—è: x=${targetUser.position.x}, y=${targetUser.position.y}`);
                return { 
                    visible: true, 
                    user: targetUser,
                    matchType: 'exact'
                };
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${targetUserName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
                console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏:`);
                layoutInfo.panels.right.users.forEach((user, index) => {
                    console.log(`   ${index + 1}. "${user.text}"`);
                });
                return { visible: false, reason: 'user_not_found', availableUsers: layoutInfo.panels.right.users };
            }
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
            return { visible: false, reason: 'error', error: error.message };
        }
    }

    async intelligentGuestLogin(pageIndex) {
        console.log(`\nüß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const initialLayout = await this.analyzeFourPanelLayout(pageIndex);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ—à–µ–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (initialLayout.panels.right && initialLayout.panels.right.users.length > 0) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
            return { success: true, alreadyLoggedIn: true };
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        const guestButtons = await this.pages[pageIndex].evaluate(() => {
            const candidates = [];
            const elements = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"], [data-testid], [aria-label]'));
            for (const el of elements) {
                const text = el.textContent?.toLowerCase() || '';
                const aria = el.getAttribute('aria-label')?.toLowerCase() || '';
                const testid = el.getAttribute('data-testid')?.toLowerCase() || '';
                const role = el.getAttribute('role')?.toLowerCase() || '';
                let cls = '';
                if (typeof el.className === 'string') {
                    cls = el.className.toLowerCase();
                } else if (el.className && typeof el.className.baseVal === 'string') {
                    cls = el.className.baseVal.toLowerCase();
                }
                if (
                    (text.includes('–≥–æ—Å—Ç—å') && text.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                    (aria.includes('–≥–æ—Å—Ç—å') && aria.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                    (text.includes('guest') && text.includes('continue')) ||
                    (aria.includes('guest') && aria.includes('continue')) ||
                    (testid.includes('guest')) ||
                    (role === 'button' && (text.includes('–≥–æ—Å—Ç—å') || aria.includes('–≥–æ—Å—Ç—å')))
                ) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        candidates.push({
                            text,
                            aria,
                            testid,
                            role,
                            cls,
                            x: rect.x,
                            y: rect.y,
                            width: rect.width,
                            height: rect.height
                        });
                    }
                }
            }
            return candidates;
        });
        
        if (guestButtons.length === 0) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            return { success: false, reason: 'no_guest_buttons_found' };
        }
        
        const btn = guestButtons[0];
        const clickX = btn.x + btn.width / 2;
        const clickY = btn.y + btn.height / 2;
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${clickX}, ${clickY}) –ø–æ –∫–Ω–æ–ø–∫–µ "${btn.text}"`);
        await this.pages[pageIndex].mouse.click(clickX, clickY);
        
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞
        const afterLayout = await this.analyzeFourPanelLayout(pageIndex);
        if (afterLayout.panels.right && afterLayout.panels.right.users.length > 0) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return { success: true, loginMethod: 'guest' };
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            return { success: false, reason: 'login_failed' };
        }
    }

    async runIntelligentTestFinal() {
        try {
            console.log('üß† –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
            console.log('\nüìã –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            const loginResults = [];
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const loginResult = await this.intelligentGuestLogin(i);
                loginResults.push(loginResult);
                
                if (!loginResult.success) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return false;
                }
            }
            
            // –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
            console.log('\nüìã –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å');
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const userName = await this.getUserNameFromProfile(i);
                this.userNames[i] = userName;
                
                if (!userName) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
                    return false;
                }
            }
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤—ã—Ö –ø–∞–Ω–µ–ª—è—Ö
            if (this.pages.length > 1) {
                console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤—ã—Ö –ø–∞–Ω–µ–ª—è—Ö');
                
                for (let i = 0; i < this.pages.length; i++) {
                    for (let j = 0; j < this.pages.length; j++) {
                        if (i !== j) {
                            console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${this.userNames[j]}" –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                            
                            const visibilityResult = await this.checkUserVisibilityInRightPanel(i, this.userNames[j]);
                            
                            if (visibilityResult.visible) {
                                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${this.userNames[j]}" –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                            } else {
                                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –ù–ï –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${this.userNames[j]}" –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                                console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${visibilityResult.reason}`);
                            }
                        }
                    }
                }
            }
            
            console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
            console.log(`   - –ë—Ä–∞—É–∑–µ—Ä 1: "${this.userNames[0]}"`);
            console.log(`   - –ë—Ä–∞—É–∑–µ—Ä 2: "${this.userNames[1]}"`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        for (const profileDir of this.userProfiles) {
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
                console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: ${profileDir}`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
async function main() {
    const analyzer = new IntelligentUIAnalyzerFinal();
    
    try {
        await analyzer.init(2); // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        const success = await analyzer.runIntelligentTestFinal();
        
        if (success) {
            console.log('\n‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await analyzer.close();
    }
}

main().catch(console.error); 