const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function analyzeScreenshots() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    
    const screenshots = [
      'final_01_initial.png',
      'final_02_after_login_click.png'
    ];
    
    for (const screenshot of screenshots) {
      const filePath = path.join('./test_screenshots', screenshot);
      
      if (fs.existsSync(filePath)) {
        console.log(`\nüì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${screenshot}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const imageBuffer = fs.readFileSync(filePath);
        const base64Image = imageBuffer.toString('base64');
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await page.setContent(`
          <html>
            <body>
              <img src="data:image/png;base64,${base64Image}" style="max-width: 100%; height: auto;" />
              <div id="analysis"></div>
            </body>
          </html>
        `);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        const imageInfo = await page.evaluate(() => {
          const img = document.querySelector('img');
          return {
            width: img.naturalWidth,
            height: img.naturalHeight,
            src: img.src.substring(0, 100) + '...'
          };
        });
        
        console.log(`   –†–∞–∑–º–µ—Ä: ${imageInfo.width}x${imageInfo.height}`);
        console.log(`   –§–∞–π–ª: ${filePath}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const stats = fs.statSync(filePath);
        console.log(`   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(1)} KB`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        if (screenshot === 'final_01_initial.png') {
          console.log('   üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
          console.log('   üîç –û–∂–∏–¥–∞–µ–º: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
        } else if (screenshot === 'final_02_after_login_click.png') {
          console.log('   üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          console.log('   üîç –û–∂–∏–¥–∞–µ–º: –î–∏–∞–ª–æ–≥ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞');
        }
        
      } else {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${screenshot}`);
      }
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
    console.log('2. –°—Ä–∞–≤–Ω–∏—Ç–µ final_01_initial.png –∏ final_02_after_login_click.png');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
    console.log('4. –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ø–æ—è–≤–∏–ª—Å—è, –∏—â–∏—Ç–µ –∫–Ω–æ–ø–∫—É Email');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

analyzeScreenshots().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 