const axios = require('axios');

const API_BASE = 'http://localhost:8000/api';

async function testGuestLogin() {
  console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞...\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const password = Math.random().toString(36).slice(-8);
    const guestData = {
      username: `guest_test_${Date.now()}`,
      email: `guest_test_${Date.now()}@example.com`,
      password: password,
      first_name: '–ì–æ—Å—Ç—å',
      last_name: '–¢–µ—Å—Ç'
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ:', guestData);
    
    const registerResponse = await axios.post(`${API_BASE}/users/register`, guestData);
    
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', registerResponse.status);
    console.log('üìÑ –û—Ç–≤–µ—Ç:', registerResponse.data);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\n2Ô∏è‚É£ –í—Ö–æ–¥–∏–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const loginData = {
      email: guestData.email,
      password: password
    };
    
    const loginResponse = await axios.post(`${API_BASE}/users/login`, loginData);
    
    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', loginResponse.status);
    console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!loginResponse.data.token);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.status || error.code);
    console.error('üìÑ –û—Ç–≤–µ—Ç:', error.response?.data || error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGuestLogin().then(success => {
  console.log(`\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
  process.exit(success ? 0 : 1);
}); 