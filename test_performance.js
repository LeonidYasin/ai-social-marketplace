// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –¥–ª—è Node.js 18+ –∏–ª–∏ node-fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
let fetch;
try {
  fetch = require('node-fetch');
} catch (error) {
  // –í Node.js 18+ fetch –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
  fetch = global.fetch;
}
const fs = require('fs');
const path = require('path');

const API_BASE = 'http://localhost:8000/api';
const LOG_DIR = './test_logs';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

class PerformanceTester {
  constructor() {
    this.logs = [];
    this.results = {
      requests: [],
      errors: [],
      responseTimes: [],
      throughput: []
    };
  }

  log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type}] ${message}`;
    console.log(logEntry);
    this.logs.push(logEntry);
  }

  error(message) {
    this.log(message, 'ERROR');
  }

  success(message) {
    this.log(message, 'SUCCESS');
  }

  warning(message) {
    this.log(message, 'WARNING');
  }

  saveLogs(filename) {
    const filepath = path.join(LOG_DIR, filename);
    fs.writeFileSync(filepath, this.logs.join('\n'));
  }

  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  async measureRequest(url, options = {}) {
    const startTime = Date.now();
    
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });

      const endTime = Date.now();
      const responseTime = endTime - startTime;

      const data = await response.json().catch(() => ({}));
      
      return {
        url,
        method: options.method || 'GET',
        status: response.status,
        responseTime,
        success: response.ok,
        data,
        error: null
      };
    } catch (error) {
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      return {
        url,
        method: options.method || 'GET',
        status: 0,
        responseTime,
        success: false,
        data: null,
        error: error.message
      };
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  async loadTest(endpoint, method = 'GET', options = {}, concurrency = 10, duration = 30000) {
    this.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${method} ${endpoint}`);
    this.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${concurrency} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, ${duration}ms –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å`);
    
    const url = `${API_BASE}${endpoint}`;
    const startTime = Date.now();
    const requests = [];
    const results = [];

    // –°–æ–∑–¥–∞–µ–º –ø—É–ª –∑–∞–ø—Ä–æ—Å–æ–≤
    const makeRequest = async () => {
      while (Date.now() - startTime < duration) {
        const result = await this.measureRequest(url, { method, ...options });
        results.push(result);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const promises = Array(concurrency).fill().map(() => makeRequest());
    await Promise.all(promises);

    const endTime = Date.now();
    const totalDuration = endTime - startTime;
    const totalRequests = results.length;

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successfulRequests = results.filter(r => r.success);
    const failedRequests = results.filter(r => !r.success);
    const responseTimes = results.map(r => r.responseTime);
    
    const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    const minResponseTime = Math.min(...responseTimes);
    const maxResponseTime = Math.max(...responseTimes);
    const throughput = (totalRequests / totalDuration) * 1000; // –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

    this.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${endpoint}:`);
    this.log(`   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${totalRequests}`);
    this.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests.length}`);
    this.log(`   - –û—à–∏–±–æ–∫: ${failedRequests.length}`);
    this.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);
    this.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${minResponseTime}ms`);
    this.log(`   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxResponseTime}ms`);
    this.log(`   - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toFixed(2)} req/s`);

    return {
      endpoint,
      totalRequests,
      successfulRequests: successfulRequests.length,
      failedRequests: failedRequests.length,
      avgResponseTime,
      minResponseTime,
      maxResponseTime,
      throughput,
      results
    };
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
  async stressTest(endpoint, method = 'GET', options = {}, maxConcurrency = 50) {
    this.log(`üî• –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${method} ${endpoint}`);
    
    const results = [];
    const concurrencyLevels = [1, 5, 10, 20, 30, 40, 50].filter(c => c <= maxConcurrency);

    for (const concurrency of concurrencyLevels) {
      this.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ${concurrency} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...`);
      
      const result = await this.loadTest(endpoint, method, options, concurrency, 10000);
      results.push({
        concurrency,
        ...result
      });

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.log(`üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${endpoint}:`);
    results.forEach(r => {
      this.log(`   ${r.concurrency} –∑–∞–ø—Ä–æ—Å–æ–≤: ${r.avgResponseTime.toFixed(2)}ms, ${r.throughput.toFixed(2)} req/s, ${r.failedRequests} –æ—à–∏–±–æ–∫`);
    });

    return results;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  async stabilityTest(endpoint, method = 'GET', options = {}, duration = 60000) {
    this.log(`‚è∞ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: ${method} ${endpoint} (${duration/1000} —Å–µ–∫—É–Ω–¥)`);
    
    const startTime = Date.now();
    const results = [];
    let requestCount = 0;

    while (Date.now() - startTime < duration) {
      const result = await this.measureRequest(`${API_BASE}${endpoint}`, { method, ...options });
      results.push(result);
      requestCount++;

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      if (requestCount % 10 === 0) {
        const elapsed = Date.now() - startTime;
        this.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${requestCount} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${(elapsed/1000).toFixed(1)}s`);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    const successfulRequests = results.filter(r => r.success);
    const failedRequests = results.filter(r => !r.success);
    const responseTimes = results.map(r => r.responseTime);
    
    const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    const throughput = (requestCount / (duration / 1000));

    this.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ${endpoint}:`);
    this.log(`   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${requestCount}`);
    this.log(`   - –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests.length}`);
    this.log(`   - –û—à–∏–±–æ–∫: ${failedRequests.length}`);
    this.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime.toFixed(2)}ms`);
    this.log(`   - –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput.toFixed(2)} req/s`);

    return {
      endpoint,
      totalRequests: requestCount,
      successfulRequests: successfulRequests.length,
      failedRequests: failedRequests.length,
      avgResponseTime,
      throughput,
      results
    };
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  async testAllEndpoints() {
    this.log('üåê –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');

    const endpoints = [
      { path: '/health', method: 'GET', name: 'Health Check' },
      { path: '/users', method: 'GET', name: 'Get Users', auth: true },
      { path: '/posts', method: 'GET', name: 'Get Posts' },
      { path: '/posts', method: 'POST', name: 'Create Post', auth: true, body: { content: 'Test post', privacy: 'public' } },
      { path: '/messages', method: 'GET', name: 'Get Messages', auth: true }
    ];

    const results = {};

    for (const endpoint of endpoints) {
      this.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint.name} (${endpoint.method} ${endpoint.path})`);
      
      const options = {};
      if (endpoint.auth) {
        // –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        this.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${endpoint.name} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è`);
        continue;
      }
      
      if (endpoint.body) {
        options.body = JSON.stringify(endpoint.body);
      }

      // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const perfResult = await this.loadTest(endpoint.path, endpoint.method, options, 5, 5000);
      results[endpoint.name] = perfResult;
    }

    return results;
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async testDatabasePerformance() {
    this.log('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    const results = {};

    // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    this.log('üìñ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const readTest = await this.loadTest('/posts?page=1&limit=100', 'GET', {}, 10, 15000);
    results.readPerformance = readTest;

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    this.log('‚úçÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    const createTest = await this.loadTest('/posts', 'POST', {
      body: JSON.stringify({
        content: 'Performance test post',
        privacy: 'public',
        section: 'general'
      })
    }, 5, 10000);
    results.createPerformance = createTest;

    return results;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport(allResults) {
    this.log('\nüìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
    
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests: Object.keys(allResults).length,
        totalRequests: 0,
        totalErrors: 0,
        avgResponseTime: 0
      },
      details: allResults,
      recommendations: []
    };

    let totalRequests = 0;
    let totalErrors = 0;
    let totalResponseTime = 0;
    let testCount = 0;

    Object.values(allResults).forEach(result => {
      if (result.totalRequests) {
        totalRequests += result.totalRequests;
        totalErrors += result.failedRequests || 0;
        totalResponseTime += result.avgResponseTime || 0;
        testCount++;
      }
    });

    report.summary.totalRequests = totalRequests;
    report.summary.totalErrors = totalErrors;
    report.summary.avgResponseTime = testCount > 0 ? totalResponseTime / testCount : 0;

    // –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.summary.avgResponseTime > 1000) {
      report.recommendations.push('–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î');
    }

    if (report.summary.totalErrors > totalRequests * 0.1) {
      report.recommendations.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
    }

    const reportFile = path.join(LOG_DIR, 'performance_report.json');
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    
    this.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportFile}`);
    
    return report;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runPerformanceTests() {
    this.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');

    const allResults = {};

    try {
      // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      this.log('=== –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–û–í ===');
      const endpointResults = await this.testAllEndpoints();
      allResults.endpoints = endpointResults;

      // 2. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      this.log('\n=== –≠–¢–ê–ü 2: –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===');
      const loadTestResults = await this.loadTest('/posts', 'GET', {}, 20, 30000);
      allResults.loadTest = loadTestResults;

      // 3. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      this.log('\n=== –≠–¢–ê–ü 3: –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===');
      const stressTestResults = await this.stressTest('/posts', 'GET', {}, 30);
      allResults.stressTest = stressTestResults;

      // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      this.log('\n=== –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò ===');
      const stabilityResults = await this.stabilityTest('/posts', 'GET', {}, 30000);
      allResults.stabilityTest = stabilityResults;

      // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
      this.log('\n=== –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ===');
      const dbResults = await this.testDatabasePerformance();
      allResults.database = dbResults;

      // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.log('\n=== –≠–¢–ê–ü 6: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===');
      const report = this.generateReport(allResults);

      this.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      this.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      this.log(`   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${report.summary.totalRequests}`);
      this.log(`   - –û—à–∏–±–æ–∫: ${report.summary.totalErrors}`);
      this.log(`   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${report.summary.avgResponseTime.toFixed(2)}ms`);

      if (report.recommendations.length > 0) {
        this.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
        report.recommendations.forEach(rec => this.log(`   - ${rec}`));
      }

    } catch (error) {
      this.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
    this.saveLogs('performance_test.log');
    
    return allResults;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new PerformanceTester();
  
  try {
    await tester.runPerformanceTests();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = PerformanceTester; 