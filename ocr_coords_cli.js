const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

function getTextCoordinates(imagePath, searchText = '–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨') {
    return new Promise((resolve, reject) => {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TSV —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        const tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        const command = `${tesseractPath} "${imagePath}" output -l rus+eng tsv`;
        
        console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`);
        
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è tesseract:', error.message);
                console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH');
                reject(error);
                return;
            }
            
            if (stderr) {
                console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è tesseract:', stderr);
            }
            
            // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
            const outputFile = 'output.tsv';
            if (!fs.existsSync(outputFile)) {
                console.error('‚ùå –§–∞–π–ª output.tsv –Ω–µ –Ω–∞–π–¥–µ–Ω');
                reject(new Error('Output file not found'));
                return;
            }
            
            const content = fs.readFileSync(outputFile, 'utf8');
            const lines = content.trim().split('\n');
            console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
            
            if (lines.length < 2) {
                console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
                resolve([]);
                return;
            }
            
            const headers = lines[0].split('\t');
            console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.join(', ')}`);
            
            // –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä—è–¥
            let allText = '';
            for (let i = 1; i < lines.length; i++) {
                const values = lines[i].split('\t');
                if (values.length >= headers.length) {
                    const text = values[headers.indexOf('text')];
                    if (text && text.trim()) {
                        allText += text + ' ';
                    }
                }
            }
            console.log(`\nüìù –í–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ä—è–¥:\n${allText}\n`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ conf)
            console.log('\nüìã –í—Å–µ —Å–ª–æ–≤–∞ (–≤–∫–ª—é—á–∞—è conf<=0 –∏ –ø—É—Å—Ç—ã–µ):');
            for (let i = 1; i < lines.length; i++) {
                const values = lines[i].split('\t');
                if (values.length >= headers.length) {
                    const text = values[headers.indexOf('text')];
                    const conf = values[headers.indexOf('conf')];
                    const left = values[headers.indexOf('left')];
                    const top = values[headers.indexOf('top')];
                    const width = values[headers.indexOf('width')];
                    const height = values[headers.indexOf('height')];
                    console.log(`  "${text}" - x:${left}, y:${top}, w:${width}, h:${height}, conf:${conf}`);
                }
            }
            
            // –ü–æ–∏—Å–∫ –ø–æ conf > 0
            const allWords = [];
            for (let i = 1; i < lines.length; i++) {
                const values = lines[i].split('\t');
                if (values.length >= headers.length) {
                    const text = values[headers.indexOf('text')];
                    const conf = parseFloat(values[headers.indexOf('conf')]);
                    const left = parseInt(values[headers.indexOf('left')]);
                    const top = parseInt(values[headers.indexOf('top')]);
                    const width = parseInt(values[headers.indexOf('width')]);
                    const height = parseInt(values[headers.indexOf('height')]);
                    
                    if (text && text.trim() && conf > 0) {
                        allWords.push({ text, conf, left, top, width, height });
                    }
                }
            }
            
            console.log(`\nüìä –í—Å–µ–≥–æ —Å–ª–æ–≤ —Å conf > 0: ${allWords.length}`);
            
            // –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
            const found = [];
            for (const word of allWords) {
                if (word.text.toLowerCase().includes(searchText.toLowerCase())) {
                    found.push({
                        text: word.text,
                        confidence: word.conf,
                        x: word.left,
                        y: word.top,
                        width: word.width,
                        height: word.height,
                        bbox: [word.left, word.top, word.left + word.width, word.top + word.height]
                    });
                    
                    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ: "${word.text}"`);
                    console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${word.left}, y=${word.top}, w=${word.width}, h=${word.height}`);
                    console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${word.conf}%`);
                }
            }
            
            if (found.length === 0) {
                console.log(`\n‚ùå –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                
                // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                console.log('\nüîç –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:');
                const searchWords = searchText.toLowerCase().split(' ');
                const partialMatches = allWords.filter(word => 
                    searchWords.some(searchWord => 
                        word.text.toLowerCase().includes(searchWord) ||
                        searchWord.includes(word.text.toLowerCase())
                    )
                );
                
                if (partialMatches.length > 0) {
                    console.log('–ù–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:');
                    partialMatches.forEach(match => {
                        console.log(`  "${match.text}" - x:${match.left}, y:${match.top}, conf:${match.conf}%`);
                    });
                } else {
                    console.log('–ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }
            }
            
            resolve(found);
        });
    });
}

async function main() {
    const imagePath = process.argv[2] || 'test_screenshots/step2_simple_01_initial.png';
    const searchText = process.argv[3] || '–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨';
    
    console.log(`üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
    console.log(`üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç: "${searchText}"`);
    
    try {
        const coords = await getTextCoordinates(imagePath, searchText);
        console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${coords.length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

main(); 