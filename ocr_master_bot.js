const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class OCRMasterBot {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        this.testResults = [];
        this.errorSuggestions = {
            '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω': [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
                '–í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è - —É–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞'
            ],
            '—Ç–∞–π–º–∞—É—Ç': [
                '–£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                '–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø'
            ],
            '–∫–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω': [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
                '–í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ —ç–ª–µ–º–µ–Ω—Ç—É',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞'
            ],
            '–±—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç': [
                '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏',
                '–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞'
            ]
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir);
        }
    }

    async init(browserCount = 1) {
        console.log(`ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –±–æ—Ç–∞-–º–∞—Å—Ç–µ—Ä–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: ['--start-maximized', '--no-sandbox', `--user-data-dir=./user-data-${i}`]
            });
            
            const page = await browser.newPage();
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 0) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    async clickOnText(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò—â–µ–º —Ç–µ–∫—Å—Ç "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `search_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length === 0) {
            const error = `–¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`;
            await this.handleError(error, '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                searchText,
                screenshotPath,
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const target = coords[0];
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–æ "${target.text}" (conf: ${target.confidence}%)`);
        console.log(`üìç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${target.x}, y=${target.y}, —Ü–µ–Ω—Ç—Ä: (${target.centerX}, ${target.centerY})`);

        try {
            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
            await this.pages[pageIndex].mouse.click(target.centerX, target.centerY);
            console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            return true;
        } catch (error) {
            await this.handleError(`–ö–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${error.message}`, '–∫–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
                searchText,
                coordinates: { x: target.centerX, y: target.centerY },
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }
    }

    async verifyTextExists(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `verify_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length > 0) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–∞–π–¥–µ–Ω (${coords.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)`);
            return true;
        } else {
            const error = `–¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`;
            await this.handleError(error, '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                searchText,
                screenshotPath,
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }
    }

    async waitForText(pageIndex, searchText, timeout = 10000, description = '') {
        console.log(`‚è≥ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "${searchText}" ${description}`);
        
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const screenshotPath = await this.takeScreenshot(pageIndex, `wait_${searchText.replace(/\s+/g, '_')}`);
            const coords = await this.findTextCoordinates(screenshotPath, searchText);
            
            if (coords.length > 0) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –ø–æ—è–≤–∏–ª—Å—è —á–µ—Ä–µ–∑ ${Date.now() - startTime}ms`);
                return true;
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        const error = `–¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ ${timeout}ms`;
        await this.handleError(error, '—Ç–∞–π–º–∞—É—Ç', {
            searchText,
            timeout,
            browserIndex: pageIndex + 1,
            description
        });
        return false;
    }

    async handleError(errorMessage, errorType, context) {
        console.log('\n' + '='.repeat(60));
        console.log('‚ùå –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!');
        console.log('='.repeat(60));
        console.log(`üîç –û–ø–∏—Å–∞–Ω–∏–µ: ${errorMessage}`);
        console.log(`üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${JSON.stringify(context, null, 2)}`);
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –°–ü–û–°–û–ë–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
        const suggestions = this.errorSuggestions[errorType] || this.errorSuggestions['—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        suggestions.forEach((suggestion, index) => {
            console.log(`   ${index + 1}. ${suggestion}`);
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã');
        console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        console.log('   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        const errorInfo = {
            timestamp: new Date().toISOString(),
            error: errorMessage,
            type: errorType,
            context: context,
            suggestions: suggestions
        };
        
        const errorLogPath = './test_logs/error_log.json';
        if (!fs.existsSync('./test_logs')) {
            fs.mkdirSync('./test_logs', { recursive: true });
        }
        
        let errorLog = [];
        if (fs.existsSync(errorLogPath)) {
            errorLog = JSON.parse(fs.readFileSync(errorLogPath, 'utf8'));
        }
        errorLog.push(errorInfo);
        fs.writeFileSync(errorLogPath, JSON.stringify(errorLog, null, 2));
        
        console.log(`\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${errorLogPath}`);
        console.log('='.repeat(60));
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        throw new Error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${errorMessage}`);
    }

    async runScenario(scenario) {
        console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
        
        const results = {
            scenario: scenario.name,
            steps: [],
            success: true,
            error: null
        };

        try {
            for (let i = 0; i < scenario.steps.length; i++) {
                const step = scenario.steps[i];
                console.log(`\nüìã –®–∞–≥ ${i + 1}: ${step.description}`);
                
                const stepResult = {
                    step: i + 1,
                    description: step.description,
                    success: false,
                    error: null
                };

                try {
                    switch (step.action) {
                        case 'navigate':
                            for (let j = 0; j < this.pages.length; j++) {
                                await this.pages[j].goto(step.url, { waitUntil: 'networkidle2' });
                                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${j + 1}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${step.url}`);
                            }
                            stepResult.success = true;
                            break;
                            
                        case 'wait':
                            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${step.duration}ms`);
                            await new Promise(resolve => setTimeout(resolve, step.duration));
                            stepResult.success = true;
                            break;
                            
                        case 'click':
                            const clickSuccess = await this.clickOnText(step.browserIndex, step.text, step.description);
                            if (!clickSuccess && step.required !== false) {
                                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É "${step.text}"`);
                            }
                            stepResult.success = clickSuccess;
                            break;
                            
                        case 'verify':
                            const verifySuccess = await this.verifyTextExists(step.browserIndex, step.text, step.description);
                            if (!verifySuccess && step.required !== false) {
                                throw new Error(`–¢–µ–∫—Å—Ç "${step.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                            }
                            stepResult.success = verifySuccess;
                            break;
                            
                        case 'waitFor':
                            const waitSuccess = await this.waitForText(step.browserIndex, step.text, step.timeout, step.description);
                            if (!waitSuccess && step.required !== false) {
                                throw new Error(`–¢–µ–∫—Å—Ç "${step.text}" –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ ${step.timeout}ms`);
                            }
                            stepResult.success = waitSuccess;
                            break;
                            
                        default:
                            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
                    }
                } catch (error) {
                    stepResult.error = error.message;
                    stepResult.success = false;
                    
                    // –ï—Å–ª–∏ —à–∞–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    if (step.required !== false) {
                        throw error;
                    }
                }
                
                results.steps.push(stepResult);
                
                // –ï—Å–ª–∏ —à–∞–≥ –Ω–µ—É–¥–∞—á–µ–Ω –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                if (!stepResult.success && step.required !== false) {
                    results.success = false;
                    results.error = stepResult.error;
                    break;
                }
            }
        } catch (error) {
            results.success = false;
            results.error = error.message;
        }

        return results;
    }

    getScenarios() {
        return {
            // –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            basic: {
                name: '–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                steps: [
                    {
                        action: 'navigate',
                        url: 'http://localhost:3000',
                        description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –¥–≤—É—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö'
                    },
                    {
                        action: 'wait',
                        duration: 3000,
                        description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                    },
                    {
                        action: 'verify',
                        browserIndex: 0,
                        text: '–≥–æ—Å—Ç—å',
                        description: '–Ω–∞ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞'
                    },
                    {
                        action: 'click',
                        browserIndex: 0,
                        text: '–≥–æ—Å—Ç—å',
                        description: '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞'
                    },
                    {
                        action: 'waitFor',
                        browserIndex: 0,
                        text: '–ø–æ—Å—Ç',
                        timeout: 10000,
                        description: '–≤ –ª–µ–Ω—Ç–µ –ø–æ—Å—Ç–æ–≤'
                    },
                    {
                        action: 'verify',
                        browserIndex: 0,
                        text: '–ø–æ—Å—Ç',
                        description: '–≤ –ª–µ–Ω—Ç–µ'
                    }
                ]
            },

            // –ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            multiuser: {
                name: '–ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                steps: [
                    {
                        action: 'navigate',
                        url: 'http://localhost:3000',
                        description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –¥–≤—É—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö'
                    },
                    {
                        action: 'wait',
                        duration: 3000,
                        description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                    },
                    // –í—Ö–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    {
                        action: 'click',
                        browserIndex: 0,
                        text: '–≥–æ—Å—Ç—å',
                        description: '–¥–ª—è –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    },
                    {
                        action: 'waitFor',
                        browserIndex: 0,
                        text: '–ø–æ—Å—Ç',
                        timeout: 10000,
                        description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    },
                    // –í—Ö–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    {
                        action: 'click',
                        browserIndex: 1,
                        text: '–≥–æ—Å—Ç—å',
                        description: '–¥–ª—è –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    },
                    {
                        action: 'waitFor',
                        browserIndex: 1,
                        text: '–ø–æ—Å—Ç',
                        timeout: 10000,
                        description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    },
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    {
                        action: 'verify',
                        browserIndex: 0,
                        text: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        description: '–≤ —Å–∞–π–¥–±–∞—Ä–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞',
                        required: false
                    },
                    {
                        action: 'verify',
                        browserIndex: 1,
                        text: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        description: '–≤ —Å–∞–π–¥–±–∞—Ä–µ –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞',
                        required: false
                    }
                ]
            },

            // –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            createPost: {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞',
                steps: [
                    {
                        action: 'navigate',
                        url: 'http://localhost:3000',
                        description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
                    },
                    {
                        action: 'wait',
                        duration: 3000,
                        description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                    },
                    {
                        action: 'click',
                        browserIndex: 0,
                        text: '–≥–æ—Å—Ç—å',
                        description: '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞'
                    },
                    {
                        action: 'waitFor',
                        browserIndex: 0,
                        text: '–ø–æ—Å—Ç',
                        timeout: 10000,
                        description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'
                    },
                    {
                        action: 'verify',
                        browserIndex: 0,
                        text: '—Å–æ–∑–¥–∞—Ç—å',
                        description: '–∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                        required: false
                    },
                    {
                        action: 'click',
                        browserIndex: 0,
                        text: '—Å–æ–∑–¥–∞—Ç—å',
                        description: '–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                        required: false
                    },
                    {
                        action: 'waitFor',
                        browserIndex: 0,
                        text: '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                        timeout: 5000,
                        description: '—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                        required: false
                    }
                ]
            }
        };
    }

    async runAllScenarios() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        
        const scenarios = this.getScenarios();
        const results = [];

        for (const [key, scenario] of Object.entries(scenarios)) {
            console.log(`\n${'='.repeat(50)}`);
            try {
                const result = await this.runScenario(scenario);
                results.push(result);
                
                if (!result.success) {
                    console.log(`‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏`);
                    console.log(`üîç –û—à–∏–±–∫–∞: ${result.error}`);
                    break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                } else {
                    console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                }
            } catch (error) {
                console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}": ${error.message}`);
                results.push({
                    scenario: scenario.name,
                    success: false,
                    error: error.message,
                    steps: []
                });
                break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            }
        }

        this.printSummary(results);
        return results;
    }

    printSummary(results) {
        console.log(`\n${'='.repeat(60)}`);
        console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
        console.log(`${'='.repeat(60)}`);
        
        let totalScenarios = results.length;
        let successfulScenarios = results.filter(r => r.success).length;
        
        console.log(`–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${totalScenarios}`);
        console.log(`–£—Å–ø–µ—à–Ω—ã—Ö: ${successfulScenarios}`);
        console.log(`–ù–µ—É–¥–∞—á–Ω—ã—Ö: ${totalScenarios - successfulScenarios}`);
        
        for (const result of results) {
            console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: ${result.scenario}`);
            console.log(`–°—Ç–∞—Ç—É—Å: ${result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
            
            if (result.error) {
                console.log(`–û—à–∏–±–∫–∞: ${result.error}`);
            }
            
            if (result.steps && result.steps.length > 0) {
                const successfulSteps = result.steps.filter(s => s.success).length;
                console.log(`–®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successfulSteps}/${result.steps.length}`);
                
                for (const step of result.steps) {
                    const status = step.success ? '‚úÖ' : '‚ùå';
                    console.log(`  ${status} –®–∞–≥ ${step.step}: ${step.description}`);
                    if (step.error) {
                        console.log(`    –û—à–∏–±–∫–∞: ${step.error}`);
                    }
                }
            }
        }
        
        console.log(`\n${'='.repeat(60)}`);
        if (successfulScenarios === totalScenarios) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
        } else {
            console.log('‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û –ò–ó-–ó–ê –û–®–ò–ë–û–ö');
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é');
        }
        console.log(`${'='.repeat(60)}`);
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { OCRMasterBot };

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    async function main() {
        const bot = new OCRMasterBot();
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 2 –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ –¥–ª—è –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.init(2);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            const results = await bot.runAllScenarios();
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        } finally {
            await bot.close();
        }
    }
    
    main().catch(console.error);
} 