async function checkNotificationsDirect() {
  console.log('=== –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
    const testUser = {
      username: `direct_check_${Date.now()}`,
      email: `direct_check${Date.now()}@example.com`,
      password: 'testpass123',
      first_name: 'Direct',
      last_name: 'Check'
    };
    
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testUser)
    });
    
    if (!registerResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.status}`);
    }
    
    const userData = await registerResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const allNotificationsResponse = await fetch('http://localhost:8000/api/notifications', {
      headers: { 'Authorization': `Bearer ${userData.token}` }
    });
    
    if (allNotificationsResponse.ok) {
      const allNotifications = await allNotificationsResponse.json();
      console.log('üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', allNotifications);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', allNotificationsResponse.status);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const unreadResponse = await fetch('http://localhost:8000/api/notifications/unread', {
      headers: { 'Authorization': `Bearer ${userData.token}` }
    });
    
    if (unreadResponse.ok) {
      const unread = await unreadResponse.json();
      console.log('üìã –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', unread);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', unreadResponse.status);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö...');
    const countResponse = await fetch('http://localhost:8000/api/notifications/unread/count', {
      headers: { 'Authorization': `Bearer ${userData.token}` }
    });
    
    if (countResponse.ok) {
      const count = await countResponse.json();
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', count);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', countResponse.status);
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkNotificationsDirect(); 