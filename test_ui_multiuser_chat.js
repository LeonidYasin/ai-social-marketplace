const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const Tesseract = require('tesseract.js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  FRONTEND_URL: 'http://localhost:3000',
  BACKEND_URL: 'http://localhost:8000/api',
  SCREENSHOTS_DIR: './test_screenshots/multiuser',
  LOGS_DIR: './test_logs',
  USERS: [
    {
      username: 'testuser1',
      email: 'testuser1@example.com',
      password: 'password123',
      name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1'
    },
    {
      username: 'testuser2', 
      email: 'testuser2@example.com',
      password: 'password123',
      name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2'
    }
  ],
  WAIT_TIMEOUT: 5000,
  SCREENSHOT_DELAY: 1000
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
[CONFIG.SCREENSHOTS_DIR, CONFIG.LOGS_DIR].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –õ–æ–≥–≥–µ—Ä
class Logger {
  constructor() {
    this.logs = [];
  }

  log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type}] ${message}`;
    console.log(logEntry);
    this.logs.push(logEntry);
  }

  error(message) {
    this.log(message, 'ERROR');
  }

  success(message) {
    this.log(message, 'SUCCESS');
  }

  warning(message) {
    this.log(message, 'WARNING');
  }

  save() {
    const filename = path.join(CONFIG.LOGS_DIR, `ui_multiuser_${Date.now()}.log`);
    fs.writeFileSync(filename, this.logs.join('\n'));
    console.log(`üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filename}`);
  }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
class ScreenshotAnalyzer {
  constructor() {
    this.logger = new Logger();
  }

  async analyzeScreenshot(imagePath, description = '') {
    try {
      this.logger.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç: ${description}`);
      
      const result = await Tesseract.recognize(imagePath, 'rus+eng', {
        logger: m => {
          if (m.status === 'recognizing text') {
            process.stdout.write(`\r${m.progress * 100}%`);
          }
        }
      });

      const text = result.data.text.trim();
      this.logger.success(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      return {
        text,
        confidence: result.data.confidence,
        words: result.data.words.map(w => w.text),
        lines: result.data.lines.map(l => l.text)
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${error.message}`);
      return null;
    }
  }

  async findTextInScreenshot(imagePath, searchText) {
    const analysis = await this.analyzeScreenshot(imagePath);
    if (!analysis) return false;
    
    const found = analysis.text.toLowerCase().includes(searchText.toLowerCase());
    this.logger.log(`üîç –ü–æ–∏—Å–∫ "${searchText}": ${found ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
    return found;
  }
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
class BrowserSession {
  constructor(name, userData) {
    this.name = name;
    this.userData = userData;
    this.browser = null;
    this.page = null;
    this.logger = new Logger();
  }

  async init() {
    this.logger.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏: ${this.name}`);
    
    this.browser = await puppeteer.launch({
      headless: false,
      slowMo: 500,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    this.page = await this.browser.newPage();
    await this.page.setViewport({ width: 1280, height: 720 });
    
    // –û—á–∏—â–∞–µ–º localStorage
    await this.page.goto(CONFIG.FRONTEND_URL);
    await this.page.evaluate(() => localStorage.clear());
    
    this.logger.success(`‚úÖ –°–µ—Å—Å–∏—è ${this.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
  }

  async takeScreenshot(filename, description = '') {
    const filepath = path.join(CONFIG.SCREENSHOTS_DIR, `${this.name}_${filename}.png`);
    await this.page.screenshot({ path: filepath, fullPage: true });
    this.logger.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath} ${description}`);
    return filepath;
  }

  async waitForElement(selector, timeout = CONFIG.WAIT_TIMEOUT) {
    try {
      await this.page.waitForSelector(selector, { timeout });
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`);
      return false;
    }
  }

  async clickElement(selector, description = '') {
    try {
      await this.waitForElement(selector);
      await this.page.click(selector);
      this.logger.log(`üñ±Ô∏è –ö–ª–∏–∫: ${selector} ${description}`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.SCREENSHOT_DELAY));
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: ${selector} - ${error.message}`);
      return false;
    }
  }

  async typeText(selector, text, description = '') {
    try {
      await this.waitForElement(selector);
      await this.page.type(selector, text);
      this.logger.log(`‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: ${text} ${description}`);
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: ${selector} - ${error.message}`);
      return false;
    }
  }

  async getElementText(selector) {
    try {
      await this.waitForElement(selector);
      return await this.page.$eval(selector, el => el.textContent.trim());
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: ${selector}`);
      return null;
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.logger.log(`üîí –°–µ—Å—Å–∏—è ${this.name} –∑–∞–∫—Ä—ã—Ç–∞`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MultiUserUITester {
  constructor() {
    this.logger = new Logger();
    this.analyzer = new ScreenshotAnalyzer();
    this.sessions = [];
  }

  async init() {
    this.logger.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ UI —Ç–µ—Å—Ç–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = 0; i < CONFIG.USERS.length; i++) {
      const session = new BrowserSession(`user${i + 1}`, CONFIG.USERS[i]);
      await session.init();
      this.sessions.push(session);
    }
  }

  // –®–∞–≥ 1: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async step1_LoginUsers() {
    this.logger.log('üìã –®–∞–≥ 1: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º—É');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const user = CONFIG.USERS[i];
      
      this.logger.log(`üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await session.page.goto(CONFIG.FRONTEND_URL);
      await session.takeScreenshot('01_initial', '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
      
      // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ (–∏–∫–æ–Ω–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ AppBar)
      const loginButton = await session.page.evaluate(() => {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å aria-label "–í–æ–π—Ç–∏"
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => btn.getAttribute('aria-label') === '–í–æ–π—Ç–∏');
      });
      
      if (loginButton) {
        await session.page.evaluate(btn => btn.click(), loginButton);
        await session.takeScreenshot('02_login_dialog', '–î–∏–∞–ª–æ–≥ –≤—Ö–æ–¥–∞');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –∏ –∫–ª–∏–∫–∞–µ–º
        const loginSystemButton = await session.page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          if (dialog) {
            const buttons = Array.from(dialog.querySelectorAll('button'));
            return buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'));
          }
          return null;
        });
        
        if (loginSystemButton) {
          await session.page.evaluate(btn => btn.click(), loginSystemButton);
          await session.takeScreenshot('03_login_form', '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞');
          
          // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
          const formFields = await session.page.evaluate(() => {
            const inputs = Array.from(document.querySelectorAll('input'));
            return inputs.map(input => ({
              type: input.type,
              placeholder: input.placeholder,
              name: input.name
            }));
          });
          
          this.logger.log(`üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ñ–æ—Ä–º—ã:`, formFields);
          
          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
          const emailInput = formFields.find(field => field.type === 'email' || field.placeholder?.includes('email'));
          const passwordInput = formFields.find(field => field.type === 'password');
          
          if (emailInput) {
            await session.typeText('input[type="email"], input[placeholder*="email"]', user.email, 'Email');
          }
          if (passwordInput) {
            await session.typeText('input[type="password"]', user.password, '–ü–∞—Ä–æ–ª—å');
          }
          
          await session.takeScreenshot('04_form_filled', '–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
          await session.clickElement('button[type="submit"], button:contains("–í–æ–π—Ç–∏")', '–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞');
          await new Promise(resolve => setTimeout(resolve, 3000));
          await session.takeScreenshot('05_after_login', '–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
          const hasToken = await session.page.evaluate(() => {
            return !!localStorage.getItem('authToken');
          });
          
          if (hasToken) {
            this.logger.success(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª`);
          } else {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${user.username}`);
          }
        } else {
          this.logger.error(`‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${user.username}`);
        }
      } else {
        this.logger.error(`‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${user.username}`);
      }
    }
  }

  // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
  async step2_CheckSidebarRight() {
    this.logger.log('üìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (SidebarRight)');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è ${currentUser.username}`);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      await session.takeScreenshot('06_sidebar_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏');
      
      // –ò—â–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
      const sidebarRight = await session.page.$('[data-testid="sidebar-right"]');
      
      if (sidebarRight) {
        this.logger.success(`‚úÖ –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userList = await session.page.evaluate(() => {
          const sidebar = document.querySelector('[data-testid="sidebar-right"]');
          if (sidebar) {
            const userItems = sidebar.querySelectorAll('[data-testid="user-item"]');
            return Array.from(userItems).map(item => ({
              name: item.querySelector('[data-testid="user-name"]')?.textContent.trim() || item.textContent.trim(),
              clickable: item.tagName === 'BUTTON' || item.onclick !== null,
              userId: item.getAttribute('data-user-id')
            }));
          }
          return [];
        });
        
        this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–Ω–µ–ª–∏: ${userList.length}`);
        userList.forEach((user, index) => {
          this.logger.log(`  ${index + 1}. ${user.name} (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π: ${user.clickable})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const otherUsers = userList.filter(user => 
          !user.name.includes(currentUser.name) && 
          !user.name.includes(currentUser.username)
        );
        
        if (otherUsers.length > 0) {
          this.logger.success(`‚úÖ ${currentUser.username} –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${otherUsers.length}`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–µ—Ä–≤–æ–º—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const firstOtherUser = otherUsers[0];
          const userElement = await session.page.evaluate((userName) => {
            const sidebar = document.querySelector('[data-testid="sidebar-right"]');
            if (sidebar) {
              const userItems = sidebar.querySelectorAll('[data-testid="user-item"]');
              for (let item of userItems) {
                const userNameElement = item.querySelector('[data-testid="user-name"]');
                if (userNameElement && userNameElement.textContent.includes(userName)) {
                  return true;
                }
              }
            }
            return false;
          }, firstOtherUser.name);
          
          if (userElement) {
            await session.clickElement(`[data-testid="user-item"][data-user-id="${firstOtherUser.userId}"]`, `–ö–ª–∏–∫ –ø–æ ${firstOtherUser.name}`);
            await session.takeScreenshot('07_user_click', `–ö–ª–∏–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${firstOtherUser.name}`);
          }
        } else {
          this.logger.warning(`‚ö†Ô∏è ${currentUser.username} –Ω–µ –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
      } else {
        this.logger.error(`‚ùå –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
  async step3_CheckChatOpening() {
    this.logger.log('üìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–ª—è ${currentUser.username}`);
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      await session.takeScreenshot('08_chat_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª—Å—è –ª–∏ —á–∞—Ç
      const chatOpened = await session.page.evaluate(() => {
        // –ò—â–µ–º Drawer —Å —á–∞—Ç–æ–º (–æ–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∞)
        const chatDrawer = document.querySelector('div[role="presentation"] .MuiDrawer-paper');
        const messageInput = document.querySelector('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], input[placeholder*="message"]');
        const sendButton = document.querySelector('button[aria-label*="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"], button[aria-label*="send"]');
        
        return {
          hasDrawer: !!chatDrawer,
          hasInput: !!messageInput,
          hasSendButton: !!sendButton,
          drawerVisible: chatDrawer ? window.getComputedStyle(chatDrawer).transform !== 'translateX(100%)' : false
        };
      });
      
      this.logger.log(`üìã –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –¥–ª—è ${currentUser.username}:`, chatOpened);
      
              if (chatOpened.hasDrawer && chatOpened.drawerVisible) {
          this.logger.success(`‚úÖ –ß–∞—Ç –æ—Ç–∫—Ä—ã–ª—Å—è –¥–ª—è ${currentUser.username}`);
          
          if (chatOpened.hasInput) {
            this.logger.success(`‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await session.typeText('input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], input[placeholder*="message"]', '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            await session.takeScreenshot('09_message_typed', '–°–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–∫–æ–Ω–∫–∞ Send)
            const sendButton = await session.page.evaluate(() => {
              const buttons = document.querySelectorAll('button');
              return buttons.find(btn => 
                btn.querySelector('svg') && 
                btn.querySelector('svg').innerHTML.includes('M2.01 21L23 12 2.01 3 2 10l15 2-15 2z') // –ò–∫–æ–Ω–∫–∞ Send
              );
            });
            
            if (sendButton) {
              await session.page.evaluate(btn => btn.click(), sendButton);
              await session.takeScreenshot('10_message_sent', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
              this.logger.success(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            } else {
              this.logger.warning(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
          } else {
            this.logger.warning(`‚ö†Ô∏è –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          }
        } else {
          this.logger.error(`‚ùå –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –¥–ª—è ${currentUser.username}`);
        }
    }
  }

  // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  async step4_CheckMessageReceiving() {
    this.logger.log('üìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥–ª–∏ –¥–æ–π—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üì® –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${currentUser.username}`);
      await session.takeScreenshot('11_messages_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      const messages = await session.page.evaluate(() => {
        const messageElements = document.querySelectorAll('[data-testid="message"], .message, .chat-message');
        return Array.from(messageElements).map(msg => ({
          text: msg.textContent.trim(),
          isOwn: msg.classList.contains('own') || msg.classList.contains('sent'),
          timestamp: msg.querySelector('.timestamp')?.textContent || ''
        }));
      });
      
      this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${currentUser.username}: ${messages.length}`);
      messages.forEach((msg, index) => {
        this.logger.log(`  ${index + 1}. "${msg.text}" (—Å–≤–æ–µ: ${msg.isOwn})`);
      });
      
      if (messages.length > 0) {
        this.logger.success(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
      } else {
        this.logger.warning(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
  async step5_CheckFeed() {
    this.logger.log('üìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üì∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–Ω—Ç—É –¥–ª—è ${currentUser.username}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ª–µ–Ω—Ç—É)
      await session.page.goto(CONFIG.FRONTEND_URL);
      await new Promise(resolve => setTimeout(resolve, 2000));
      await session.takeScreenshot('12_feed_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω—Ç—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤
      const posts = await session.page.evaluate(() => {
        const postElements = document.querySelectorAll('[data-testid="post"], .post, .feed-item');
        return Array.from(postElements).map(post => ({
          content: post.textContent.trim().substring(0, 100) + '...',
          hasAuthor: !!post.querySelector('[data-testid="author"], .author, .post-author'),
          hasActions: !!post.querySelector('[data-testid="actions"], .actions, .post-actions')
        }));
      });
      
      this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${currentUser.username}: ${posts.length}`);
      
      if (posts.length > 0) {
        this.logger.success(`‚úÖ –ü–æ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        const createPostButton = await session.page.evaluate(() => {
          const buttons = document.querySelectorAll('button');
          return buttons.find(btn => 
            btn.textContent.includes('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç') || 
            btn.textContent.includes('–ù–æ–≤—ã–π –ø–æ—Å—Ç') ||
            btn.textContent.includes('+')
          );
        });
        
        if (createPostButton) {
          await session.page.evaluate(btn => btn.click(), createPostButton);
          await session.takeScreenshot('13_create_post', '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
          
          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å—Ç–∞
          await session.typeText('[data-testid="post-content"], .post-content, textarea', `–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç ${currentUser.username} - ${new Date().toLocaleString()}`, '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
          await session.takeScreenshot('14_post_filled', '–ü–æ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
          await session.clickElement('[data-testid="submit-post"], .submit-post, button[type="submit"]', '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞');
          await session.takeScreenshot('15_post_sent', '–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
          this.logger.success(`‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è ${currentUser.username}`);
        } else {
          this.logger.warning(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
        }
      } else {
        this.logger.warning(`‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π
  async step6_CheckCommentsAndReactions() {
    this.logger.log('üìã –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ä–µ–∞–∫—Ü–∏–π');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è ${currentUser.username}`);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤
      await new Promise(resolve => setTimeout(resolve, 2000));
      await session.takeScreenshot('16_comments_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      const firstPost = await session.page.evaluate(() => {
        const posts = document.querySelectorAll('[data-testid="post"], .post, .feed-item');
        if (posts.length > 0) {
          const post = posts[0];
          return {
            hasCommentButton: !!post.querySelector('[data-testid="comment-button"], .comment-button, button[aria-label*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]'),
            hasLikeButton: !!post.querySelector('[data-testid="like-button"], .like-button, button[aria-label*="–ª–∞–π–∫"]'),
            hasReactions: !!post.querySelector('[data-testid="reactions"], .reactions, .post-reactions')
          };
        }
        return null;
      });
      
      if (firstPost) {
        this.logger.log(`üìã –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è ${currentUser.username}:`, firstPost);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if (firstPost.hasCommentButton) {
          await session.clickElement('[data-testid="comment-button"], .comment-button, button[aria-label*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]', '–ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
          await session.takeScreenshot('17_comment_form', '–§–æ—Ä–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
          
          // –í–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          await session.typeText('[data-testid="comment-input"], .comment-input, textarea, input[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]', `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${currentUser.username}`, '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
          await session.takeScreenshot('18_comment_typed', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–≤–µ–¥–µ–Ω');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
          await session.clickElement('[data-testid="submit-comment"], .submit-comment, button[type="submit"]', '–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
          await session.takeScreenshot('19_comment_sent', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
          this.logger.success(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${currentUser.username}`);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
        if (firstPost.hasLikeButton) {
          await session.clickElement('[data-testid="like-button"], .like-button, button[aria-label*="–ª–∞–π–∫"]', '–ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞');
          await session.takeScreenshot('20_reaction_added', '–†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
          this.logger.success(`‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
        }
      } else {
        this.logger.warning(`‚ö†Ô∏è –ü–æ—Å—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async step7_CheckNotifications() {
    this.logger.log('üìã –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${currentUser.username}`);
      
      // –ò—â–µ–º –∏–∫–æ–Ω–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const notificationIcon = await session.page.evaluate(() => {
        const icons = document.querySelectorAll('[data-testid="notifications"], .notifications, .notification-icon, button[aria-label*="—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"]');
        return icons.length > 0;
      });
      
      if (notificationIcon) {
        await session.clickElement('[data-testid="notifications"], .notifications, .notification-icon, button[aria-label*="—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"]', '–ò–∫–æ–Ω–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        await session.takeScreenshot('21_notifications', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notifications = await session.page.evaluate(() => {
          const notificationElements = document.querySelectorAll('[data-testid="notification"], .notification, .notification-item');
          return Array.from(notificationElements).map(notif => ({
            text: notif.textContent.trim(),
            isRead: notif.classList.contains('read') || notif.classList.contains('unread') === false
          }));
        });
        
        this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${currentUser.username}: ${notifications.length}`);
        notifications.forEach((notif, index) => {
          this.logger.log(`  ${index + 1}. "${notif.text}" (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${notif.isRead})`);
        });
        
        if (notifications.length > 0) {
          this.logger.success(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
        } else {
          this.logger.warning(`‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${currentUser.username}`);
        }
      } else {
        this.logger.warning(`‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async step8_CheckUserProfile() {
    this.logger.log('üìã –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    for (let i = 0; i < this.sessions.length; i++) {
      const session = this.sessions[i];
      const currentUser = CONFIG.USERS[i];
      
      this.logger.log(`üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${currentUser.username}`);
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      const profileButton = await session.page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => 
          btn.textContent.includes('–ü—Ä–æ—Ñ–∏–ª—å') || 
          btn.textContent.includes('Profile') ||
          btn.querySelector('[data-testid="avatar"], .avatar') !== null
        );
      });
      
      if (profileButton) {
        await session.page.evaluate(btn => btn.click(), profileButton);
        await session.takeScreenshot('22_profile_opened', '–ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        const profileInfo = await session.page.evaluate(() => {
          const nameElement = document.querySelector('[data-testid="user-name"], .user-name, .profile-name');
          const bioElement = document.querySelector('[data-testid="user-bio"], .user-bio, .profile-bio');
          const avatarElement = document.querySelector('[data-testid="user-avatar"], .user-avatar, .profile-avatar');
          
          return {
            name: nameElement?.textContent.trim(),
            bio: bioElement?.textContent.trim(),
            hasAvatar: !!avatarElement
          };
        });
        
        this.logger.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${currentUser.username}:`, profileInfo);
        
        if (profileInfo.name) {
          this.logger.success(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è ${currentUser.username}`);
        } else {
          this.logger.warning(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è ${currentUser.username}`);
        }
      } else {
        this.logger.warning(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${currentUser.username}`);
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    try {
      this.logger.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ UI —Ç–µ—Å—Ç–∞');
      
      await this.init();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
      await this.step1_LoginUsers();
      await this.step2_CheckSidebarRight();
      await this.step3_CheckChatOpening();
      await this.step4_CheckMessageReceiving();
      await this.step5_CheckFeed();
      await this.step6_CheckCommentsAndReactions();
      await this.step7_CheckNotifications();
      await this.step8_CheckUserProfile();
      
      this.logger.success('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: ${error.message}`);
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
      for (const session of this.sessions) {
        await session.close();
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
      this.logger.save();
      
      this.logger.log('üì∏ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/multiuser/');
      this.logger.log('üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_logs/');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main() {
  const tester = new MultiUserUITester();
  await tester.runAllTests();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  MultiUserUITester,
  BrowserSession,
  ScreenshotAnalyzer,
  Logger
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
} 