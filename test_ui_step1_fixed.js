const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function testStep1() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —à–∞–≥–∞ 1: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
  
  let browser;
  try {
    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: { width: 1280, height: 720 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    await page.screenshot({ 
      path: './test_screenshots/step1_01_initial.png',
      fullPage: true 
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£" —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£"');
    
    let loginButton = null;
    const selectors = [
      '//button[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]',
      '//*[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]',
      '//div[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]',
      '//span[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]',
      '//a[contains(text(), "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")]',
      'button:contains("–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£")',
      '[data-testid="login-button"]',
      'button[aria-label="–í–æ–π—Ç–∏"]'
    ];
    
    for (const selector of selectors) {
      try {
        if (selector.startsWith('//')) {
          // XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
          const elements = await page.$x(selector);
          if (elements.length > 0) {
            loginButton = elements[0];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ XPath: ${selector}`);
            break;
          }
        } else {
          // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
          const element = await page.$(selector);
          if (element) {
            loginButton = element;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ CSS: ${selector}`);
            break;
          }
        }
      } catch (error) {
        console.log(`‚ùå –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${selector}`);
      }
    }
    
    if (!loginButton) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const pageText = await page.evaluate(() => document.body.innerText);
      console.log('üìã –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
      console.log(pageText.substring(0, 500) + '...');
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
      await page.screenshot({ 
        path: './test_screenshots/step1_error.png',
        fullPage: true 
      });
      
      throw new Error('–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
    console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£"');
    await loginButton.click();
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    console.log('‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
    console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
    await page.screenshot({ 
      path: './test_screenshots/step1_02_after_login_click.png',
      fullPage: true 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    const loginForm = await page.$('form, [data-testid="login-form"], .login-form');
    if (loginForm) {
      console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ò—â–µ–º –ø–æ–ª—è email –∏ –ø–∞—Ä–æ–ª—å
      const emailField = await page.$('input[type="email"], input[name="email"], #email');
      const passwordField = await page.$('input[type="password"], input[name="password"], #password');
      
      if (emailField && passwordField) {
        console.log('‚úÖ –ü–æ–ª—è email –∏ –ø–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω—ã');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');
        await emailField.type('test@example.com');
        await passwordField.type('password123');
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
        await page.screenshot({ 
          path: './test_screenshots/step1_03_form_filled.png',
          fullPage: true 
        });
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        const submitButton = await page.$('button[type="submit"], input[type="submit"], .submit-button');
        if (submitButton) {
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É');
          await submitButton.click();
          
          // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
          await page.screenshot({ 
            path: './test_screenshots/step1_04_after_submit.png',
            fullPage: true 
          });
          
          console.log('‚úÖ –¢–µ—Å—Ç —à–∞–≥–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('‚ùå –ü–æ–ª—è email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —à–∞–≥–∞ 1:', error.message);
    
    if (browser) {
      const page = (await browser.pages())[0];
      if (page) {
        await page.screenshot({ 
          path: './test_screenshots/step1_error.png',
          fullPage: true 
        });
      }
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testStep1().catch(console.error); 