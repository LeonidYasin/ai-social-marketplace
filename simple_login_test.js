const puppeteer = require('puppeteer');

async function simpleLoginTest() {
  console.log('üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1000
    });

    page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 720 });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.screenshot({ path: './test_screenshots/simple_01_initial.png', fullPage: true });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
    const loginButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫:', buttons.length);
      
      const loginBtn = buttons.find(btn => btn.getAttribute('aria-label') === '–í–æ–π—Ç–∏');
      console.log('–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞:', !!loginBtn);
      
      return loginBtn ? true : false;
    });
    
    if (loginButton) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
      await page.click('button[aria-label="–í–æ–π—Ç–∏"]');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–∏–∞–ª–æ–≥–∞
      await page.screenshot({ path: './test_screenshots/simple_02_dialog.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
      console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
      const loginSystemButton = await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const loginSystemBtn = buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'));
        console.log('–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–∞–π–¥–µ–Ω–∞:', !!loginSystemBtn);
        return loginSystemBtn ? true : false;
      });
      
      if (loginSystemButton) {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        await page.click('button:has-text("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã
        await page.screenshot({ path: './test_screenshots/simple_03_form.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        const formFields = await page.evaluate(() => {
          const inputs = Array.from(document.querySelectorAll('input'));
          return inputs.map(input => ({
            type: input.type,
            placeholder: input.placeholder,
            name: input.name,
            id: input.id
          }));
        });
        
        console.log('üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è —Ñ–æ—Ä–º—ã:', formFields);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        const testUser = {
          email: 'testuser1@example.com',
          password: 'password123'
        };
        
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...');
        
        // –ò—â–µ–º –ø–æ–ª–µ email
        const emailInput = formFields.find(field => field.type === 'email' || field.placeholder?.toLowerCase().includes('email'));
        if (emailInput) {
          await page.type('input[type="email"], input[placeholder*="email"]', testUser.email);
          console.log('‚úÖ Email –≤–≤–µ–¥–µ–Ω');
        }
        
        // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        const passwordInput = formFields.find(field => field.type === 'password');
        if (passwordInput) {
          await page.type('input[type="password"]', testUser.password);
          console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
        }
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
        await page.screenshot({ path: './test_screenshots/simple_04_filled.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        const submitButton = await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          const submitBtn = buttons.find(btn => 
            btn.type === 'submit' || 
            btn.textContent.includes('–í–æ–π—Ç–∏') ||
            btn.textContent.includes('Login')
          );
          console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞:', !!submitBtn);
          return submitBtn ? true : false;
        });
        
        if (submitButton) {
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
          await page.click('button[type="submit"], button:has-text("–í–æ–π—Ç–∏")');
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
          await page.screenshot({ path: './test_screenshots/simple_05_after_login.png', fullPage: true });
          console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
          const hasToken = await page.evaluate(() => {
            return !!localStorage.getItem('authToken');
          });
          
          if (hasToken) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É!');
          } else {
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è');
          }
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

simpleLoginTest().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 