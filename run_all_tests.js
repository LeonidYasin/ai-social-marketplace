const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –¥–ª—è Node.js 18+ –∏–ª–∏ node-fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
let fetch;
try {
  fetch = require('node-fetch');
} catch (error) {
  // –í Node.js 18+ fetch –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
  fetch = global.fetch;
}

const LOG_DIR = './test_logs';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

class TestRunner {
  constructor() {
    this.logs = [];
    this.results = {
      multiuser: null,
      performance: null,
      security: null,
      ui: null
    };
    this.startTime = null;
  }

  log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type}] ${message}`;
    console.log(logEntry);
    this.logs.push(logEntry);
  }

  error(message) {
    this.log(message, 'ERROR');
  }

  success(message) {
    this.log(message, 'SUCCESS');
  }

  warning(message) {
    this.log(message, 'WARNING');
  }

  saveLogs(filename) {
    const filepath = path.join(LOG_DIR, filename);
    fs.writeFileSync(filepath, this.logs.join('\n'));
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
  async runTest(testFile, testName) {
    return new Promise((resolve, reject) => {
      this.log(`üöÄ –ó–∞–ø—É—Å–∫ ${testName}...`);
      
      const testProcess = spawn('node', [testFile], {
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let output = '';
      let errorOutput = '';

      testProcess.stdout.on('data', (data) => {
        const text = data.toString();
        output += text;
        process.stdout.write(text);
      });

      testProcess.stderr.on('data', (data) => {
        const text = data.toString();
        errorOutput += text;
        process.stderr.write(text);
      });

      testProcess.on('close', (code) => {
        if (code === 0) {
          this.success(`‚úÖ ${testName} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          resolve({ success: true, output, errorOutput, code });
        } else {
          this.error(`‚ùå ${testName} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
          resolve({ success: false, output, errorOutput, code });
        }
      });

      testProcess.on('error', (error) => {
        this.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${testName}: ${error.message}`);
        reject(error);
      });
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async checkAPIAvailability() {
    this.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
    
    try {
      const response = await fetch('http://localhost:8000/api/health');
      if (response.ok) {
        this.success('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      } else {
        this.error(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        return false;
      }
    } catch (error) {
      this.error(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  async checkFrontendAvailability() {
    this.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
    
    try {
      const response = await fetch('http://localhost:3000');
      if (response.ok) {
        this.success('‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      } else {
        this.error(`‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        return false;
      }
    } catch (error) {
      this.error(`‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runMultiUserTests() {
    this.log('\n=== –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===');
    
    const result = await this.runTest('test_multiuser_advanced.js', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    this.results.multiuser = result;
    
    return result;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async runPerformanceTests() {
    this.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
    
    const result = await this.runTest('test_performance.js', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    this.results.performance = result;
    
    return result;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  async runSecurityTests() {
    this.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===');
    
    const result = await this.runTest('test_security.js', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    this.results.security = result;
    
    return result;
  }

  // –ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runUITests() {
    this.log('\n=== UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    if (fs.existsSync('test_visual_integrated.js')) {
      this.log('üîç –ù–∞–π–¥–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç');
      const result = await this.runTest('test_visual_integrated.js', '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      this.results.ui = result;
      return result;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö UI —Ç–µ—Å—Ç–æ–≤
    const uiTestFiles = [
      'test_ui_automation.js',
      'test_ui_complete_fix.js',
      'test_ui_final.js'
    ];

    for (const testFile of uiTestFiles) {
      if (fs.existsSync(testFile)) {
        this.log(`üîç –ù–∞–π–¥–µ–Ω UI —Ç–µ—Å—Ç: ${testFile}`);
        const result = await this.runTest(testFile, `UI —Ç–µ—Å—Ç: ${testFile}`);
        this.results.ui = result;
        break;
      }
    }

    if (!this.results.ui) {
      this.warning('‚ö†Ô∏è UI —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return this.results.ui;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateSummaryReport() {
    this.log('\nüìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–í–û–î–ù–û–ì–û –û–¢–ß–ï–¢–ê');
    
    const endTime = Date.now();
    const totalDuration = endTime - this.startTime;
    
    const report = {
      timestamp: new Date().toISOString(),
      duration: totalDuration,
      summary: {
        totalTests: Object.keys(this.results).length,
        successfulTests: 0,
        failedTests: 0,
        skippedTests: 0
      },
      details: {},
      recommendations: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Object.entries(this.results).forEach(([testType, result]) => {
      if (result) {
        if (result.success) {
          report.summary.successfulTests++;
          report.details[testType] = { status: 'PASSED', code: result.code };
        } else {
          report.summary.failedTests++;
          report.details[testType] = { status: 'FAILED', code: result.code };
        }
      } else {
        report.summary.skippedTests++;
        report.details[testType] = { status: 'SKIPPED' };
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (report.summary.failedTests > 0) {
      report.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
    }

    if (report.summary.skippedTests > 0) {
      report.recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã');
    }

    if (totalDuration > 300000) { // 5 –º–∏–Ω—É—Ç
      report.recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const reportFile = path.join(LOG_DIR, 'test_summary_report.json');
    fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
    
    this.log(`üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportFile}`);
    
    return report;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    this.startTime = Date.now();
    this.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...\n');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
      this.log('=== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í ===');
      const apiAvailable = await this.checkAPIAvailability();
      const frontendAvailable = await this.checkFrontendAvailability();

      if (!apiAvailable) {
        this.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000');
        this.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥: cd backend && npm start');
        return;
      }

      if (!frontendAvailable) {
        this.warning('‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
        this.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: cd frontend && npm start');
      }

      // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      const testPromises = [
        this.runMultiUserTests(),
        this.runPerformanceTests(),
        this.runSecurityTests(),
        this.runUITests()
      ];

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
      await Promise.all(testPromises);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.log('\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===');
      const report = this.generateSummaryReport();

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.log('\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      this.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      this.log(`   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${report.summary.totalTests}`);
      this.log(`   - –£—Å–ø–µ—à–Ω–æ: ${report.summary.successfulTests}`);
      this.log(`   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${report.summary.failedTests}`);
      this.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${report.summary.skippedTests}`);
      this.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(totalDuration / 1000).toFixed(1)} —Å–µ–∫—É–Ω–¥`);

      if (report.recommendations.length > 0) {
        this.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`);
        report.recommendations.forEach(rec => this.log(`   - ${rec}`));
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
      this.saveLogs('all_tests.log');

    } catch (error) {
      this.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${error.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
async function runSpecificTest(testType) {
  const runner = new TestRunner();
  
  switch (testType) {
    case 'multiuser':
      await runner.runMultiUserTests();
      break;
    case 'performance':
      await runner.runPerformanceTests();
      break;
    case 'security':
      await runner.runSecurityTests();
      break;
    case 'ui':
      await runner.runUITests();
      break;
    default:
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: multiuser, performance, security, ui');
      process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    await runSpecificTest(args[0]);
  } else {
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    const runner = new TestRunner();
    await runner.runAllTests();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = TestRunner; 