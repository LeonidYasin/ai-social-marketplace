const fetch = require('node-fetch');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

class PostTest {
  constructor() {
    this.baseUrl = 'https://social-marketplace-api.onrender.com';
    this.token = null;
    this.userId = null;
  }

  async testAuth() {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
      const guestResponse = await fetch(`${this.baseUrl}/api/auth/guest`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (guestResponse.ok) {
        const guestData = await guestResponse.json();
        this.token = guestData.token;
        this.userId = guestData.user.id;
        console.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', guestData.user.username);
        console.log('üîë –¢–æ–∫–µ–Ω:', this.token.substring(0, 20) + '...');
        return true;
      }

      // –ï—Å–ª–∏ –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('‚ö†Ô∏è –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const registerResponse = await fetch(`${this.baseUrl}/api/users/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: `testuser_${Date.now()}`,
          email: `test${Date.now()}@example.com`,
          password: 'testpass123',
          first_name: 'Test',
          last_name: 'User'
        })
      });

      if (registerResponse.ok) {
        const registerData = await registerResponse.json();
        this.token = registerData.token;
        this.userId = registerData.user.id;
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', registerData.user.username);
        console.log('üîë –¢–æ–∫–µ–Ω:', this.token.substring(0, 20) + '...');
        return true;
      }

      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      return false;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      return false;
    }
  }

  async testUpload() {
    console.log('\nüì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    
    try {
      // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const testImagePath = path.join(__dirname, 'test-image.png');
      const testImageData = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
      fs.writeFileSync(testImagePath, testImageData);

      const formData = new FormData();
      formData.append('file', fs.createReadStream(testImagePath), {
        filename: 'test-image.png',
        contentType: 'image/png'
      });

      const uploadResponse = await fetch(`${this.baseUrl}/api/upload`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`
        },
        body: formData
      });

      if (uploadResponse.ok) {
        const uploadData = await uploadResponse.json();
        console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('üìÅ –ò–º—è —Ñ–∞–π–ª–∞:', uploadData.filename);
        console.log('üîó URL:', uploadData.url);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(testImagePath);
        
        return uploadData.filename;
      } else {
        const errorData = await uploadResponse.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', errorData);
        return null;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error.message);
      return null;
    }
  }

  async testCreatePost(filename) {
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...');
    
    try {
      const postData = {
        content: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π',
        media_urls: filename ? [filename] : [],
        media_type: filename ? 'image' : null,
        background_color: '#f0f0f0',
        privacy: 'public',
        section: 'general',
        location: null,
        is_ai_generated: false,
        ai_prompt: null
      };

      const postResponse = await fetch(`${this.baseUrl}/api/posts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.token}`
        },
        body: JSON.stringify(postData)
      });

      if (postResponse.ok) {
        const postData = await postResponse.json();
        console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('üìÑ ID –ø–æ—Å—Ç–∞:', postData.post?.id);
        console.log('üñºÔ∏è –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:', postData.post?.media_urls);
        return postData.post?.id;
      } else {
        const errorData = await postResponse.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', errorData);
        return null;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error.message);
      return null;
    }
  }

  async testGetPosts() {
    console.log('\nüìñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...');
    
    try {
      const postsResponse = await fetch(`${this.baseUrl}/api/posts`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`
        }
      });

      if (postsResponse.ok) {
        const postsData = await postsResponse.json();
        console.log('‚úÖ –ü–æ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:', postsData.posts?.length || 0);
        
        if (postsData.posts && postsData.posts.length > 0) {
          const lastPost = postsData.posts[0];
          console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:', {
            id: lastPost.id,
            content: lastPost.content?.substring(0, 50) + '...',
            media_urls: lastPost.media_urls,
            user: lastPost.username
          });
        }
        
        return postsData.posts;
      } else {
        const errorData = await postsResponse.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', errorData);
        return null;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:', error.message);
      return null;
    }
  }

  async runFullTest() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤\n');
    
    // –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const authSuccess = await this.testAuth();
    if (!authSuccess) {
      console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }

    // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    const filename = await this.testUpload();
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    const postId = await this.testCreatePost(filename);
    
    // –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    await this.testGetPosts();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');
    
    if (postId) {
      console.log(`\nüîó –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:`);
      console.log(`1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞ https://social-marketplace-frontend.onrender.com`);
      console.log(`2. –ù–∞–π–¥–∏—Ç–µ –ø–æ—Å—Ç —Å ID: ${postId}`);
      console.log(`3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
const test = new PostTest();
test.runFullTest().catch(console.error); 