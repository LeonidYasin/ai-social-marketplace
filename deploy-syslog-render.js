const fs = require('fs');
const path = require('path');

console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render —Å syslog —Å–µ—Ä–≤–µ—Ä–æ–º...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'backend/src/utils/syslogServer.js',
  'backend/src/routes/syslog.js',
  'render-blueprint.yaml',
  'SYSLOG_RENDER_SETUP.md'
];

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...');
let allFilesExist = true;

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
const packagePath = 'backend/package.json';
if (fs.existsSync(packagePath)) {
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  if (packageJson.dependencies.dgram) {
    console.log('‚úÖ dgram –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞');
  } else {
    console.log('‚ùå dgram –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('–î–æ–±–∞–≤—å—Ç–µ "dgram": "^1.0.1" –≤ dependencies');
  }
} else {
  console.log('‚ùå backend/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –¥–µ–ø–ª–æ—é
console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –¥–µ–ø–ª–æ—é...');

const deployInstructions = `
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–µ–ø–ª–æ—é –Ω–∞ Render

## 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã:

\`\`\`bash
git add .
git commit -m "Add syslog server for Render deployment"
git push origin main
\`\`\`

## 2. –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Blueprint (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

1. –ó–∞–π–¥–∏—Ç–µ –≤ [Render Dashboard](https://dashboard.render.com)
2. –ù–∞–∂–º–∏—Ç–µ "New" ‚Üí "Blueprint"
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª \`render-blueprint.yaml\`
5. –ù–∞–∂–º–∏—Ç–µ "Apply"

## 3. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞

–ï—Å–ª–∏ Blueprint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:

1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Web Service
2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:

\`\`\`env
NODE_ENV=production
ENABLE_SYSLOG=true
SYSLOG_PORT=514
SYSLOG_HOST=0.0.0.0
RENDER_SYSLOG_ENABLED=true
RENDER_SYSLOG_ENDPOINT=localhost:514
ADMIN_PASSWORD=your-secure-password
JWT_SECRET=your-jwt-secret
SESSION_SECRET=your-session-secret
\`\`\`

4. Build Command: \`cd backend && npm install\`
5. Start Command: \`cd backend && npm start\`

## 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ syslog –≤ Render

–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è:

1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "Logs"
3. –í–∫–ª—é—á–∏—Ç–µ "Log Streaming"
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:
   - Protocol: UDP
   - Host: –≤–∞—à-–¥–æ–º–µ–Ω.onrender.com
   - Port: 514

## 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:

\`\`\`bash
# –°—Ç–∞—Ç—É—Å syslog —Å–µ—Ä–≤–µ—Ä–∞
curl https://your-app.onrender.com/api/syslog/status

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
curl https://your-app.onrender.com/api/syslog/config

# –õ–æ–≥–∏
curl https://your-app.onrender.com/api/syslog/logs

# Render –ª–æ–≥–∏
curl https://your-app.onrender.com/api/syslog/render-logs
\`\`\`

## 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:

\`\`\`javascript
const axios = require('axios');

async function monitorSyslog() {
  try {
    const response = await axios.get('https://your-app.onrender.com/api/syslog/status');
    console.log('Syslog status:', response.data.data.isRunning ? '‚úÖ Running' : '‚ùå Stopped');
  } catch (error) {
    console.error('‚ùå Monitoring failed:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(monitorSyslog, 5 * 60 * 1000);
\`\`\`

## 7. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: \`curl https://your-app.onrender.com/api/logs\`

### –õ–æ–≥–∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ syslog –≤ Render Dashboard
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª UDP
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞

### –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
- –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ API
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤

## 8. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ API endpoints
- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤
- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TLS –≤ production

## 9. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –ª–æ–≥–æ–≤ –æ—Ç Render
‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω–æ–≤
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ª–æ–≥–∞–º–∏
‚úÖ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Blueprint

## 10. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
2. –î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤
4. –î–æ–±–∞–≤—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è API
5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
`;

fs.writeFileSync('DEPLOY_INSTRUCTIONS.md', deployInstructions);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª DEPLOY_INSTRUCTIONS.md');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testScript = `
const axios = require('axios');

async function testSyslogDeployment() {
  const baseUrl = process.argv[2] || 'http://localhost:8000';
  
  console.log(\`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ syslog —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ \${baseUrl}\`);
  
  const endpoints = [
    '/api/syslog/status',
    '/api/syslog/config',
    '/api/syslog/logs?limit=10',
    '/api/syslog/render-logs?limit=10'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await axios.get(\`\${baseUrl}\${endpoint}\`);
      console.log(\`‚úÖ \${endpoint}: \${response.status}\`);
      
      if (endpoint.includes('status') && response.data.data) {
        console.log(\`   –°–µ—Ä–≤–µ—Ä: \${response.data.data.isRunning ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\`);
        console.log(\`   –ü–æ—Ä—Ç: \${response.data.data.port}\`);
      }
    } catch (error) {
      console.log(\`‚ùå \${endpoint}: \${error.response?.status || error.message}\`);
    }
  }
}

testSyslogDeployment();
`;

fs.writeFileSync('test-syslog-deployment.js', testScript);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª test-syslog-deployment.js');

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitorScript = `
const axios = require('axios');

class SyslogMonitor {
  constructor(baseUrl, interval = 5 * 60 * 1000) {
    this.baseUrl = baseUrl;
    this.interval = interval;
    this.isRunning = false;
  }
  
  async checkHealth() {
    try {
      const response = await axios.get(\`\${this.baseUrl}/api/syslog/status\`);
      const status = response.data.data;
      
      const timestamp = new Date().toISOString();
      
      if (status.isRunning) {
        console.log(\`[\${timestamp}] ‚úÖ Syslog —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É \${status.port}\`);
      } else {
        console.log(\`[\${timestamp}] ‚ùå Syslog —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\`);
      }
      
      return status.isRunning;
    } catch (error) {
      const timestamp = new Date().toISOString();
      console.log(\`[\${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: \${error.message}\`);
      return false;
    }
  }
  
  async getLogs(limit = 10) {
    try {
      const response = await axios.get(\`\${this.baseUrl}/api/syslog/logs?limit=\${limit}\`);
      return response.data.data.logs;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
      return [];
    }
  }
  
  start() {
    if (this.isRunning) {
      console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }
    
    this.isRunning = true;
    console.log(\`üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ syslog —Å–µ—Ä–≤–µ—Ä–∞ (\${this.baseUrl})\`);
    console.log(\`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: \${this.interval / 1000} —Å–µ–∫—É–Ω–¥\`);
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.checkHealth();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.intervalId = setInterval(() => {
      this.checkHealth();
    }, this.interval);
  }
  
  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.isRunning = false;
      console.log('üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const baseUrl = process.argv[2] || 'http://localhost:8000';
const monitor = new SyslogMonitor(baseUrl);

monitor.start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  monitor.stop();
  process.exit(0);
});
`;

fs.writeFileSync('syslog-monitor.js', monitorScript);
console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª syslog-monitor.js');

console.log('\nüéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª DEPLOY_INSTRUCTIONS.md');
console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-syslog-deployment.js [URL]');
console.log('3. –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: node syslog-monitor.js [URL]');
console.log('4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render');
console.log('\nüîó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: SYSLOG_RENDER_SETUP.md'); 