const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:8000';

async function testPlaceholderCache() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n');

  try {
    // –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    console.log('üì∏ –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)');
    const start1 = Date.now();
    const response1 = await fetch(`${BASE_URL}/api/placeholder/150/150/cccccc/000000/Test%20Image`);
    const end1 = Date.now();
    
    if (response1.ok) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response1.status}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${end1 - start1}ms`);
      console.log(`üìä –ö—ç—à: ${response1.headers.get('X-Cache')}`);
      console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${response1.headers.get('Content-Length')} –±–∞–π—Ç\n`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response1.status} - ${response1.statusText}\n`);
      return;
    }

    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞)
    console.log('üîÑ –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à)');
    const start2 = Date.now();
    const response2 = await fetch(`${BASE_URL}/api/placeholder/150/150/cccccc/000000/Test%20Image`);
    const end2 = Date.now();
    
    if (response2.ok) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response2.status}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${end2 - start2}ms`);
      console.log(`üìä –ö—ç—à: ${response2.headers.get('X-Cache')}`);
      console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${response2.headers.get('Content-Length')} –±–∞–π—Ç\n`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response2.status} - ${response2.statusText}\n`);
      return;
    }

    // –¢–µ—Å—Ç 3: –î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä (–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    console.log('üÜï –¢–µ—Å—Ç 3: –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)');
    const start3 = Date.now();
    const response3 = await fetch(`${BASE_URL}/api/placeholder/300/200/eeeeee/333333/Another%20Image`);
    const end3 = Date.now();
    
    if (response3.ok) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response3.status}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${end3 - start3}ms`);
      console.log(`üìä –ö—ç—à: ${response3.headers.get('X-Cache')}`);
      console.log(`üì¶ –†–∞–∑–º–µ—Ä: ${response3.headers.get('Content-Length')} –±–∞–π—Ç\n`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response3.status} - ${response3.statusText}\n`);
      return;
    }

    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    console.log('üìä –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞');
    const statsResponse = await fetch(`${BASE_URL}/api/placeholder/cache/stats`);
    
    if (statsResponse.ok) {
      const stats = await statsResponse.json();
      console.log(`‚úÖ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: ${stats.totalFiles}`);
      console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${stats.totalSizeMB} MB`);
      console.log(`üíæ –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö: ${stats.totalSizeBytes}\n`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${statsResponse.status}\n`);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ
    console.log('üìÅ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ');
    const cacheDir = path.join(__dirname, 'backend/cache/placeholders');
    
    if (fs.existsSync(cacheDir)) {
      const files = fs.readdirSync(cacheDir);
      const pngFiles = files.filter(file => file.endsWith('.png'));
      
      console.log(`‚úÖ –ü–∞–ø–∫–∞ –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`üìÑ PNG —Ñ–∞–π–ª–æ–≤: ${pngFiles.length}`);
      
      if (pngFiles.length > 0) {
        console.log('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:');
        pngFiles.forEach(file => {
          const filePath = path.join(cacheDir, file);
          const stats = fs.statSync(filePath);
          console.log(`   - ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
        });
      }
    } else {
      console.log(`‚ùå –ü–∞–ø–∫–∞ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${cacheDir}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start –≤ –ø–∞–ø–∫–µ backend');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPlaceholderCache(); 