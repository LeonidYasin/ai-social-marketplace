const puppeteer = require('puppeteer');
const tesseract = require('node-tesseract-ocr');
const FinalStateAnalyzer = require('./final_state_analyzer');

class FinalOCRBot {
    constructor() {
        this.browser = null;
        this.page = null;
        this.analyzer = new FinalStateAnalyzer();
        this.baseUrl = 'http://localhost:3000';
        this.screenshotsDir = 'test_screenshots/final_bot';
        this.logs = [];
        this.errors = [];
        this.lastScreenshotPath = null;
        
        // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        this.stateDocumentation = {
            'guest_mode': {
                name: '–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º',
                confidence: 0,
                indicators: ['–û–Ω–ª–∞–π–Ω', '–ù—Ä–∞–≤–∏—Ç—Å—è', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?'],
                actions: ['create_post', 'like_post', 'send_message', 'open_menu'],
                elements: {
                    'create_post_field': '–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?',
                    'like_button': '–ù—Ä–∞–≤–∏—Ç—Å—è',
                    'send_button': '–û–¢–ü–†–ê–í–ò–¢–¨',
                    'online_status': '–û–Ω–ª–∞–π–Ω',
                    'search_icon': 'SearchIcon',
                    'chat_icon': 'SmartToyIcon'
                }
            },
            'create_post': {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                confidence: 0,
                indicators: ['–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?', '–û–¢–ü–†–ê–í–ò–¢–¨'],
                actions: ['write_post', 'publish_post', 'cancel_post'],
                elements: {
                    'post_field': '–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?',
                    'send_button': '–û–¢–ü–†–ê–í–ò–¢–¨'
                }
            },
            'chat': {
                name: '–ß–∞—Ç',
                confidence: 0,
                indicators: ['AI-—á–∞—Ç—ã', '–ß–∞—Ç—ã', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'],
                actions: ['send_message', 'close_chat'],
                elements: {
                    'greeting': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                    'chat_title': 'AI-—á–∞—Ç—ã'
                }
            }
        };
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ OCR –±–æ—Ç–∞...');
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: { width: 1920, height: 1080 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        this.page = await this.browser.newPage();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        this.createDirectories();
        
        console.log('‚úÖ OCR –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    createDirectories() {
        const dirs = [
            this.screenshotsDir,
            `${this.screenshotsDir}/errors`,
            `${this.screenshotsDir}/success`
        ];
        
        dirs.forEach(dir => {
            if (!require('fs').existsSync(dir)) {
                require('fs').mkdirSync(dir, { recursive: true });
            }
        });
    }

    async pause(ms = 2000) {
        await new Promise(resolve => setTimeout(resolve, ms));
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logEntry = { timestamp, type, message };
        this.logs.push(logEntry);
        console.log(`[${type.toUpperCase()}] ${message}`);
    }

    async takeScreenshot(filename, description = '') {
        const filepath = `${this.screenshotsDir}/${filename}`;
        await this.page.screenshot({ 
            path: filepath, 
            fullPage: true 
        });
        this.log(`üì∏ ${description} -> ${filepath}`);
        this.lastScreenshotPath = filepath;
        return filepath;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showWindowsNotification(title, message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
        const tempFile = `${this.screenshotsDir}/notification_${Date.now()}.ps1`;
        const psScript = `
Add-Type -AssemblyName PresentationFramework
[System.Windows.MessageBox]::Show('${message.replace(/'/g, "''")}', '${title.replace(/'/g, "''")}', 'OK', 'Information')
`;
        
        try {
            require('fs').writeFileSync(tempFile, psScript, 'utf8');
            const { exec } = require('child_process');
            exec(`powershell -ExecutionPolicy Bypass -File "${tempFile}"`, (error, stdout, stderr) => {
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try {
                    require('fs').unlinkSync(tempFile);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                }
                
                if (error) {
                    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows:', error.message);
                }
            });
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    addError(description, error = null) {
        const errorInfo = {
            description,
            screenshotPath: this.lastScreenshotPath,
            timestamp: new Date().toISOString(),
            stack: error ? error.stack : null
        };
        
        this.errors.push(errorInfo);
        this.log(`‚ùå –û—à–∏–±–∫–∞: ${description}`, 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationTitle = `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ #${this.errors.length}`;
        const notificationMessage = `${description}\n\n–°–∫—Ä–∏–Ω—à–æ—Ç: ${this.lastScreenshotPath || '–ù–µ —Å–æ–∑–¥–∞–Ω'}`;
        this.showWindowsNotification(notificationTitle, notificationMessage);
    }

    async analyzeCurrentState() {
        try {
            this.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            const state = await this.analyzer.analyzeState(this.page);
            
            this.log(`üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.name} (${Math.round(state.confidence * 100)}%)`);
            
            if (state.confidence < 0.7) {
                this.log(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${state.confidence}`, 'warning');
            }
            
            return state;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`, 'error');
            this.addError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', error);
            return {
                name: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
                confidence: 0,
                actions: ['check_connection']
            };
        }
    }

    async findElementByText(searchText, timeout = 10000) {
        try {
            this.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: "${searchText}"`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º page.evaluate –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
            const elementInfo = await this.page.evaluate((text) => {
                const elements = document.querySelectorAll('button, a, span, div, p, h1, h2, h3, h4, h5, h6');
                for (const element of elements) {
                    if (element.textContent && element.textContent.includes(text)) {
                        const rect = element.getBoundingClientRect();
                        const isVisible = !!(element.offsetParent || rect.width > 0 || rect.height > 0);
                        
                        if (isVisible) {
                            return {
                                text: element.textContent.trim(),
                                x: rect.x + rect.width / 2,
                                y: rect.y + rect.height / 2,
                                tagName: element.tagName.toLowerCase(),
                                className: element.className
                            };
                        }
                    }
                }
                return null;
            }, searchText);
            
            if (elementInfo) {
                this.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: "${elementInfo.text}"`);
                return {
                    element: null, // –ù–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å handle –∏–∑ evaluate
                    text: elementInfo.text,
                    x: elementInfo.x,
                    y: elementInfo.y,
                    confidence: 0.95,
                    tagName: elementInfo.tagName,
                    className: elementInfo.className
                };
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const elements = await this.page.$$('button, a, span, div, p, h1, h2, h3, h4, h5, h6');
            
            for (const element of elements) {
                try {
                    const text = await element.evaluate(el => el.textContent?.trim());
                    if (text && text.includes(searchText)) {
                        const isVisible = await element.isVisible();
                        if (isVisible) {
                            const box = await element.boundingBox();
                            this.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ CSS: "${text}"`);
                            return {
                                element: element,
                                text: text,
                                x: box.x + box.width / 2,
                                y: box.y + box.height / 2,
                                confidence: 0.9
                            };
                        }
                    }
                } catch (error) {
                    continue;
                }
            }
            
            this.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${searchText}"`, 'warning');
            return null;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: ${error.message}`, 'error');
            this.addError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ "${searchText}"`, error);
            return null;
        }
    }

    async findElementByTestId(testId, timeout = 10000) {
        try {
            this.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ testId: "${testId}"`);
            
            const element = await this.page.$(`[data-testid="${testId}"]`);
            if (element) {
                const isVisible = await element.isVisible();
                if (isVisible) {
                    const box = await element.boundingBox();
                    this.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: "${testId}"`);
                    return {
                        element: element,
                        testId: testId,
                        x: box.x + box.width / 2,
                        y: box.y + box.height / 2,
                        confidence: 0.9
                    };
                }
            }
            
            this.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${testId}"`, 'warning');
            return null;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞: ${error.message}`, 'error');
            return null;
        }
    }

    async clickElement(element, description = '') {
        try {
            this.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: ${description}`);
            
            if (element.element) {
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å handle —ç–ª–µ–º–µ–Ω—Ç–∞
                await element.element.click();
            } else if (element.x && element.y) {
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                await this.page.mouse.click(element.x, element.y);
            } else {
                throw new Error('–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–ª–∏–∫–∞');
            }
            
            await this.pause(2000);
            this.log(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${description}`);
            return true;
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: ${error.message}`, 'error');
            return false;
        }
    }

    async typeText(text, description = '') {
        try {
            this.log(`‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: "${text}" - ${description}`);
            await this.page.keyboard.type(text);
            await this.pause(1000);
            this.log(`‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω: "${text}"`);
            return true;
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: ${error.message}`, 'error');
            return false;
        }
    }

    async executeAction(action, state) {
        try {
            this.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ${action}`);
            
            switch (action) {
                case 'create_post':
                    return await this.createPost();
                    
                case 'like_post':
                    return await this.likePost();
                    
                case 'send_message':
                    return await this.sendMessage();
                    
                case 'open_menu':
                    return await this.openMenu();
                    
                case 'write_post':
                    return await this.writePost();
                    
                case 'publish_post':
                    return await this.publishPost();
                    
                default:
                    this.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`, 'error');
                    return false;
            }
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`, 'error');
            return false;
        }
    }

    async createPost() {
        try {
            this.log('‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...');
            
            // –ò—â–µ–º –ø–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            const postField = await this.findElementByText('–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?');
            if (!postField) {
                this.log('‚ùå –ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
                return false;
            }
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ
            await this.clickElement(postField, '–ø–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            const postText = `–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç OCR –±–æ—Ç–∞ - ${new Date().toLocaleTimeString()}`;
            await this.typeText(postText, '—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            const sendButton = await this.findElementByText('–û–¢–ü–†–ê–í–ò–¢–¨');
            if (!sendButton) {
                this.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
                return false;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            await this.clickElement(sendButton, '–∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            
            this.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            return true;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: ${error.message}`, 'error');
            return false;
        }
    }

    async likePost() {
        try {
            this.log('üëç –õ–∞–π–∫ –ø–æ—Å—Ç–∞...');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ù—Ä–∞–≤–∏—Ç—Å—è" –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ
            const likeButton = await this.findElementByText('–ù—Ä–∞–≤–∏—Ç—Å—è');
            if (!likeButton) {
                this.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
                return false;
            }
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ª–∞–π–∫
            await this.clickElement(likeButton, '–∫–Ω–æ–ø–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è"');
            
            this.log('‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω');
            return true;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –ø–æ—Å—Ç–∞: ${error.message}`, 'error');
            return false;
        }
    }

    async sendMessage() {
        try {
            this.log('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —á–∞—Ç–∞
            const chatButton = await this.findElementByTestId('SmartToyIcon');
            if (!chatButton) {
                this.log('‚ùå –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
                return false;
            }
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            await this.clickElement(chatButton, '–∫–Ω–æ–ø–∫–∞ —á–∞—Ç–∞');
            
            // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
            await this.pause(2000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const state = await this.analyzeCurrentState();
            if (state.name === '–ß–∞—Ç') {
                this.log('‚úÖ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else {
                this.log('‚ùå –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è', 'error');
                return false;
            }
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`, 'error');
            return false;
        }
    }

    async openMenu() {
        try {
            this.log('üìã –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é...');
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
            const menuSelectors = [
                'MenuIcon',
                'ListAltIcon',
                'SettingsIcon',
                'MoreVertIcon',
                'AppsIcon',
                'DashboardIcon'
            ];
            
            for (const selector of menuSelectors) {
                const menuButton = await this.findElementByTestId(selector);
                if (menuButton) {
                    await this.clickElement(menuButton, `–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é (${selector})`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ –º–µ–Ω—é
                    await this.pause(1000);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
                    const hasMenuItems = await this.page.evaluate(() => {
                        const menuTexts = ['–û–±–∑–æ—Ä', '–¢–æ–ø –ø–æ—Å—Ç—ã', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', '–ù–∞–π—Ç–∏', '–§–∏–ª—å—Ç—Ä—ã'];
                        return menuTexts.some(text => document.body.innerText.includes(text));
                    });
                    
                    if (hasMenuItems) {
                        this.log('‚úÖ –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ —É—Å–ø–µ—à–Ω–æ');
                        return true;
                    }
                }
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            const menuButton = await this.findElementByText('–ú–µ–Ω—é');
            if (menuButton) {
                await this.clickElement(menuButton, '–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é (–ø–æ —Ç–µ–∫—Å—Ç—É)');
                await this.pause(1000);
                return true;
            }
            
            this.log('‚ùå –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
            return false;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é: ${error.message}`, 'error');
            return false;
        }
    }

    async writePost() {
        try {
            this.log('‚å®Ô∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...');
            
            const postText = `–ü–æ—Å—Ç –æ—Ç OCR –±–æ—Ç–∞ - ${new Date().toLocaleTimeString()}`;
            await this.typeText(postText, '—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞');
            
            this.log('‚úÖ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω');
            return true;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: ${error.message}`, 'error');
            return false;
        }
    }

    async publishPost() {
        try {
            this.log('üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...');
            
            const sendButton = await this.findElementByText('–û–¢–ü–†–ê–í–ò–¢–¨');
            if (!sendButton) {
                this.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
                return false;
            }
            
            await this.clickElement(sendButton, '–∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            
            this.log('‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω');
            return true;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ${error.message}`, 'error');
            return false;
        }
    }

    async runScenario(scenario) {
        try {
            this.log(`üé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await this.page.goto(this.baseUrl);
            await this.pause(3000);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const initialState = await this.analyzeCurrentState();
            this.log(`üì± –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialState.name}`);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            for (let i = 0; i < scenario.steps.length; i++) {
                const step = scenario.steps[i];
                this.log(`üìã –®–∞–≥ ${i + 1}: ${step.description}`);
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
                const state = await this.analyzeCurrentState();
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                const success = await this.executeAction(step.action, state);
                
                if (!success) {
                    this.log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${i + 1}`, 'error');
                    await this.takeScreenshot(`error_step_${i + 1}.png`, `–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${i + 1}`);
                    return false;
                }
                
                // –ñ–¥–µ–º –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
                await this.pause(step.delay || 2000);
            }
            
            this.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            await this.takeScreenshot('success_scenario.png', '–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è');
            return true;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${error.message}`, 'error');
            await this.takeScreenshot('error_scenario.png', '–û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è');
            return false;
        }
    }

    async runMultiuserTest() {
        try {
            this.log('üë• –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...');
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const browser2 = await puppeteer.launch({
                headless: false,
                defaultViewport: { width: 1920, height: 1080 }
            });
            const page2 = await browser2.newPage();
            
            try {
                // –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
                this.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
                await this.createPost();
                await this.takeScreenshot('user1_post_created.png', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 —Å–æ–∑–¥–∞–ª –ø–æ—Å—Ç');
                
                // –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç
                this.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
                await page2.goto(this.baseUrl);
                await this.pause(3000);
                
                await page2.screenshot({ 
                    path: `${this.screenshotsDir}/user2_initial.png`,
                    fullPage: true 
                });
                this.log('üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                
                // –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
                this.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –õ–∞–π–∫ –ø–æ—Å—Ç–∞');
                const likeButton = await page2.evaluateHandle(() => {
                    const elements = document.querySelectorAll('button');
                    for (const element of elements) {
                        if (element.textContent && element.textContent.includes('–ù—Ä–∞–≤–∏—Ç—Å—è')) {
                            return element;
                        }
                    }
                    return null;
                });
                
                if (likeButton) {
                    await likeButton.click();
                    await this.pause(1000);
                    this.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫');
                }
                
                await page2.screenshot({ 
                    path: `${this.screenshotsDir}/user2_liked.png`,
                    fullPage: true 
                });
                this.log('üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: –ü–æ—Å–ª–µ –ª–∞–π–∫–∞');
                
                this.log('‚úÖ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
                return true;
                
            } finally {
                await browser2.close();
            }
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–µ: ${error.message}`, 'error');
            return false;
        }
    }

    async generateReport() {
        try {
            this.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
            
            const report = {
                timestamp: new Date().toISOString(),
                logs: this.logs,
                summary: {
                    totalActions: this.logs.filter(log => log.type === 'info').length,
                    errors: this.logs.filter(log => log.type === 'error').length,
                    warnings: this.logs.filter(log => log.type === 'warning').length,
                    success: this.logs.filter(log => log.message.includes('‚úÖ')).length
                }
            };
            
            const reportPath = `${this.screenshotsDir}/test_report.json`;
            require('fs').writeFileSync(reportPath, JSON.stringify(report, null, 2));
            
            this.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
            return report;
            
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`, 'error');
            return null;
        }
    }

    async cleanup() {
        try {
            if (this.browser) {
                await this.browser.close();
            }
            this.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${error.message}`, 'error');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    handleFinalErrors() {
        if (this.errors.length > 0) {
            console.log('\n=== –û–®–ò–ë–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
            console.log(`–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${this.errors.length}`);
            
            this.errors.forEach((error, index) => {
                console.log(`\n–û—à–∏–±–∫–∞ ${index + 1}:`);
                console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${error.description}`);
                console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç: ${error.screenshotPath}`);
                console.log(`–í—Ä–µ–º—è: ${error.timestamp}`);
                if (error.stack) {
                    console.log(`–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ${error.stack}`);
                }
                console.log('---');
            });
            
            console.log('\n=== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê –û–ë –û–®–ò–ë–ö–ê–• ===');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const finalTitle = `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ - ${this.errors.length} –æ—à–∏–±–æ–∫`;
            const finalMessage = `–ù–∞–π–¥–µ–Ω–æ ${this.errors.length} –æ—à–∏–±–æ–∫.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${this.screenshotsDir}`;
            this.showWindowsNotification(finalTitle, finalMessage);
            
            return false;
        }
        
        return true;
    }
}

module.exports = FinalOCRBot; 