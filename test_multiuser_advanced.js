// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –¥–ª—è Node.js v22+
// const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');
const { OCRMasterBot } = require('./ocr_master_bot');
const { 
  complexMultiuserScenario, 
  multiuserChatScenario, 
  fullInteractionScenario, 
  notificationTestScenario,
  multiuserScenarios 
} = require('./TEST_SCENARIOS');

const API_BASE = 'http://localhost:8000/api';
const LOG_DIR = './test_logs';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
class Logger {
  constructor(filename) {
    this.filename = path.join(LOG_DIR, filename);
    this.logs = [];
  }

  log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type}] ${message}`;
    console.log(logEntry);
    this.logs.push(logEntry);
  }

  error(message) {
    this.log(message, 'ERROR');
  }

  success(message) {
    this.log(message, 'SUCCESS');
  }

  warning(message) {
    this.log(message, 'WARNING');
  }

  save() {
    fs.writeFileSync(this.filename, this.logs.join('\n'));
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
const testUsers = [
  {
    username: 'admin_user',
    email: 'admin@test.com',
    password: 'admin123',
    first_name: '–ê–¥–º–∏–Ω',
    last_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
    role: 'admin'
  },
  {
    username: 'moderator_user',
    email: 'moderator@test.com',
    password: 'mod123',
    first_name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
    last_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
    role: 'moderator'
  },
  {
    username: 'regular_user1',
    email: 'user1@test.com',
    password: 'user123',
    first_name: '–û–±—ã—á–Ω—ã–π',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1',
    role: 'user'
  },
  {
    username: 'regular_user2',
    email: 'user2@test.com',
    password: 'user123',
    first_name: '–û–±—ã—á–Ω—ã–π',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2',
    role: 'user'
  },
  {
    username: 'premium_user',
    email: 'premium@test.com',
    password: 'premium123',
    first_name: '–ü—Ä–µ–º–∏—É–º',
    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    role: 'premium'
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤
const testPosts = [
  {
    content: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1! üéâ',
    privacy: 'public',
    section: 'general'
  },
  {
    content: '–í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üì∏',
    privacy: 'public',
    section: 'general',
    media_urls: ['https://via.placeholder.com/300x200'],
    media_type: 'image'
  },
  {
    content: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–∑–µ–π üîí',
    privacy: 'friends',
    section: 'personal'
  },
  {
    content: '–ü–æ—Å—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π üì∞',
    privacy: 'public',
    section: 'news'
  },
  {
    content: '–ü–æ—Å—Ç —Å AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π ü§ñ',
    privacy: 'public',
    section: 'general',
    is_ai_generated: true,
    ai_prompt: '–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö'
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
const testComments = [
  '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! üëç',
  '–°–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º!',
  '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å ü§î',
  '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!',
  '–•–æ—Ç–µ–ª–æ—Å—å –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ...'
];

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
const testReactions = ['like', 'love', 'haha', 'wow', 'sad', 'angry'];

class AdvancedMultiUserTester {
  constructor() {
    this.bots = [];
    this.results = [];
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 1; i <= 3; i++) {
      const bot = new OCRMasterBot();
      
      await bot.init(1); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –æ–¥–Ω–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
      this.bots.push(bot);
      console.log(`‚úÖ –ë–æ—Ç ${i} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    }
  }

  async runScenario(bot, scenario, botIndex) {
    console.log(`\nüìã –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}" –¥–ª—è –±–æ—Ç–∞ ${botIndex + 1}`);
    
    try {
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥ OCRMasterBot
      const adaptedScenario = {
        name: scenario.name,
        description: scenario.name,
        steps: scenario.steps.map(step => ({
          action: 'navigate',
          url: scenario.startUrl,
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        })).concat(scenario.steps.map(step => ({
          action: step.action ? 'click' : 'wait',
          browserIndex: 0,
          text: step.expected,
          description: step.name,
          duration: step.wait || 1000
        })))
      };
      
      const result = await bot.runScenario(adaptedScenario);
      this.results.push({
        botIndex: botIndex + 1,
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        errors: result.errors
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –¥–ª—è –±–æ—Ç–∞ ${botIndex + 1} –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}" –¥–ª—è –±–æ—Ç–∞ ${botIndex + 1}:`, error);
      this.results.push({
        botIndex: botIndex + 1,
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runParallelScenarios() {
    console.log('\nüîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
    
    const scenarios = [
      { scenario: complexMultiuserScenario, botIndex: 0 },
      { scenario: multiuserChatScenario, botIndex: 1 },
      { scenario: notificationTestScenario, botIndex: 2 }
    ];

    const promises = scenarios.map(({ scenario, botIndex }) => 
      this.runScenario(this.bots[botIndex], scenario, botIndex)
    );

    await Promise.all(promises);
  }

  async runSequentialScenarios() {
    console.log('\nüìù –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
    
    for (let i = 0; i < this.bots.length; i++) {
      const bot = this.bots[i];
      const scenario = fullInteractionScenario;
      
      await this.runScenario(bot, scenario, i);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  async runInteractionTest() {
    console.log('\nüí¨ –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
    
    // –ë–æ—Ç 1 —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç
    await this.runScenario(this.bots[0], {
      name: 'Create Post for Interaction',
      startUrl: 'http://localhost:3000',
      steps: [
        {
          name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
          action: async (bot) => {
            await new Promise(resolve => setTimeout(resolve, 3000));
            await bot.clickText('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç');
            await new Promise(resolve => setTimeout(resolve, 1000));
            await bot.typeText('–ø–æ—Å—Ç', '–ü–æ—Å—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - ' + new Date().toLocaleString());
            await bot.clickText('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å');
            await new Promise(resolve => setTimeout(resolve, 2000));
          },
          expected: '–ü–æ—Å—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
          wait: 1000
        }
      ]
    }, 0);

    // –ë–æ—Ç 2 –ª–∞–π–∫–∞–µ—Ç –ø–æ—Å—Ç
    await this.runScenario(this.bots[1], {
      name: 'Like Post from Another User',
      startUrl: 'http://localhost:3000',
      steps: [
        {
          name: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ª–∞–π–∫',
          action: async (bot) => {
            await new Promise(resolve => setTimeout(resolve, 3000));
            await bot.clickText('–ù—Ä–∞–≤–∏—Ç—Å—è');
            await new Promise(resolve => setTimeout(resolve, 1000));
          },
          expected: '1',
          wait: 1000
        }
      ]
    }, 1);

    // –ë–æ—Ç 3 –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç
    await this.runScenario(this.bots[2], {
      name: 'Comment on Post from Another User',
      startUrl: 'http://localhost:3000',
      steps: [
        {
          name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
          action: async (bot) => {
            await new Promise(resolve => setTimeout(resolve, 3000));
            await bot.clickText('–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å');
            await new Promise(resolve => setTimeout(resolve, 1000));
            await bot.typeText('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await bot.clickText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å');
            await new Promise(resolve => setTimeout(resolve, 2000));
          },
          expected: '–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          wait: 1000
        }
      ]
    }, 2);
  }

  async runChatInteractionTest() {
    console.log('\nüí¨ –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∞—Ç–µ...');
    
    // –í—Å–µ –±–æ—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —á–∞—Ç
    const chatPromises = this.bots.map((bot, index) => 
      this.runScenario(bot, {
        name: 'Open Chat for Interaction',
        startUrl: 'http://localhost:3000',
        steps: [
          {
            name: '–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞',
            action: async (bot) => {
              await new Promise(resolve => setTimeout(resolve, 3000));
              await bot.clickText('–ß–∞—Ç');
              await new Promise(resolve => setTimeout(resolve, 2000));
            },
            expected: '–æ–Ω–ª–∞–π–Ω',
            wait: 1000
          }
        ]
      }, index)
    );

    await Promise.all(chatPromises);

    // –ë–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (let i = 0; i < this.bots.length; i++) {
      await this.runScenario(this.bots[i], {
        name: `Send Message from Bot ${i + 1}`,
        startUrl: 'http://localhost:3000',
        steps: [
          {
            name: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
            action: async (bot) => {
              await bot.clickText('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
              await new Promise(resolve => setTimeout(resolve, 1000));
              await bot.typeText('—Å–æ–æ–±—â–µ–Ω–∏–µ', `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ ${i + 1} - ${new Date().toLocaleString()}`);
              await bot.clickText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å');
              await new Promise(resolve => setTimeout(resolve, 2000));
            },
            expected: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ ${i + 1}`,
            wait: 1000
          }
        ]
      }, i);

      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  generateReport() {
    console.log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    console.log('=' .repeat(50));
    
    const totalTests = this.results.length;
    const successfulTests = this.results.filter(r => r.success).length;
    const failedTests = totalTests - successfulTests;
    
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedTests}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successfulTests / totalTests) * 100).toFixed(1)}%`);
    
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    this.results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${status} –ë–æ—Ç ${result.botIndex} - ${result.scenario}`);
      
      if (!result.success && result.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
      }
      
      if (result.steps) {
        const successfulSteps = result.steps.filter(s => s.success).length;
        console.log(`   –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successfulSteps}/${result.steps.length}`);
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests,
        successfulTests,
        failedTests,
        successRate: (successfulTests / totalTests) * 100
      },
      results: this.results
    };
    
    const fs = require('fs');
    const reportPath = './test_logs/advanced_multiuser_report.json';
    
    if (!fs.existsSync('./test_logs')) {
      fs.mkdirSync('./test_logs', { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    for (let i = 0; i < this.bots.length; i++) {
      if (this.bots[i]) {
        await this.bots[i].close();
        console.log(`‚úÖ –ë–æ—Ç ${i + 1} –æ—á–∏—â–µ–Ω`);
      }
    }
  }

  async runAllTests() {
    try {
      await this.initialize();
      
      console.log('\nüéØ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–´–• –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –¢–ï–°–¢–û–í');
      console.log('=' .repeat(60));
      
      // –¢–µ—Å—Ç 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      await this.runParallelScenarios();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      await this.runSequentialScenarios();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –¢–µ—Å—Ç 3: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      await this.runInteractionTest();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –¢–µ—Å—Ç 4: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ
      await this.runChatInteractionTest();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
      await this.cleanup();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new AdvancedMultiUserTester();
  await tester.runAllTests();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
async function checkServers() {
  const http = require('http');
  
  const checkServer = (port, name) => {
    return new Promise((resolve) => {
      const req = http.request(`http://localhost:${port}`, { method: 'HEAD' }, (res) => {
        console.log(`‚úÖ ${name} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(true);
      });
      
      req.on('error', () => {
        console.log(`‚ùå ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.setTimeout(3000, () => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${name} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.end();
    });
  };
  
  const backendOk = await checkServer(8000, 'Backend');
  const frontendOk = await checkServer(3000, 'Frontend');
  
  if (!backendOk || !frontendOk) {
    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.');
    console.log('Backend: npm start (–ø–æ—Ä—Ç 8000)');
    console.log('Frontend: npm start (–ø–æ—Ä—Ç 3000)');
    return false;
  }
  
  return true;
}

// –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä–≤–µ—Ä–æ–≤
if (require.main === module) {
  checkServers().then(serversOk => {
    if (serversOk) {
      console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
      main().catch(console.error);
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤');
      process.exit(1);
    }
  });
}

module.exports = { AdvancedMultiUserTester }; 