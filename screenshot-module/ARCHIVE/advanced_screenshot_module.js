const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { exec, execSync } = require('child_process');

class AdvancedScreenshotModule {
    constructor(options = {}) {
        this.browser = null;
        this.page = null;
        this.settings = {
            baseUrl: 'http://localhost:3000',
            outputDir: 'documentation_screenshots',
            viewport: { width: 1920, height: 1080 },
            headless: false,
            timeout: 10000,
            delay: 2000,
            tesseractPath: 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe',
            useOCR: true, // –í–∫–ª—é—á–∞–µ–º OCR –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            ...options
        };
        
        this.screenshots = [];
        this.errors = [];
        this.warnings = [];
        this.ocrCoordinates = null;
        this.currentState = null;
        
        // –õ–æ–≥–≥–µ—Ä
        this.logger = {
            info: (msg) => console.log(`[${new Date().toISOString()}] [INFO] ${msg}`),
            warn: (msg) => console.log(`[${new Date().toISOString()}] [WARN] ${msg}`),
            error: (msg) => console.log(`[${new Date().toISOString()}] [ERROR] ${msg}`),
            debug: (msg) => console.log(`[${new Date().toISOString()}] [DEBUG] ${msg}`)
        };
    }

    async checkTesseract() {
        try {
            this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Tesseract...');
            const version = execSync(`"${this.settings.tesseractPath}" --version`, { encoding: 'utf8', timeout: 5000 });
            this.logger.info(`‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: ${version.split('\n')[0]}`);
            return true;
        } catch (error) {
            const msg = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏: ${this.settings.tesseractPath}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ, –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n–°–∫–∞—á–∞–π—Ç–µ: https://github.com/tesseract-ocr/tesseract\n–î–æ–±–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ tesseract.exe –≤ PATH –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ settings.tesseractPath`;
            this.logger.error(msg);
            throw new Error(msg);
        }
    }

    async init() {
        this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
        await this.checkTesseract();
        
        this.browser = await puppeteer.launch({
            headless: this.settings.headless,
            defaultViewport: this.settings.viewport
        });
        
        this.page = await this.browser.newPage();
        await this.page.goto(this.settings.baseUrl, { waitUntil: 'networkidle2' });
        await this.delay(3000);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        await this.loadOCRCoordinates();
        
        this.logger.info('‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async loadOCRCoordinates() {
        try {
            // –ò—â–µ–º —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            const files = fs.readdirSync('.').filter(f => f.startsWith('ocr_coordinates_') && f.endsWith('.json'));
            if (files.length === 0) {
                throw new Error('–§–∞–π–ª —Å OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ debug_ocr_coordinates.js —Å–Ω–∞—á–∞–ª–∞.');
            }
            
            const latestFile = files.sort().pop();
            const data = JSON.parse(fs.readFileSync(latestFile, 'utf8'));
            this.ocrCoordinates = data.coordinates;
            
            this.logger.info(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.ocrCoordinates.length} OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ ${latestFile}`);
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
            throw error;
        }
    }

    async analyzeScreenState(description = '', folder = 'states', stepIndex = null) {
        this.logger.info(`üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${description}`);
        
        // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è OCR –≤ –ø–∞–ø–∫–µ temp
        const tempFolder = path.join(this.settings.outputDir, 'temp');
        if (!fs.existsSync(tempFolder)) {
            fs.mkdirSync(tempFolder, { recursive: true });
        }
        const tempScreenshotPath = path.join(tempFolder, 'ocr_temp.png');
        await this.page.screenshot({ path: tempScreenshotPath, fullPage: true });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º DOM
        const domInfo = await this.analyzeDOM();
        if (!domInfo) {
            const msg = '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: DOM-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã.';
            this.logger.error(msg);
            throw new Error(msg);
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É)
        const allText = await this.extractAllText(tempScreenshotPath);
        if (!allText || !Array.isArray(allText) || allText.length === 0) {
            const msg = '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: OCR-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Tesseract, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —è–∑—ã–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.';
            this.logger.error(msg);
            throw new Error(msg);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const state = this.determineState(allText, domInfo);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∞–≤—Ç–æ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
        const screenshotPath = await this.takeScreenshotAutoNamed(state, description, folder, stepIndex);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
            if (fs.existsSync(tempScreenshotPath)) {
                fs.unlinkSync(tempScreenshotPath);
            }
        } catch (error) {
            this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${error.message}`);
        }
        
        this.currentState = {
            state: state,
            allText: allText,
            domInfo: domInfo,
            screenshotPath: screenshotPath,
            timestamp: new Date().toISOString()
        };
        
        this.logger.info(`üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.name}`);
        this.logger.info(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}`);
        this.logger.info(`üîç –ü—Ä–∏–∑–Ω–∞–∫–∏: ${state.indicators.join(', ')}`);
        
        return this.currentState;
    }

    async analyzeDOM() {
        try {
            const domInfo = await this.page.evaluate(() => {
                const info = {
                    title: document.title,
                    url: window.location.href,
                    modals: [],
                    buttons: [],
                    forms: [],
                    loginElements: [],
                    mainAppElements: [],
                    guestButtons: [],
                    emailButtons: [],
                    postElements: [],
                    chatElements: [],
                    sidebarElements: []
                };

                // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.modals.push({
                            tagName: modal.tagName,
                            className: modal.className,
                            text: modal.textContent?.substring(0, 200),
                            visible: true,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const buttonText = btn.textContent?.trim() || '';
                        const ariaLabel = btn.getAttribute('aria-label') || '';
                        
                        info.buttons.push({
                            text: buttonText,
                            ariaLabel: ariaLabel,
                            className: btn.className,
                            visible: true,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
                        if (buttonText.toLowerCase().includes('–≥–æ—Å—Ç—å') || 
                            ariaLabel.toLowerCase().includes('–≥–æ—Å—Ç—å') ||
                            buttonText.toLowerCase().includes('guest')) {
                            info.guestButtons.push({
                                text: buttonText,
                                ariaLabel: ariaLabel,
                                className: btn.className,
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ email
                        if (buttonText.toLowerCase().includes('email') || 
                            ariaLabel.toLowerCase().includes('email') ||
                            buttonText.toLowerCase().includes('–ø–æ—á—Ç–∞')) {
                            info.emailButtons.push({
                                text: buttonText,
                                ariaLabel: ariaLabel,
                                className: btn.className,
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞
                const loginElements = document.querySelectorAll('[class*="login"], [class*="auth"], [class*="signin"]');
                loginElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.loginElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: true
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
                const postElements = document.querySelectorAll('[class*="post"], [class*="feed"], [class*="card"]');
                postElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.postElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: true
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
                const chatElements = document.querySelectorAll('[class*="chat"], [class*="message"], [class*="conversation"]');
                chatElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.chatElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: true
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π–¥–±–∞—Ä–∞
                const sidebarElements = document.querySelectorAll('[class*="sidebar"], [class*="nav"], [class*="menu"]');
                sidebarElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.sidebarElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: true
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const mainElements = document.querySelectorAll('[class*="app"], [class*="main"], [class*="content"]');
                mainElements.forEach(el => {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.mainAppElements.push({
                            tagName: el.tagName,
                            className: el.className,
                            text: el.textContent?.substring(0, 100),
                            visible: true
                        });
                    }
                });

                return info;
            });

            this.logger.debug(`üìä DOM –∞–Ω–∞–ª–∏–∑: ${domInfo.buttons.length} –∫–Ω–æ–ø–æ–∫, ${domInfo.modals.length} –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω`);
            return domInfo;

        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOM: ${error.message}`);
            throw error;
        }
    }

    async extractAllText(imagePath) {
        if (!this.settings.useOCR) {
            // –ï—Å–ª–∏ OCR –æ—Ç–∫–ª—é—á–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOM
            try {
                const pageText = await this.page.evaluate(() => {
                    const elements = document.querySelectorAll('button, input, textarea, div, span, p, h1, h2, h3, h4, h5, h6');
                    const textItems = [];
                    
                    elements.forEach((el, index) => {
                        const text = el.textContent?.trim();
                        if (text && text.length > 0) {
                            const rect = el.getBoundingClientRect();
                            textItems.push({
                                text: text,
                                confidence: 100, // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è DOM
                                x: Math.round(rect.x),
                                y: Math.round(rect.y),
                                width: Math.round(rect.width),
                                height: Math.round(rect.height)
                            });
                        }
                    });
                    
                    return textItems;
                });
                
                this.logger.debug(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${pageText.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ DOM`);
                return pageText;
            } catch (error) {
                this.logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOM: ${error.message}`);
                return [];
            }
        }
        
        try {
            if (!imagePath) throw new Error('–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ extractAllText');
            const tesseractCmd = `"${this.settings.tesseractPath}" "${imagePath}" output -l rus+eng --oem 3 --psm 6 tsv`;
            this.logger.debug(`üîç –ó–∞–ø—É—Å–∫ OCR: ${tesseractCmd}`);
            execSync(tesseractCmd, { encoding: 'utf8', timeout: 20000 });
            if (!fs.existsSync('output.tsv')) throw new Error('–§–∞–π–ª output.tsv –Ω–µ —Å–æ–∑–¥–∞–Ω Tesseract');
            const content = fs.readFileSync('output.tsv', 'utf8');
            const lines = content.split('\n').filter(line => line.trim());
            
            const textItems = [];
            for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                const parts = lines[i].split('\t');
                if (parts.length >= 12) {
                    const text = parts[11]?.trim();
                    if (text && text.length > 0) {
                        textItems.push({
                            text: text,
                            confidence: parseInt(parts[10]) || 0,
                            x: parseInt(parts[6]) || 0,
                            y: parseInt(parts[7]) || 0,
                            width: parseInt(parts[8]) || 0,
                            height: parseInt(parts[9]) || 0
                        });
                    }
                }
            }
            
            this.logger.debug(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${textItems.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ OCR`);
            return textItems;
        } catch (error) {
            const msg = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR: ${error.message}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ, —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞.`;
            this.logger.error(msg);
            throw new Error(msg);
        }
    }

    determineState(allText, domInfo) {
        const textStrings = allText.map(item => item.text);
        const fullText = textStrings.join(' ');
        
        const indicators = [];
        let stateName = 'unknown';
        let description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        const hasModals = domInfo && domInfo.modals.length > 0;
        if (hasModals) {
            indicators.push('–º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞
        const hasLoginElements = domInfo && domInfo.loginElements.length > 0;
        if (hasLoginElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
        const hasPostElements = domInfo && domInfo.postElements.length > 0;
        if (hasPostElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
        const hasChatElements = domInfo && domInfo.chatElements.length > 0;
        if (hasChatElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π–¥–±–∞—Ä–∞
        const hasSidebarElements = domInfo && domInfo.sidebarElements.length > 0;
        if (hasSidebarElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã —Å–∞–π–¥–±–∞—Ä–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const hasMainElements = domInfo && domInfo.mainAppElements.length > 0;
        if (hasMainElements) {
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        const hasGuestButtons = domInfo && domInfo.guestButtons.length > 0;
        if (hasGuestButtons) {
            indicators.push('–∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ email
        const hasEmailButtons = domInfo && domInfo.emailButtons.length > 0;
        if (hasEmailButtons) {
            indicators.push('–∫–Ω–æ–ø–∫–∏ email');
        }

        // –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø
        if (fullText.includes('–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É') && fullText.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å')) {
            stateName = 'login_selection';
            description = '–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            indicators.push('–∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞', '–∫–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç—è');
        }
        else if (fullText.includes('–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞') || fullText.includes('email') || fullText.includes('google')) {
            stateName = 'login_methods';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞';
            indicators.push('—Å–ø–æ—Å–æ–±—ã –≤—Ö–æ–¥–∞', 'email', 'google');
        }
        else if (fullText.includes('–ø–æ—Å—Ç') && fullText.includes('—á–∞—Ç') && fullText.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª)';
            indicators.push('–ø–æ—Å—Ç—ã', '—á–∞—Ç', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
        }
        else if (fullText.includes('–≤–æ–π—Ç–∏') && fullText.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
            stateName = 'login_form';
            description = '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞';
            indicators.push('—Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
        }
        else if (fullText.includes('–æ—à–∏–±–∫–∞') || fullText.includes('–Ω–µ–≤–µ—Ä–Ω–æ')) {
            stateName = 'error_state';
            description = '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏';
            indicators.push('–æ—à–∏–±–∫–∞');
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª
        else if ((hasPostElements || hasChatElements || hasSidebarElements || hasMainElements) && !hasModals) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª)';
            indicators.push('—ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª');
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        else if (hasModals && hasGuestButtons) {
            stateName = 'guest_login_modal';
            description = '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞';
            indicators.push('–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ', '–∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª
        else if (hasGuestButtons && !hasModals) {
            stateName = 'main_app';
            description = '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞, –Ω–æ –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)';
            indicators.push('–∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª');
        }

        return {
            name: stateName,
            description: description,
            indicators: indicators,
            hasModals: hasModals,
            hasLoginElements: hasLoginElements,
            hasPostElements: hasPostElements,
            hasChatElements: hasChatElements,
            hasSidebarElements: hasSidebarElements,
            hasMainElements: hasMainElements,
            hasGuestButtons: hasGuestButtons,
            hasEmailButtons: hasEmailButtons
        };
    }

    async clickByOCRCoordinates(buttonText, description = '') {
        this.logger.info(`üéØ –ö–ª–∏–∫ –ø–æ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: "${buttonText}" ${description}`);
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const button = this.ocrCoordinates.find(coord => 
            coord.text.toLowerCase().includes(buttonText.toLowerCase())
        );
        
        if (!button) {
            const error = `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö`;
            this.logger.error(`‚ùå ${error}`);
            throw new Error(error);
        }
        
        this.logger.info(`üìç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "${button.text}" –≤ —Ç–æ—á–∫–µ (${button.x}, ${button.y})`);
        
        try {
            // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            await this.page.mouse.click(button.x, button.y);
            this.logger.info(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y})`);
            await this.delay(this.settings.delay);
            return true;
        } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y}): ${error.message}`;
            this.logger.error(`‚ùå ${errorMsg}`);
            throw new Error(errorMsg);
        }
    }

    async takeScreenshotAutoNamed(state, details = '', folder = 'states', stepIndex = null) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            let nameParts = [];
            if (stepIndex !== null) nameParts.push(String(stepIndex).padStart(2, '0'));
            if (state && state.name) nameParts.push(state.name);
            if (details) nameParts.push(details.replace(/\s+/g, '_'));
            const filename = nameParts.filter(Boolean).join('__') + '.png';
            const folderPath = path.join(this.settings.outputDir, folder);
            if (!fs.existsSync(folderPath)) {
                fs.mkdirSync(folderPath, { recursive: true });
            }
            const filepath = path.join(folderPath, filename);
            await this.page.screenshot({ path: filepath, fullPage: true });
            const screenshotInfo = {
                name: filename.replace('.png',''),
                filename,
                folder,
                filepath,
                timestamp: new Date().toISOString(),
                size: fs.statSync(filepath).size,
                state: state ? state.name : undefined,
                details
            };
            this.screenshots.push(screenshotInfo);
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${filename}`);
            return filepath;
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (auto-named): ${error.message}`);
            throw error;
        }
    }

    async executeActionWithVerification(action, expectedState, description = '', folder = 'states') {
        this.logger.info(`üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: ${description}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–µ–π—Å—Ç–≤–∏—è
        const beforeState = await this.analyzeScreenState(`before_${description.replace(/\s+/g, '_')}`, folder);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (beforeState.state.name === expectedState) {
            this.logger.info(`‚úÖ –£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "${expectedState}"`);
            return { success: true, alreadyInState: true };
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        try {
            await action();
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`);
            throw error;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        const afterState = await this.analyzeScreenState(`after_${description.replace(/\s+/g, '_')}`, folder);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const stateChanged = beforeState.state.name !== afterState.state.name;
        const reachedExpectedState = afterState.state.name === expectedState;
        
        this.logger.info(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${stateChanged ? '–î–ê' : '–ù–ï–¢'}`);
        this.logger.info(`üìä ${beforeState.state.name} ‚Üí ${afterState.state.name}`);
        this.logger.info(`üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${reachedExpectedState ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (reachedExpectedState) {
            this.logger.info(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
            return { success: true, stateChange: true, reachedExpected: true };
        } else if (stateChanged) {
            const error = `–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –û–∂–∏–¥–∞–ª–æ—Å—å: "${expectedState}", –ø–æ–ª—É—á–µ–Ω–æ: "${afterState.state.name}"`;
            this.logger.error(`‚ùå ${error}`);
            throw new Error(error);
        } else {
            const error = `–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "${afterState.state.name}"`;
            this.logger.error(`‚ùå ${error}`);
            throw new Error(error);
        }
    }

    async runScenario(scenario) {
        this.logger.info(`üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name} - ${scenario.description}`);
        
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.analyzeScreenState('initial', scenario.folder);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
            for (const action of scenario.actions) {
                await this.executeActionWithVerification(
                    () => this.clickByOCRCoordinates(action.buttonText, action.description),
                    action.expectedState,
                    action.description,
                    scenario.folder
                );
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
            const finalState = await this.analyzeScreenState('final', scenario.folder);
            const finalScreenshotPath = await this.takeScreenshotAutoNamed(
                finalState.state, 
                scenario.name.replace('_', '__'), 
                scenario.folder
            );
            
            this.logger.info(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}": ${error.message}`);
            this.errors.push({ 
                type: 'scenario_error', 
                scenario: scenario.name, 
                message: error.message 
            });
            
            // –ü–†–ï–†–´–í–ê–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–ò –õ–Æ–ë–û–ô –û–®–ò–ë–ö–ï
            this.logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
            process.exit(1);
        }
    }

    async run() {
        const startTime = Date.now();
        
        try {
            await this.init();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
            const scenarios = [
                {
                    name: '01_initial_page',
                    description: '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    folder: 'states',
                    actions: []
                },
                {
                    name: '02_guest_mode',
                    description: '–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º',
                    folder: 'scenarios/guest_login',
                    actions: [
                        {
                            buttonText: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å',
                            expectedState: 'main_app',
                            description: '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞'
                        }
                    ]
                },
                {
                    name: '03_post_creation',
                    description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                    folder: 'scenarios/post_creation',
                    actions: [
                        {
                            buttonText: '–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?',
                            expectedState: 'main_app',
                            description: '–ö–ª–∏–∫ –ø–æ –ø–æ–ª—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞'
                        }
                    ]
                },
                {
                    name: '04_menu_open',
                    description: '–û—Ç–∫—Ä—ã—Ç–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    folder: 'scenarios/menu_interaction',
                    actions: [
                        {
                            buttonText: '–ú–µ–Ω—é',
                            expectedState: 'main_app',
                            description: '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é'
                        }
                    ]
                },
                {
                    name: '05_chat_open',
                    description: '–û—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç',
                    folder: 'scenarios/chat_interaction',
                    actions: [
                        {
                            buttonText: '–ß–∞—Ç—ã',
                            expectedState: 'main_app',
                            description: '–ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ —á–∞—Ç–æ–≤'
                        }
                    ]
                }
            ];
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
            for (const scenario of scenarios) {
                await this.runScenario(scenario);
            }
            
            const duration = Date.now() - startTime;
            this.logger.info(`üéâ –ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
            this.logger.info(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${this.screenshots.length}`);
            this.logger.info(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
            
        } catch (error) {
            this.logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            this.errors.push({ type: 'critical_error', message: error.message });
            process.exit(1);
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
        
        return {
            screenshots: this.screenshots,
            errors: this.errors,
            warnings: this.warnings
        };
    }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
    const module = new AdvancedScreenshotModule();
    await module.run();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = AdvancedScreenshotModule;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(error => {
        console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        process.exit(1);
    });
} 