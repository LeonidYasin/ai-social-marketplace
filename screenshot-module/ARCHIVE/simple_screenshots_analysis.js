const fs = require('fs');
const path = require('path');

class SimpleScreenshotAnalyzer {
    constructor() {
        this.screenshotsDir = 'documentation_screenshots';
        this.reportPath = 'simple_screenshots_analysis.json';
    }

    analyzeScreenshots() {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
        
        const analysis = {
            timestamp: new Date().toISOString(),
            totalScreenshots: 0,
            categories: {},
            mainScreenshots: [],
            coverage: {
                pages: [],
                components: [],
                interactions: [],
                states: [],
                mobile: false,
                multiuser: false
            }
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        const mainScreenshots = [
            '01_main_page.png', '02_guest_login_clicked.png', '03_guest_form.png',
            '04_login_form.png', '05_login_form_filled.png', '06_after_login.png',
            '07_user_profile.png', '09_feed_page.png', '10_feed_scrolled.png',
            '11_create_post_form.png', '12_post_form_filled.png', '13_post_created.png',
            '14_chat_page.png', '15_chat_conversation.png', '16_message_typing.png',
            '17_message_sent.png', '18_left_sidebar.png', '19_right_sidebar.png',
            '21_notifications_panel.png', '22_search_form.png', '23_search_results.png',
            '24_mobile_main.png'
        ];

        // –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        const hashSet = new Set();

        for (const screenshot of mainScreenshots) {
            const screenshotPath = path.join(this.screenshotsDir, screenshot);
            if (fs.existsSync(screenshotPath)) {
                const analysisResult = this.analyzeScreenshotByFilename(screenshot, screenshotPath);
                // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ö–µ—à—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                const fileBuffer = fs.readFileSync(screenshotPath);
                const hash = require('crypto').createHash('md5').update(fileBuffer).digest('hex');
                if (!hashSet.has(hash)) {
                    analysis.mainScreenshots.push(analysisResult);
                    analysis.totalScreenshots++;
                    hashSet.add(hash);
                }
            }
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = ['states', 'components', 'interactions', 'multiuser'];
        
        for (const category of categories) {
            const categoryDir = path.join(this.screenshotsDir, category);
            if (fs.existsSync(categoryDir)) {
                const files = fs.readdirSync(categoryDir).filter(f => f.endsWith('.png'));
                analysis.categories[category] = [];
                
                for (const file of files) {
                    const screenshotPath = path.join(categoryDir, file);
                    const analysisResult = this.analyzeScreenshotByFilename(file, screenshotPath, category);
                    // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ö–µ—à—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                    const fileBuffer = fs.readFileSync(screenshotPath);
                    const hash = require('crypto').createHash('md5').update(fileBuffer).digest('hex');
                    if (!hashSet.has(hash)) {
                        analysis.categories[category].push(analysisResult);
                        analysis.totalScreenshots++;
                        hashSet.add(hash);
                    }
                }
            }
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        analysis.coverage = this.analyzeCoverage(analysis);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        fs.writeFileSync(this.reportPath, JSON.stringify(analysis, null, 2), {encoding: 'utf8'});
        
        console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysis.totalScreenshots} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤`);
        console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${this.reportPath}`);
        
        return analysis;
    }

    analyzeScreenshotByFilename(filename, screenshotPath, category = '') {
        const analysis = {
            filename: filename,
            category: category,
            path: category ? `${category}/${filename}` : filename,
            fullPath: `documentation_screenshots/${category ? category + '/' : ''}${filename}`,
            features: [],
            description: '',
            uiElements: []
        };

        const name = filename.toLowerCase().replace('.png', '');

        // --- –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
        if (name.includes('main_page')) {
            // –ü—Ä–æ–±—É–µ–º OCR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: –∏—â–µ–º "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞)
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR, –Ω–æ –∑–¥–µ—Å—å –¥–µ–ª–∞–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if (fs.existsSync(screenshotPath)) {
                const buffer = fs.readFileSync(screenshotPath);
                // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±: –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 01_main_page.png, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–∞–º –º–æ–¥–∞–ª–∫–∞
                if (filename === '01_main_page.png') {
                    analysis.features.push('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º');
                    analysis.description = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞)';
                    analysis.uiElements.push('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"', '–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"', '–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"', '–õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤', '–ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏');
                    return analysis;
                }
            }
        }

        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (name.includes('main_page') || name.includes('feed')) {
            if (filename !== '01_main_page.png') {
                analysis.features.push('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ª–µ–Ω—Ç–∞)');
                analysis.description = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, —Å –ª–µ–Ω—Ç–æ–π –ø–æ—Å—Ç–æ–≤ –∏ –±–æ–∫–æ–≤—ã–º–∏ –ø–∞–Ω–µ–ª—è–º–∏';
                analysis.uiElements.push('–õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤', '–ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏', '–ú–µ–Ω—é', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                return analysis;
            }
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        if (name.includes('guest')) {
            analysis.features.push('–ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            analysis.description = '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞';
            analysis.uiElements.push('–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"', '–§–æ—Ä–º–∞ –≥–æ—Å—Ç—è');
        }
        if (name.includes('login')) {
            analysis.features.push('–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞');
            analysis.description = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            analysis.uiElements.push('–ü–æ–ª–µ email', '–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è', '–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞');
        }
        if (name.includes('profile')) {
            analysis.features.push('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            analysis.description = '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            analysis.uiElements.push('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
        if (name.includes('feed')) {
            analysis.features.push('–õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤');
            analysis.description = '–û—Å–Ω–æ–≤–Ω–∞—è –ª–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
            analysis.uiElements.push('–ü–æ—Å—Ç—ã', '–ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫–æ–≤', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
        }
        if (name.includes('post')) {
            analysis.features.push('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤');
            analysis.description = '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
            analysis.uiElements.push('–§–æ—Ä–º–∞ –ø–æ—Å—Ç–∞', '–ü–æ–ª–µ –≤–≤–æ–¥–∞', '–ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
        if (name.includes('chat')) {
            analysis.features.push('–ß–∞—Ç');
            analysis.description = '–°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏';
            analysis.uiElements.push('–î–∏–∞–ª–æ–≥–∏', '–ü–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è', '–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
        if (name.includes('sidebar')) {
            analysis.features.push('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
            analysis.description = '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å';
            analysis.uiElements.push('–ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', '–°—Å—ã–ª–∫–∏');
        }
        if (name.includes('notifications')) {
            analysis.features.push('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            analysis.description = '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π';
            analysis.uiElements.push('–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã');
        }
        if (name.includes('search')) {
            analysis.features.push('–ü–æ–∏—Å–∫');
            analysis.description = '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∏—Å–∫–∞';
            analysis.uiElements.push('–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');
        }
        if (name.includes('mobile')) {
            analysis.features.push('–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è');
            analysis.description = '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤';
            analysis.uiElements.push('–ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è', '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω');
        }
        if (name.includes('interaction') || name.includes('before') || name.includes('after')) {
            analysis.features.push('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
            analysis.description = '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π';
            analysis.uiElements.push('–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ/–ø–æ—Å–ª–µ', '–ê–Ω–∏–º–∞—Ü–∏–∏');
        }
        if (name.includes('user1') || name.includes('user2') || name.includes('multiuser')) {
            analysis.features.push('–ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º');
            analysis.description = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏';
            analysis.uiElements.push('–†–∞–∑–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
        }
        return analysis;
    }

    analyzeCoverage(analysis) {
        const coverage = {
            pages: [],
            components: [],
            interactions: [],
            states: [],
            mobile: false,
            multiuser: false
        };
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        const allScreenshots = [
            ...analysis.mainScreenshots,
            ...Object.values(analysis.categories).flat()
        ];
        for (const screenshot of allScreenshots) {
            if (screenshot.features.includes('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º')) coverage.pages.push('–ì–ª–∞–≤–Ω–∞—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º');
            if (screenshot.features.includes('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ª–µ–Ω—Ç–∞)')) coverage.pages.push('–ì–ª–∞–≤–Ω–∞—è (–ª–µ–Ω—Ç–∞)');
            if (screenshot.features.includes('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')) coverage.pages.push('–ü—Ä–æ—Ñ–∏–ª—å');
            if (screenshot.features.includes('–õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤')) coverage.pages.push('–õ–µ–Ω—Ç–∞');
            if (screenshot.features.includes('–ß–∞—Ç')) coverage.pages.push('–ß–∞—Ç');
            if (screenshot.features.includes('–ü–æ–∏—Å–∫')) coverage.pages.push('–ü–æ–∏—Å–∫');
            if (screenshot.features.includes('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å')) coverage.components.push('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
            if (screenshot.features.includes('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')) coverage.components.push('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            if (screenshot.features.includes('–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞')) coverage.components.push('–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞');
            if (screenshot.features.includes('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è')) coverage.interactions.push('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è');
            if (screenshot.features.includes('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤')) coverage.interactions.push('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            if (screenshot.features.includes('–ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥')) coverage.states.push('–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
            if (screenshot.features.includes('–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞')) coverage.states.push('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            if (screenshot.features.includes('–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è')) coverage.mobile = true;
            if (screenshot.features.includes('–ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º')) coverage.multiuser = true;
        }
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        coverage.pages = [...new Set(coverage.pages)];
        coverage.components = [...new Set(coverage.components)];
        coverage.interactions = [...new Set(coverage.interactions)];
        coverage.states = [...new Set(coverage.states)];
        return coverage;
    }

    generateSummary() {
        const analysis = this.analyzeScreenshots();
        
        console.log('\nüìä –°–í–û–î–ö–ê –ü–û–ö–†–´–¢–ò–Ø –°–ö–†–ò–ù–®–û–¢–ê–ú–ò:');
        console.log('=====================================');
        console.log(`üì∏ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${analysis.totalScreenshots}`);
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã: ${analysis.coverage.pages.join(', ')}`);
        console.log(`üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${analysis.coverage.components.join(', ')}`);
        console.log(`üñ±Ô∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: ${analysis.coverage.interactions.join(', ')}`);
        console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏—è: ${analysis.coverage.states.join(', ')}`);
        console.log(`üì± –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${analysis.coverage.mobile ? '‚úÖ' : '‚ùå'}`);
        console.log(`üë• –ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º: ${analysis.coverage.multiuser ? '‚úÖ' : '‚ùå'}`);
        
        console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –°–ö–†–ò–ù–®–û–¢–û–í:');
        console.log('=====================================');
        
        analysis.mainScreenshots.forEach(screenshot => {
            console.log(`üì∏ ${screenshot.filename}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${screenshot.description}`);
            console.log(`   –§—É–Ω–∫—Ü–∏–∏: ${screenshot.features.join(', ')}`);
            console.log(`   UI —ç–ª–µ–º–µ–Ω—Ç—ã: ${screenshot.uiElements.join(', ')}`);
            console.log(`   –ü—É—Ç—å: ${screenshot.fullPath}`);
            console.log('');
        });
        return analysis;
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
const analyzer = new SimpleScreenshotAnalyzer();
analyzer.generateSummary(); 