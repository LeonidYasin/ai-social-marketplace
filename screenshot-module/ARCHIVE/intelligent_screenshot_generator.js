const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * Intelligent Screenshot Generator
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–∑ OCR/DOM –±–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
class IntelligentScreenshotGenerator {
    constructor() {
        this.browser = null;
        this.page = null;
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.baseDir = 'documentation_screenshots';
        this.stepCounter = 0;
        this.currentScenario = '';
        this.currentPanel = '';
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        this.ensureDirectoryStructure();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º
     */
    ensureDirectoryStructure() {
        const directories = [
            this.baseDir,
            path.join(this.baseDir, 'scenarios'),
            path.join(this.baseDir, 'panels'),
            path.join(this.baseDir, 'errors'),
            path.join(this.baseDir, 'logs')
        ];

        directories.forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
            }
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Intelligent Screenshot Generator...');
        
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--no-sandbox', '--disable-web-security']
        });
        
        this.page = await this.browser.newPage();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async pause(duration = 2000, reason = '') {
        const reasonText = reason ? ` (${reason})` : '';
        console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${duration}ms${reasonText}`);
        await new Promise(resolve => setTimeout(resolve, duration));
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async analyzeDOM() {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
        
        try {
            const domInfo = await this.page.evaluate(() => {
                const info = {
                    title: document.title,
                    url: window.location.href,
                    modals: [],
                    buttons: [],
                    forms: [],
                    loginElements: [],
                    mainAppElements: [],
                    guestButtons: [],
                    emailButtons: [],
                    postElements: [],
                    chatElements: [],
                    sidebarElements: [],
                    navigationElements: []
                };

                // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.modals.push({
                            tagName: modal.tagName,
                            className: modal.className,
                            id: modal.id,
                            text: modal.textContent?.substring(0, 200),
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const buttonText = btn.textContent?.trim() || '';
                        const ariaLabel = btn.getAttribute('aria-label') || '';
                        
                        info.buttons.push({
                            text: buttonText,
                            ariaLabel: ariaLabel,
                            className: btn.className,
                            id: btn.id,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
                        if (buttonText.toLowerCase().includes('–≥–æ—Å—Ç—å') || 
                            ariaLabel.toLowerCase().includes('–≥–æ—Å—Ç—å') ||
                            buttonText.toLowerCase().includes('guest')) {
                            info.guestButtons.push({
                                text: buttonText,
                                ariaLabel: ariaLabel,
                                className: btn.className,
                                id: btn.id,
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ email
                        if (buttonText.toLowerCase().includes('email') || 
                            ariaLabel.toLowerCase().includes('email') ||
                            buttonText.toLowerCase().includes('–ø–æ—á—Ç–∞')) {
                            info.emailButtons.push({
                                text: buttonText,
                                ariaLabel: ariaLabel,
                                className: btn.className,
                                id: btn.id,
                                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                            });
                        }
                    }
                });

                // –ò—â–µ–º —Ñ–æ—Ä–º—ã
                const forms = document.querySelectorAll('form, [class*="form"]');
                forms.forEach(form => {
                    const rect = form.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.forms.push({
                            className: form.className,
                            id: form.id,
                            action: form.action,
                            method: form.method,
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                const navElements = document.querySelectorAll('nav, [role="navigation"], .navbar, .sidebar, [class*="nav"]');
                navElements.forEach(nav => {
                    const rect = nav.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.navigationElements.push({
                            tagName: nav.tagName,
                            className: nav.className,
                            id: nav.id,
                            text: nav.textContent?.substring(0, 200),
                            visible: rect.width > 0 && rect.height > 0,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                return info;
            });

            console.log(`üìä DOM –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${domInfo.buttons.length} –∫–Ω–æ–ø–æ–∫, ${domInfo.modals.length} –º–æ–¥–∞–ª–æ–∫, ${domInfo.forms.length} —Ñ–æ—Ä–º`);
            return domInfo;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DOM:', error.message);
            return null;
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    async extractTextFromImage(imagePath) {
        return new Promise((resolve, reject) => {
            // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Tesseract –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng --oem 3 --psm 6 tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && conf > 30) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ (DOM + OCR)
     */
    async analyzeScreenState(description = '') {
        console.log(`üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: ${description}`);
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        const screenshotPath = await this.takeScreenshot(`analyze_${description.replace(/\s+/g, '_')}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º DOM
        const domInfo = await this.analyzeDOM();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
        const ocrText = await this.extractTextFromImage(screenshotPath);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ DOM –∏ OCR
        const state = this.determineScreenState(ocrText, domInfo);
        
        console.log(`üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${state.description}`);
        console.log(`üîç –ü—Ä–∏–∑–Ω–∞–∫–∏: ${state.indicators.join(', ')}`);
        
        return {
            state: state,
            ocrText: ocrText,
            domInfo: domInfo,
            screenshotPath: screenshotPath
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ DOM –∏ OCR –¥–∞–Ω–Ω—ã—Ö
     */
    determineScreenState(ocrText, domInfo) {
        const allText = ocrText.map(item => item.text.toLowerCase()).join(' ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (allText.includes('–≤–æ–π—Ç–∏') || allText.includes('login') || allText.includes('–≤—Ö–æ–¥')) {
            return {
                name: 'login_selection',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤—Ö–æ–¥–∞',
                indicators: ['–∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞', '–≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']
            };
        }
        
        if (allText.includes('–≥–æ—Å—Ç—å') || allText.includes('guest')) {
            return {
                name: 'guest_login_available',
                description: '–î–æ—Å—Ç—É–ø–µ–Ω –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥',
                indicators: ['–∫–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç—è', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å']
            };
        }
        
        if (allText.includes('–ø–æ—Å—Ç') || allText.includes('post') || allText.includes('—Å–æ–∑–¥–∞—Ç—å')) {
            return {
                name: 'main_app',
                description: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–∞–º–∏',
                indicators: ['–ª–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤', '—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤', '–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å']
            };
        }
        
        if (allText.includes('—á–∞—Ç') || allText.includes('chat') || allText.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ')) {
            return {
                name: 'chat_interface',
                description: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞',
                indicators: ['—Å–æ–æ–±—â–µ–Ω–∏—è', '—á–∞—Ç', '–¥–∏–∞–ª–æ–≥–∏']
            };
        }
        
        if (allText.includes('–ø—Ä–æ—Ñ–∏–ª—å') || allText.includes('profile') || allText.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')) {
            return {
                name: 'user_profile',
                description: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                indicators: ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø—Ä–æ—Ñ–∏–ª—å', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏']
            };
        }
        
        return {
            name: 'unknown_state',
            description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            indicators: ['–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ']
        };
    }

    /**
     * –£–º–Ω—ã–π –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
     */
    async smartClickGuestButton(description = '') {
        console.log(`üéØ –£–º–Ω—ã–π –∫–ª–∏–∫: "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" ${description}`);
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–ª–∏–∫–∞
        const beforeState = await this.analyzeScreenState('before_click');
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ DOM (–ø–æ —Ç–µ–∫—Å—Ç—É)
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ this.page - —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Puppeteer Page
            if (!this.page || typeof this.page.evaluate !== 'function') {
                console.error('‚ùå this.page –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Puppeteer Page! –¢–∏–ø:', typeof this.page);
                throw new Error('this.page –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Puppeteer Page');
            }
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ evaluate
            const buttonFound = await this.page.evaluate(() => {
                const buttons = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"]'));
                for (const button of buttons) {
                    const text = button.textContent?.trim() || '';
                    if (text.toLowerCase().includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') || text.toLowerCase().includes('–≥–æ—Å—Ç—å')) {
                        return {
                            found: true,
                            text: text,
                            className: button.className,
                            id: button.id
                        };
                    }
                }
                return { found: false };
            });
            
            if (buttonFound.found) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ DOM: "${buttonFound.text}"`);
                
                // –ö–ª–∏–∫–∞–µ–º —á–µ—Ä–µ–∑ evaluate
                await this.page.evaluate(() => {
                    const buttons = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"]'));
                    for (const button of buttons) {
                        const text = button.textContent?.trim() || '';
                        if (text.toLowerCase().includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') || text.toLowerCase().includes('–≥–æ—Å—Ç—å')) {
                            button.click();
                            return true;
                        }
                    }
                    return false;
                });
                
                console.log('‚úÖ DOM –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω');
                
                // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
                try {
                    await this.page.waitForSelector('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]', { hidden: true, timeout: 5000 });
                } catch (e) {
                    console.log('‚ö†Ô∏è –ú–æ–¥–∞–ª–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                }
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                const afterState = await this.analyzeScreenState('after_click');
                const stateChanged = beforeState.state.name !== afterState.state.name;
                return { success: true, method: 'DOM', stateChange: stateChanged, afterState };
            } else {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ DOM');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ DOM –∫–ª–∏–∫–∞:', error.message);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî fallback –Ω–∞ OCR
        console.log('üîç DOM –Ω–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ OCR');
        const screenshotPath = await this.takeScreenshot('search_guest_button');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
        const ocrText = await this.extractTextFromImage(screenshotPath);
        const allText = ocrText.map(item => item.text).join(' ').replace(/\s+/g, ' ');
        console.log('üìù –í–µ—Å—å —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–π Tesseract:', allText);
        
        // –ò—â–µ–º –±–ª–æ–∫–∏ —Å "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–≥–æ—Å—Ç—å"
        const coords = ocrText.filter(item => {
            const text = item.text?.toLowerCase() || '';
            return text.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å') || text.includes('–≥–æ—Å—Ç—å');
        });
        
        if (coords.length > 0) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${coords.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OCR:`);
            coords.forEach((item, index) => {
                console.log(`  ${index + 1}. "${item.text}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${item.confidence}%, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${item.centerX}, ${item.centerY})`);
            });
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å" - –∏—â–µ–º —Å–ª–æ–≤–∞ —Ä—è–¥–æ–º
            let target = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            const continueElement = coords.find(item => item.text.toLowerCase().includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'));
            if (continueElement) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${continueElement.centerX}, ${continueElement.centerY})`);
                target = continueElement;
            } else {
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", –±–µ—Ä–µ–º "–≥–æ—Å—Ç—å"
                const guestElement = coords.find(item => item.text.toLowerCase().includes('–≥–æ—Å—Ç—å'));
                if (guestElement) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ "–≥–æ—Å—Ç—å" –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${guestElement.centerX}, ${guestElement.centerY})`);
                    target = guestElement;
                }
            }
            
            if (target) {
                console.log(`üéØ –ö–ª–∏–∫–∞–µ–º –ø–æ "${target.text}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${target.confidence}%)`);
                await this.page.mouse.click(target.centerX, target.centerY);
                console.log(`üñ±Ô∏è OCR –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
                
                // –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
                try {
                    await this.page.waitForSelector('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]', { hidden: true, timeout: 5000 });
                } catch (e) {
                    console.log('‚ö†Ô∏è –ú–æ–¥–∞–ª–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                }
                
                const afterState = await this.analyzeScreenState('after_click');
                const stateChanged = beforeState.state.name !== afterState.state.name;
                return { success: true, method: 'OCR', stateChange: stateChanged, afterState };
            }
        } else {
            console.log('‚ùå OCR –Ω–µ –Ω–∞—à—ë–ª –∫–Ω–æ–ø–∫—É —Å "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–≥–æ—Å—Ç—å"');
        }
        
        return { success: false, reason: 'button_not_found', ocrText: allText };
    }

    /**
     * –ö–ª–∏–∫ —á–µ—Ä–µ–∑ DOM
     */
    async clickViaDOM(searchText, description = '') {
        console.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DOM: "${searchText}"`);
        
        try {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
            const element = await this.page.evaluateHandle((text) => {
                const elements = Array.from(document.querySelectorAll('*'));
                return elements.find(el => {
                    const elementText = el.textContent?.trim() || '';
                    const ariaLabel = el.getAttribute('aria-label') || '';
                    return elementText.toLowerCase().includes(text.toLowerCase()) ||
                           ariaLabel.toLowerCase().includes(text.toLowerCase());
                });
            }, searchText);
            
            if (element) {
                await element.click();
                console.log(`‚úÖ DOM –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                return { success: true, method: 'DOM' };
            }
            
            return { success: false, method: 'DOM', reason: 'element_not_found' };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ DOM –∫–ª–∏–∫–∞:', error.message);
            return { success: false, method: 'DOM', reason: error.message };
        }
    }

    /**
     * –ö–ª–∏–∫ —á–µ—Ä–µ–∑ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
     */
    async clickViaOCR(searchText, description = '') {
        console.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OCR: "${searchText}"`);
        
        try {
            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            const screenshotPath = await this.takeScreenshot(`search_${searchText.replace(/\s+/g, '_')}`);
            
            // –ò—â–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
            const coords = await this.findTextCoordinates(screenshotPath, searchText);
            
            if (coords.length === 0) {
                console.log(`‚ùå –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ OCR`);
                return { success: false, method: 'OCR', reason: 'text_not_found' };
            }

            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            const target = coords[0];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ "${target.text}" (conf: ${target.confidence}%)`);
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${target.centerX}, ${target.centerY})`);

            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
            await this.page.mouse.click(target.centerX, target.centerY);
            console.log(`üñ±Ô∏è OCR –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            
            return { success: true, method: 'OCR' };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ OCR –∫–ª–∏–∫–∞:', error.message);
            return { success: false, method: 'OCR', reason: error.message };
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OCR —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Tesseract –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng --oem 3 --psm 6 tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 30) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫ –∏ –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
     */
    async takeScreenshot(name, options = {}) {
        this.stepCounter++;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        let filepath;
        if (this.currentScenario && this.currentPanel) {
            filepath = path.join(this.baseDir, 'scenarios', this.currentScenario, this.currentPanel, `${this.stepCounter.toString().padStart(2, '0')}_${name}.png`);
        } else if (this.currentScenario) {
            filepath = path.join(this.baseDir, 'scenarios', this.currentScenario, `${this.stepCounter.toString().padStart(2, '0')}_${name}.png`);
        } else {
            filepath = path.join(this.baseDir, `${this.stepCounter.toString().padStart(2, '0')}_${name}.png`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const dir = path.dirname(filepath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        const screenshotOptions = {
            path: filepath,
            fullPage: true,
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
            deviceScaleFactor: 2, // 2x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
            omitBackground: false,
            ...options
        };
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        await this.page.screenshot(screenshotOptions);
        
        console.log(`üì∏ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath} (2x —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)`);
        return filepath;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    setScenario(scenarioName) {
        this.currentScenario = scenarioName;
        console.log(`üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioName}`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏
     */
    setPanel(panelName) {
        this.currentPanel = panelName;
        console.log(`üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å: ${panelName}`);
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
     */
    async navigateTo(url) {
        console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${url}`);
        try {
            await this.page.goto(url, { waitUntil: 'networkidle2' });
            await this.pause(2000, '–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
     */
    async handleError(error, context, additionalInfo = {}) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ${context}: ${error}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
        const errorScreenshot = path.join(this.baseDir, 'errors', `error_${Date.now()}.png`);
        await this.page.screenshot({ path: errorScreenshot, fullPage: true });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        const errorInfo = {
            timestamp: new Date().toISOString(),
            error: error.message || error,
            context: context,
            scenario: this.currentScenario,
            panel: this.currentPanel,
            step: this.stepCounter,
            screenshot: errorScreenshot,
            ...additionalInfo
        };
        
        const errorLogPath = path.join(this.baseDir, 'logs', `error_${Date.now()}.json`);
        fs.writeFileSync(errorLogPath, JSON.stringify(errorInfo, null, 2));
        
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${errorScreenshot}`);
        console.log(`üìù –õ–æ–≥ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${errorLogPath}`);
        
        throw new Error(`–û—à–∏–±–∫–∞ –≤ ${context}: ${error.message || error}`);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
     */
    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

module.exports = IntelligentScreenshotGenerator; 