const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const settings = require('./config/settings');
const scenarios = require('./config/scenarios');
const actions = require('./actions/interactions');
const navigation = require('./actions/navigation');
const utils = require('./actions/utils');
const reportGenerator = require('./reports/generator');

class ScreenshotModule {
    constructor(options = {}) {
        this.settings = { ...settings, ...options };
        this.browser = null;
        this.page = null;
        this.screenshots = [];
        this.errors = [];
        this.warnings = [];
        this.logger = new utils.Logger(this.settings.logging);
    }

    async init() {
        this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        await this.createDirectories();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        this.browser = await puppeteer.launch({
            headless: this.settings.headless,
            defaultViewport: this.settings.viewport,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        this.page = await this.browser.newPage();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        this.page.on('error', (error) => {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
            this.errors.push({ type: 'page_error', message: error.message });
        });
        
        this.page.on('pageerror', (error) => {
            this.logger.error(`JavaScript –æ—à–∏–±–∫–∞: ${error.message}`);
            this.errors.push({ type: 'js_error', message: error.message });
        });
        
        this.logger.info('‚úÖ –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async createDirectories() {
        const dirs = [
            this.settings.outputDir,
            path.join(this.settings.outputDir, this.settings.folders.states),
            path.join(this.settings.outputDir, this.settings.folders.components),
            path.join(this.settings.outputDir, this.settings.folders.interactions),
            path.join(this.settings.outputDir, this.settings.folders.multiuser),
            path.join(this.settings.outputDir, this.settings.folders.elements),
            path.join(this.settings.outputDir, this.settings.folders.errors),
            path.join(this.settings.outputDir, this.settings.folders.logs),
            path.join(this.settings.outputDir, this.settings.folders.reports),
            // –ü–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.buttons),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.inputs),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.menus),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.icons),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.text),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.forms),
            path.join(this.settings.outputDir, this.settings.folders.elements, this.settings.elementSubfolders.modals)
        ];

        for (const dir of dirs) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                this.logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
            }
        }
    }

    async takeScreenshot(name, folder, description = '') {
        try {
            const filename = `${name}.png`;
            const folderPath = path.join(this.settings.outputDir, folder);
            const filepath = path.join(folderPath, filename);
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync(folderPath)) {
                fs.mkdirSync(folderPath, { recursive: true });
            }
            
            await this.page.screenshot({
                path: filepath,
                ...this.settings.screenshotOptions
            });
            
            const screenshotInfo = {
                name,
                filename,
                folder,
                filepath,
                description,
                timestamp: new Date().toISOString(),
                size: fs.statSync(filepath).size
            };
            
            this.screenshots.push(screenshotInfo);
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${filename} - ${description}`);
            
            return screenshotInfo;
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ${name}: ${error.message}`);
            this.errors.push({ type: 'screenshot_error', name, message: error.message });
            return null;
        }
    }

    async executeScenario(scenario) {
        this.logger.info(`üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name} - ${scenario.description}`);
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            const action = actions[scenario.action] || navigation[scenario.action];
            if (action) {
                await action(this.page, (name, description) => 
                    this.takeScreenshot(name, scenario.folder, description)
                );
            } else {
                throw new Error(`–î–µ–π—Å—Ç–≤–∏–µ ${scenario.action} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            // –ñ–¥–µ–º –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
            await utils.delay(this.settings.delay);
            
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ${scenario.name}: ${error.message}`);
            this.errors.push({ 
                type: 'scenario_error', 
                scenario: scenario.name, 
                message: error.message 
            });
            
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            await this.takeScreenshot(
                `error_${scenario.name}`, 
                this.settings.folders.errors, 
                `–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: ${scenario.description}`
            );
        }
    }

    async runScenarios(scenarioType = 'all') {
        this.logger.info(`üéØ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–∏–ø–∞: ${scenarioType}`);
        
        let scenariosToRun = [];
        
        if (scenarioType === 'all') {
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            Object.values(scenarios).forEach(category => {
                scenariosToRun = scenariosToRun.concat(category);
            });
        } else if (scenarios[scenarioType]) {
            scenariosToRun = scenarios[scenarioType];
        } else {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioType}`);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        scenariosToRun.sort((a, b) => {
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
        
        this.logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${scenariosToRun.length}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        for (const scenario of scenariosToRun) {
            await this.executeScenario(scenario);
        }
    }

    async captureElementsForOCR() {
        if (!this.settings.ocr.enabled) return;
        
        this.logger.info('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è OCR...');
        
        const elementsMetadata = [];
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        const buttons = await this.page.$$('button, .MuiButtonBase-root, [role="button"]');
        for (let i = 0; i < buttons.length; i++) {
            try {
                const button = buttons[i];
                const text = await this.page.evaluate(el => el.textContent?.trim(), button);
                const selector = await this.page.evaluate(el => {
                    if (el.id) return `#${el.id}`;
                    if (el.className) return `.${el.className.split(' ').join('.')}`;
                    return el.tagName.toLowerCase();
                }, button);
                
                if (text) {
                    const name = `button_${i}_${text.replace(/[^a-zA-Z0-9]/g, '_')}`;
                    const screenshotInfo = await this.takeScreenshot(
                        name,
                        path.join(this.settings.folders.elements, this.settings.elementSubfolders.buttons),
                        `–ö–Ω–æ–ø–∫–∞: ${text}`
                    );
                    
                    if (screenshotInfo) {
                        elementsMetadata.push({
                            element: 'button',
                            text,
                            selector,
                            screenshot: screenshotInfo.filepath,
                            timestamp: new Date().toISOString()
                        });
                    }
                }
            } catch (error) {
                this.logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ ${i}: ${error.message}`);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if (this.settings.ocr.generateMetadata && elementsMetadata.length > 0) {
            const metadataPath = path.join(this.settings.outputDir, this.settings.ocr.metadataFile);
            fs.writeFileSync(metadataPath, JSON.stringify(elementsMetadata, null, 2));
            this.logger.info(`üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${metadataPath}`);
        }
    }

    async generateReports() {
        this.logger.info('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...');
        
        const reportData = {
            timestamp: new Date().toISOString(),
            totalScreenshots: this.screenshots.length,
            categories: {},
            quality: this.settings.quality,
            errors: this.errors,
            warnings: this.warnings
        };
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        this.screenshots.forEach(screenshot => {
            const category = screenshot.folder.split('/')[0];
            if (!reportData.categories[category]) {
                reportData.categories[category] = [];
            }
            reportData.categories[category].push(screenshot);
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        if (this.settings.reports.generateJson) {
            await reportGenerator.generateJsonReport(reportData, this.settings);
        }
        
        if (this.settings.reports.generateHtml) {
            await reportGenerator.generateHtmlReport(reportData, this.settings);
        }
        
        if (this.settings.reports.generateAnalysis) {
            await reportGenerator.generateAnalysisReport(reportData, this.settings);
        }
        
        this.logger.info('‚úÖ –û—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async run(options = {}) {
        const startTime = Date.now();
        
        try {
            await this.init();
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await navigation.navigateToMain(this.page);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            const scenarioType = options.scenario || 'all';
            await this.runScenarios(scenarioType);
            
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è OCR
            if (options.ocr !== false) {
                await this.captureElementsForOCR();
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            await this.generateReports();
            
            const duration = Date.now() - startTime;
            this.logger.info(`üéâ –ú–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
            this.logger.info(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${this.screenshots.length}`);
            this.logger.info(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
            this.logger.info(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}`);
            
        } catch (error) {
            this.logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            this.errors.push({ type: 'critical_error', message: error.message });
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
        
        return {
            screenshots: this.screenshots,
            errors: this.errors,
            warnings: this.warnings
        };
    }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
    const args = process.argv.slice(2);
    const options = {};
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        
        if (arg === '--scenario' && args[i + 1]) {
            options.scenario = args[i + 1];
            i++;
        } else if (arg === '--headless') {
            options.headless = true;
        } else if (arg === '--mobile') {
            options.viewport = settings.mobileViewport;
        } else if (arg === '--quality' && args[i + 1]) {
            options.quality = args[i + 1];
            i++;
        } else if (arg === '--help') {
            console.log(`
üì∏ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node screenshot-module/index.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --scenario <—Ç–∏–ø>     –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (states, components, interactions, multiuser, elements, errors, all)
  --headless          –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  --mobile           –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  --quality <level>  –ö–∞—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (low, medium, high)
  --help             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node screenshot-module/index.js --scenario states
  node screenshot-module/index.js --scenario components --headless
  node screenshot-module/index.js --mobile --quality high
            `);
            return;
        }
    }
    
    const module = new ScreenshotModule(options);
    await module.run(options);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = ScreenshotModule;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
} 