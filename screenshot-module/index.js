const SimpleScreenshotGenerator = require('./simple_screenshot_generator');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const LOG_PATH = path.resolve(__dirname, '../run_log.txt');

function startLogTailWindow() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ cmd –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ª–æ–≥ (type), –∑–∞—Ç–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ powershell Get-Content -Wait
    const cmd = `start cmd /k "type \"${LOG_PATH}\" & powershell -Command \"Get-Content -Wait -Encoding UTF8 '${LOG_PATH.replace(/\\/g, '/').replace(/'/g, "''")}'\""`;
    exec(cmd);
}

async function main() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (fs.existsSync(LOG_PATH)) {
        try { fs.unlinkSync(LOG_PATH); } catch (e) {}
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–∞
    startLogTailWindow();
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∫–æ–Ω—Å–æ–ª–∏
    if (process.stdout.write) {
        process.stdout.write('');
    }
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
    console.log('üìã –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR');
    console.log('3. –ó–∞–≥—Ä—É–∑–∫–∞ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
    console.log('4. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å DOM –∏ OCR –∞–Ω–∞–ª–∏–∑–æ–º');
    console.log('5. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    console.log('6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞');
    console.log('');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
    if (process.stdout.write) {
        process.stdout.write('');
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    const origLog = console.log;
    const origErr = console.error;
    function logToFile(...args) {
        const msg = args.map(a => (typeof a === 'string' ? a : JSON.stringify(a))).join(' ');
        fs.appendFileSync(LOG_PATH, msg + '\n', 'utf8');
        origLog.apply(console, args);
    }
    function errToFile(...args) {
        const msg = args.map(a => (typeof a === 'string' ? a : JSON.stringify(a))).join(' ');
        fs.appendFileSync(LOG_PATH, msg + '\n', 'utf8');
        origErr.apply(console, args);
    }
    console.log = logToFile;
    console.error = errToFile;

    const generator = new SimpleScreenshotGenerator(LOG_PATH);
    
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await generator.init();
        
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
        // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        await generator.generateAllScreenshots();
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('');
        console.log('üéâ –ü–†–û–¶–ï–°–° –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!');
        console.log(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${generator.screenshots.length}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${generator.errors.length}`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Date.now() - generator.startTime}ms`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏...');
        generator.handleFinalErrors();
        
        console.log('');
        console.log('üìÅ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: documentation_screenshots/');
        console.log('üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã—à–µ');
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        console.log('üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ...');
        generator.addError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞', error);
        generator.handleFinalErrors();
        
        process.exit(1);
    } finally {
        if (generator.browser) {
            await generator.browser.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(error => {
        console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });
}

module.exports = { main }; 