const { delay, clickButtonByText, fillInput, waitForElement, screenshotElement } = require('./utils');

// –ó–∞—Ö–≤–∞—Ç –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
async function captureAppBar(page, takeScreenshot) {
    await takeScreenshot('01_appbar', '–í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
}

// –ó–∞—Ö–≤–∞—Ç –ª–µ–≤–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
async function captureLeftSidebar(page, takeScreenshot) {
    await takeScreenshot('02_sidebar_left', '–õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
}

// –ó–∞—Ö–≤–∞—Ç –ø—Ä–∞–≤–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
async function captureRightSidebar(page, takeScreenshot) {
    await takeScreenshot('03_sidebar_right', '–ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
}

// –ó–∞—Ö–≤–∞—Ç –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
async function captureFeed(page, takeScreenshot) {
    await takeScreenshot('04_feed', '–õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤');
}

// –ó–∞—Ö–≤–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞
async function capturePostCard(page, takeScreenshot) {
    const postCard = await page.$('.MuiCard-root, [data-testid="post-card"], .post-card');
    if (postCard) {
        await postCard.screenshot({ path: 'documentation_screenshots/components/05_post_card.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: 05_post_card.png - –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—Å—Ç–∞');
    }
}

// –ó–∞—Ö–≤–∞—Ç –¥–∏–∞–ª–æ–≥–∞ —á–∞—Ç–∞
async function captureChatDialog(page, takeScreenshot) {
    await takeScreenshot('06_chat_dialog', '–î–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ');
}

// –ó–∞—Ö–≤–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function captureNotifications(page, takeScreenshot) {
    const notificationButton = await page.$('button[aria-label*="—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], button[aria-label*="notification"]');
    if (notificationButton) {
        await notificationButton.click();
        await delay(2000);
        await takeScreenshot('07_notifications', '–ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
}

// –ó–∞—Ö–≤–∞—Ç –ø–æ–∏—Å–∫–∞
async function captureSearch(page, takeScreenshot) {
    const searchInput = await page.$('input[placeholder*="–ü–æ–∏—Å–∫"], input[placeholder*="Search"]');
    if (searchInput) {
        await searchInput.click();
        await delay(1000);
        await takeScreenshot('08_search', '–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞');
    }
}

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ª–∞–π–∫—É
async function prepareLikeInteraction(page, takeScreenshot) {
    await takeScreenshot('01_before_like', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞');
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–π–∫–∞
async function performLikeInteraction(page, takeScreenshot) {
    const likeButton = await page.$('button[aria-label*="–ª–∞–π–∫"], button[aria-label*="like"]');
    if (likeButton) {
        await likeButton.click();
        await delay(1000);
        await takeScreenshot('02_after_like', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function openCommentForm(page, takeScreenshot) {
    const commentButton = await page.$('button[aria-label*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"], button[aria-label*="comment"]');
    if (commentButton) {
        await commentButton.click();
        await delay(1000);
        await takeScreenshot('03_comment_form', '–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
async function openShareMenu(page, takeScreenshot) {
    const shareButton = await page.$('button[aria-label*="–ø–æ–¥–µ–ª–∏—Ç—å—Å—è"], button[aria-label*="share"]');
    if (shareButton) {
        await shareButton.click();
        await delay(1000);
        await takeScreenshot('04_share_menu', '–ú–µ–Ω—é "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"');
    }
}

// –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ—Å—Ç–∞
async function focusPostField(page, takeScreenshot) {
    const postInput = await page.$('input[placeholder*="–Ω–æ–≤–æ–≥–æ"], textarea[placeholder*="–Ω–æ–≤–æ–≥–æ"]');
    if (postInput) {
        await postInput.click();
        await delay(500);
        await takeScreenshot('05_post_field_focused', '–ü–æ–ª–µ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ–∫—É—Å–µ');
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º
async function fillPostWithText(page, takeScreenshot) {
    const postInput = await page.$('input[placeholder*="–Ω–æ–≤–æ–≥–æ"], textarea[placeholder*="–Ω–æ–≤–æ–≥–æ"]');
    if (postInput) {
        await postInput.type('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
        await delay(500);
        await takeScreenshot('06_post_with_text', '–ü–æ—Å—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
async function captureLoginButton(page, takeScreenshot) {
    const loginButton = await page.$('button:has-text("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"), button:has-text("Login")');
    if (loginButton) {
        await loginButton.screenshot({ path: 'documentation_screenshots/elements/buttons/login_button.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: login_button.png - –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∫–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç—è
async function captureGuestButton(page, takeScreenshot) {
    const guestButton = await page.$('button:has-text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å")');
    if (guestButton) {
        await guestButton.screenshot({ path: 'documentation_screenshots/elements/buttons/guest_button.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: guest_button.png - –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"');
    }
}

// –ó–∞—Ö–≤–∞—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–∞
async function capturePostInput(page, takeScreenshot) {
    const postInput = await page.$('input[placeholder*="–Ω–æ–≤–æ–≥–æ"], textarea[placeholder*="–Ω–æ–≤–æ–≥–æ"]');
    if (postInput) {
        await postInput.screenshot({ path: 'documentation_screenshots/elements/inputs/post_input.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: post_input.png - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–∞');
    }
}

// –ó–∞—Ö–≤–∞—Ç –ø–æ–ª—è email
async function captureEmailInput(page, takeScreenshot) {
    const emailInput = await page.$('input[placeholder*="email"], input[type="email"]');
    if (emailInput) {
        await emailInput.screenshot({ path: 'documentation_screenshots/elements/inputs/email_input.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: email_input.png - –ü–æ–ª–µ –≤–≤–æ–¥–∞ email');
    }
}

// –ó–∞—Ö–≤–∞—Ç –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
async function capturePasswordInput(page, takeScreenshot) {
    const passwordInput = await page.$('input[placeholder*="–ø–∞—Ä–æ–ª—å"], input[type="password"]');
    if (passwordInput) {
        await passwordInput.screenshot({ path: 'documentation_screenshots/elements/inputs/password_input.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: password_input.png - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è');
    }
}

// –ó–∞—Ö–≤–∞—Ç –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
async function captureSearchInput(page, takeScreenshot) {
    const searchInput = await page.$('input[placeholder*="–ü–æ–∏—Å–∫"], input[placeholder*="Search"]');
    if (searchInput) {
        await searchInput.screenshot({ path: 'documentation_screenshots/elements/inputs/search_input.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: search_input.png - –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∏–∫–æ–Ω–∫–∏ –º–µ–Ω—é
async function captureMenuIcon(page, takeScreenshot) {
    const menuIcon = await page.$('button[aria-label*="–º–µ–Ω—é"], button[aria-label*="menu"]');
    if (menuIcon) {
        await menuIcon.screenshot({ path: 'documentation_screenshots/elements/icons/menu_icon.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: menu_icon.png - –ò–∫–æ–Ω–∫–∞ –º–µ–Ω—é');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∏–∫–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function captureNotificationIcon(page, takeScreenshot) {
    const notificationIcon = await page.$('button[aria-label*="—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], button[aria-label*="notification"]');
    if (notificationIcon) {
        await notificationIcon.screenshot({ path: 'documentation_screenshots/elements/icons/notification_icon.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: notification_icon.png - –ò–∫–æ–Ω–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
async function captureLikeButton(page, takeScreenshot) {
    const likeButton = await page.$('button[aria-label*="–ª–∞–π–∫"], button[aria-label*="like"]');
    if (likeButton) {
        await likeButton.screenshot({ path: 'documentation_screenshots/elements/buttons/like_button.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: like_button.png - –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞');
    }
}

// –ó–∞—Ö–≤–∞—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
async function captureSendButton(page, takeScreenshot) {
    const sendButton = await page.$('button:has-text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:has-text("Send")');
    if (sendButton) {
        await sendButton.screenshot({ path: 'documentation_screenshots/elements/buttons/send_button.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: send_button.png - –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
}

// –¢—Ä–∏–≥–≥–µ—Ä –æ—à–∏–±–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ email
async function triggerInvalidEmailError(page, takeScreenshot) {
    const emailInput = await page.$('input[placeholder*="email"], input[type="email"]');
    if (emailInput) {
        await emailInput.type('invalid-email');
        await delay(500);
        await takeScreenshot('01_invalid_email', '–û—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ email');
    }
}

// –¢—Ä–∏–≥–≥–µ—Ä –æ—à–∏–±–∫–∏ –ø—É—Å—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
async function triggerEmptyPostError(page, takeScreenshot) {
    const postInput = await page.$('input[placeholder*="–Ω–æ–≤–æ–≥–æ"], textarea[placeholder*="–Ω–æ–≤–æ–≥–æ"]');
    if (postInput) {
        await postInput.click();
        await clickButtonByText(page, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"');
        await delay(1000);
        await takeScreenshot('02_empty_post', '–û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ—Å—Ç–∞');
    }
}

// –¢—Ä–∏–≥–≥–µ—Ä —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
async function triggerNetworkError(page, takeScreenshot) {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
    await page.evaluate(() => {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
        errorDiv.style.cssText = 'color: red; padding: 10px; border: 1px solid red; margin: 10px;';
        document.body.appendChild(errorDiv);
    });
    
    await delay(1000);
    await takeScreenshot('03_network_error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
}

module.exports = {
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    captureAppBar,
    captureLeftSidebar,
    captureRightSidebar,
    captureFeed,
    capturePostCard,
    captureChatDialog,
    captureNotifications,
    captureSearch,
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    prepareLikeInteraction,
    performLikeInteraction,
    openCommentForm,
    openShareMenu,
    focusPostField,
    fillPostWithText,
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è OCR
    captureLoginButton,
    captureGuestButton,
    capturePostInput,
    captureEmailInput,
    capturePasswordInput,
    captureSearchInput,
    captureMenuIcon,
    captureNotificationIcon,
    captureLikeButton,
    captureSendButton,
    
    // –û—à–∏–±–∫–∏
    triggerInvalidEmailError,
    triggerEmptyPostError,
    triggerNetworkError
}; 