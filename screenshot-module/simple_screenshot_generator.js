const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { execSync, exec } = require('child_process');

class SimpleScreenshotGenerator {
    constructor() {
        this.browser = null;
        this.page = null;
        this.settings = {
            baseUrl: 'http://localhost:3000',
            outputDir: 'documentation_screenshots',
            viewport: { width: 1920, height: 1080 },
            headless: false,
            timeout: 10000,
            delay: 2000,
            tesseractPath: 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe',
            maxIterations: 10, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            maxTime: 300000 // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        };
        
        this.screenshots = [];
        this.errors = [];
        this.startTime = Date.now();
        this.iterationCount = 0;
        this.ocrCoordinates = null; // –î–æ–±–∞–≤–ª—è–µ–º OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        this.lastScreenshotPath = null; // –ü—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        
        this.logger = {
            info: (msg) => {
                console.log(`[${new Date().toISOString()}] [INFO] ${msg}`);
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                if (process.stdout.write) {
                    process.stdout.write('');
                }
            },
            warn: (msg) => {
                console.log(`[${new Date().toISOString()}] [WARN] ${msg}`);
                if (process.stdout.write) {
                    process.stdout.write('');
                }
            },
            error: (msg) => {
                console.log(`[${new Date().toISOString()}] [ERROR] ${msg}`);
                if (process.stdout.write) {
                    process.stdout.write('');
                }
            },
            debug: (msg) => {
                console.log(`[${new Date().toISOString()}] [DEBUG] ${msg}`);
                if (process.stdout.write) {
                    process.stdout.write('');
                }
            }
        };
    }

    async checkTesseract() {
        try {
            this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Tesseract...');
            const version = execSync(`"${this.settings.tesseractPath}" --version`, { encoding: 'utf8', timeout: 5000 });
            this.logger.info(`‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: ${version.split('\n')[0]}`);
            return true;
        } catch (error) {
            const msg = `‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.settings.tesseractPath}`;
            this.logger.error(msg);
            throw new Error(msg);
        }
    }

    async init() {
        this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...');
        await this.checkTesseract();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        await this.loadOCRCoordinates();
        
        this.browser = await puppeteer.launch({
            headless: this.settings.headless,
            defaultViewport: this.settings.viewport
        });
        
        this.page = await this.browser.newPage();
        let connected = false;
        let attempts = 0;
        while (!connected && attempts < 3) {
            this.checkForInfiniteLoop(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try {
                await this.page.goto(this.settings.baseUrl, { waitUntil: 'networkidle2' });
                connected = true;
            } catch (err) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
                if (attempts === 0) {
                    this.logger.info('üîÑ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ start-servers-simple.ps1...');
                    try {
                        execSync('powershell -ExecutionPolicy Bypass -File start-servers-simple.ps1', { stdio: 'inherit', cwd: path.resolve(__dirname, '..') });
                        this.logger.info('‚è≥ –ñ–¥—É 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
                        await this.delay(15000);
                    } catch (e) {
                        this.logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å start-servers-simple.ps1: ' + e.message);
                        throw e;
                    }
                } else {
                    this.logger.info(`‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts+1}/3)...`);
                    await this.delay(15000);
                }
            }
            attempts++;
        }
        if (!connected) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.');
        }
        await this.delay(3000);
        this.logger.info('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
    checkForInfiniteLoop() {
        this.iterationCount++;
        const elapsedTime = Date.now() - this.startTime;
        
        if (this.iterationCount > this.settings.maxIterations) {
            throw new Error(`üí• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (${this.settings.maxIterations})`);
        }
        
        if (elapsedTime > this.settings.maxTime) {
            throw new Error(`üí• –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${this.settings.maxTime}ms)`);
        }
        
        this.logger.debug(`üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterationCount}, –≤—Ä–µ–º—è: ${elapsedTime}ms`);
    }

    async analyzePageState() {
        try {
            const pageInfo = await this.page.evaluate(() => {
                const info = {
                    title: document.title,
                    url: window.location.href,
                    modals: [],
                    buttons: [],
                    forms: [],
                    panels: [],
                    sidebars: [],
                    mainContent: [],
                    textElements: []
                };

                // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        const modalButtons = Array.from(modal.querySelectorAll('button, [role="button"]')).map(btn => btn.textContent?.trim() || '');
                        info.modals.push({
                            tagName: modal.tagName,
                            className: modal.className,
                            text: modal.textContent || '',
                            buttons: modalButtons,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ö–Ω–æ–ø–∫–∏ (–≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                buttons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.buttons.push({
                            text: btn.textContent?.trim() || '',
                            className: btn.className,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –ü–∞–Ω–µ–ª–∏
                const panels = document.querySelectorAll('[class*="panel"], [class*="card"], [class*="container"]');
                panels.forEach(panel => {
                    const rect = panel.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.panels.push({
                            tagName: panel.tagName,
                            className: panel.className,
                            text: panel.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –°–∞–π–¥–±–∞—Ä—ã
                const sidebars = document.querySelectorAll('[class*="sidebar"], [class*="nav"], [class*="menu"]');
                sidebars.forEach(sidebar => {
                    const rect = sidebar.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.sidebars.push({
                            tagName: sidebar.tagName,
                            className: sidebar.className,
                            text: sidebar.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                const mainContent = document.querySelectorAll('[class*="main"], [class*="content"], [class*="app"]');
                mainContent.forEach(content => {
                    const rect = content.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.mainContent.push({
                            tagName: content.tagName,
                            className: content.className,
                            text: content.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                const textElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, div');
                textElements.forEach(t => {
                    const rect = t.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.textElements.push({
                            tagName: t.tagName,
                            text: t.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        });
                    }
                });

                return info;
            });
            return pageInfo;
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
            throw error;
        }
    }

    async extractTextWithOCR(imagePath) {
        try {
            const outputPath = path.join(path.dirname(imagePath), 'output');
            const command = `"${this.settings.tesseractPath}" "${imagePath}" "${outputPath}" -l rus+eng --oem 3 --psm 6 tsv`;
            
            this.logger.debug(`üîç –ó–∞–ø—É—Å–∫ OCR: ${command}`);
            execSync(command, { timeout: 30000 });
            
            const tsvPath = outputPath + '.tsv';
            if (fs.existsSync(tsvPath)) {
                const tsvContent = fs.readFileSync(tsvPath, 'utf8');
                const lines = tsvContent.split('\n').filter(line => line.trim());
                const textElements = [];
                
                for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    const parts = lines[i].split('\t');
                    if (parts.length >= 12) {
                        const text = parts[11]?.trim();
                        if (text && text.length > 0) {
                            textElements.push({
                                text: text,
                                confidence: parseFloat(parts[10]) || 0,
                                x: parseInt(parts[6]) || 0,
                                y: parseInt(parts[7]) || 0,
                                width: parseInt(parts[8]) || 0,
                                height: parseInt(parts[9]) || 0
                            });
                        }
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try { fs.unlinkSync(tsvPath); } catch (e) {}
                
                this.logger.debug(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${textElements.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ OCR`);
                return textElements;
            }
            
            return [];
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ OCR: ${error.message}`);
            return [];
        }
    }

    determineState(domElements, ocrText) {
        const allText = ocrText.map(item => item.text).join(' ').toLowerCase();
        const hasModals = domElements.some(el => el.text.toLowerCase().includes('–º–æ–¥–∞–ª—å–Ω–æ–µ') || el.text.toLowerCase().includes('modal'));
        const hasButtons = domElements.some(el => el.tagName === 'button');
        const hasPanels = domElements.some(el => el.text.toLowerCase().includes('–ø–∞–Ω–µ–ª—å') || el.text.toLowerCase().includes('panel'));
        const hasSidebars = domElements.some(el => el.text.toLowerCase().includes('–±–æ–∫–æ–≤–∞—è') || el.text.toLowerCase().includes('sidebar'));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if (allText.includes('–≤–æ–π—Ç–∏') && allText.includes('–≥–æ—Å—Ç—å')) {
            return { name: 'login_selection', description: '–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞' };
        }
        else if (allText.includes('email') || allText.includes('google')) {
            return { name: 'login_methods', description: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞' };
        }
        else if (allText.includes('–ø–æ—Å—Ç') && allText.includes('—á–∞—Ç')) {
            return { name: 'main_app', description: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' };
        }
        else if (hasModals && allText.includes('–≥–æ—Å—Ç—å')) {
            return { name: 'guest_modal', description: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞' };
        }
        else if (hasSidebars && hasPanels) {
            return { name: 'app_with_sidebar', description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é' };
        }
        else if (hasModals) {
            return { name: 'modal_open', description: '–û—Ç–∫—Ä—ã—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ' };
        }
        else {
            return { name: 'unknown_state', description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' };
        }
    }

    async takeScreenshot(state, description, folder) {
        try {
            const folderPath = path.join(this.settings.outputDir, folder);
            if (!fs.existsSync(folderPath)) {
                fs.mkdirSync(folderPath, { recursive: true });
            }
            
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `${state.name}__${description.replace(/\s+/g, '_')}__${timestamp}.png`;
            const filepath = path.join(folderPath, filename);
            
            await this.page.screenshot({ path: filepath, fullPage: true });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            this.lastScreenshotPath = filepath;
            
            const screenshotInfo = {
                name: filename,
                path: filepath,
                state: state.name,
                description: state.description,
                folder: folder,
                timestamp: new Date().toISOString()
            };
            
            this.screenshots.push(screenshotInfo);
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${filename}`);
            
            return filepath;
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error.message}`);
            this.addError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', error);
            throw error;
        }
    }

    async clickButton(buttonText) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const allButtons = await this.page.evaluate(() => {
                const buttons = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
                return Array.from(buttons).map(btn => btn.textContent?.trim()).filter(text => text && text.length > 0);
            });
            this.logger.debug(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ${allButtons.join(', ')}`);
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ –≤—Å–µ–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Puppeteer)
            const button = await this.page.evaluateHandle((text) => {
                const selectors = ['button', '[role="button"]', '.btn', '[class*="button"]'];
                for (const selector of selectors) {
                    const elements = document.querySelectorAll(selector);
                    for (const el of elements) {
                        const content = el.textContent?.trim() || '';
                        if (content.includes(text)) {
                            return el;
                        }
                    }
                }
                return null;
            }, buttonText);
            
            if (button && button.asElement()) {
                await button.click();
                this.logger.info(`‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: ${buttonText}`);
                await this.delay(this.settings.delay);
                return true;
            } else {
                const error = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`;
                this.logger.error(`‚ùå ${error}`);
                throw new Error(error);
            }
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: ${error.message}`);
            throw error;
        }
    }

    async generateAllScreenshots(onScreenshot) {
        this.logger.info('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å DOM –∏ OCR –∞–Ω–∞–ª–∏–∑–æ–º...');
        try {
            // 1. –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            this.logger.info('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
            const domElements1 = await this.getClickableElements();
            const tempScreenshot = path.join(this.settings.outputDir, 'temp', 'initial.png');
            fs.mkdirSync(path.dirname(tempScreenshot), { recursive: true });
            await this.page.screenshot({ path: tempScreenshot, fullPage: true });
            const ocrText1 = await this.extractTextWithOCR(tempScreenshot);
            const state1 = this.determineState(domElements1, ocrText1);
            await this.takeScreenshot(state1, 'initial_page', 'states');
            await this.validatePageContent(['–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å']);
            // 2. –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
            this.logger.info('üì∏ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥...');
            await this.clickByOCRCoordinates('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å', '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞', onScreenshot);
            await this.delay(2000);
            const domElements2 = await this.getClickableElements();
            const guestScreenshot = path.join(this.settings.outputDir, 'temp', 'guest.png');
            await this.page.screenshot({ path: guestScreenshot, fullPage: true });
            const ocrText2 = await this.extractTextWithOCR(guestScreenshot);
            const state2 = this.determineState(domElements2, ocrText2);
            await this.takeScreenshot(state2, 'after_guest_login', 'scenarios/guest_login');
            this.validatePageContent(['—á—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ', '–ª–µ–Ω—Ç–∞', '–ø–æ—Å—Ç—ã'], '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
            this.logger.info(`‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

            // 3. –ö–ª–∏–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
            this.logger.info('üì∏ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            await this.clickIfNoModal('–ü–†–û–§–ò–õ–¨_–ö–ù–û–ü–ö–ê', '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è', onScreenshot);
            // –°–∫—Ä–∏–Ω—à–æ—Ç –ü–û–°–õ–ï –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await this.delay(2000); // –ñ–¥—ë–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            const domElements3 = await this.getClickableElements();
            const tempScreenshot3 = path.join(this.settings.outputDir, 'temp', 'profile.png');
            this.logger.info(`üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è: ${tempScreenshot3}`);
            await this.page.screenshot({ path: tempScreenshot3, fullPage: true });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            this.logger.info(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${tempScreenshot3}`);
            this.logger.info(`üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(tempScreenshot3)}`);
            if (!fs.existsSync(tempScreenshot3)) {
                throw new Error(`–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: ${tempScreenshot3}`);
            }
            
            const ocrText3 = await this.extractTextWithOCR(tempScreenshot3);
            const state3 = this.determineState(domElements3, ocrText3);
            const safeDate = new Date().toISOString().replace(/:/g, '-');
            const screenshot3 = path.join(this.settings.outputDir, 'scenarios', 'profile', `main_app__profile_open__${safeDate}.png`);
            this.logger.info(`üì∏ –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª: ${tempScreenshot3} -> ${screenshot3}`);
            fs.copyFileSync(tempScreenshot3, screenshot3);
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${path.basename(screenshot3)}`);
            this.validatePageContent(['–ø—Ä–æ—Ñ–∏–ª—å', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–≤—ã–π—Ç–∏'], '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è');
            this.logger.info(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ`);

            // 4. –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
            this.logger.info('üì∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
            await this.clickByOCRCoordinates('3', '–ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º', onScreenshot);
            // –°–∫—Ä–∏–Ω—à–æ—Ç –ü–û–°–õ–ï –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await this.delay(2000); // –ñ–¥—ë–º –æ—Ç–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const domElements4 = await this.getClickableElements();
            const tempScreenshot4 = path.join(this.settings.outputDir, 'temp', 'notifications.png');
            await this.page.screenshot({ path: tempScreenshot4, fullPage: true });
            const ocrText4 = await this.extractTextWithOCR(tempScreenshot4);
            const state4 = this.determineState(domElements4, ocrText4);
            const safeDate4 = new Date().toISOString().replace(/:/g, '-');
            const screenshot4 = path.join(this.settings.outputDir, 'scenarios', 'notifications', `main_app__notifications_open__${safeDate4}.png`);
            // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            const notificationsDir = path.dirname(screenshot4);
            if (!fs.existsSync(notificationsDir)) {
                fs.mkdirSync(notificationsDir, { recursive: true });
            }
            fs.copyFileSync(tempScreenshot4, screenshot4);
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${path.basename(screenshot4)}`);
            this.validatePageContent(['—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ø—Ä–æ—á–∏—Ç–∞–Ω–æ', '–æ—á–∏—Å—Ç–∏—Ç—å'], '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏—Å—å');
            this.logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã —É—Å–ø–µ—à–Ω–æ`);

            // 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            this.logger.info('üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...');
            await this.clickByOCRCoordinates('–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?', '–ö–ª–∏–∫ –ø–æ –ø–æ–ª—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞', onScreenshot);
            await this.delay(1000);
            const domElements5 = await this.getClickableElements();
            const postScreenshot = path.join(this.settings.outputDir, 'temp', 'post.png');
            await this.page.screenshot({ path: postScreenshot, fullPage: true });
            const ocrText5 = await this.extractTextWithOCR(postScreenshot);
            const state5 = this.determineState(domElements5, ocrText5);
            await this.takeScreenshot(state5, 'post_creation', 'scenarios/post_creation');
            this.validatePageContent(['—á—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å'], '–ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å');
            this.logger.info(`‚úÖ –ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ`);

            // 6. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            this.logger.info('üì∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
            await this.clickByOCRCoordinates('3', '–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', onScreenshot);
            await this.delay(1000);
            const domElements6 = await this.getClickableElements();
            const menuScreenshot = path.join(this.settings.outputDir, 'temp', 'menu.png');
            await this.page.screenshot({ path: menuScreenshot, fullPage: true });
            const ocrText6 = await this.extractTextWithOCR(menuScreenshot);
            const state6 = this.determineState(domElements6, ocrText6);
            await this.takeScreenshot(state6, 'menu_open', 'scenarios/menu_interaction');
            this.validatePageContent(['–ª–µ–Ω—Ç–∞', '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'ai-—á–∞—Ç—ã'], '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å');
            this.logger.info(`‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ`);

            // 7. AI-—á–∞—Ç—ã
            this.logger.info('üì∏ AI-—á–∞—Ç—ã...');
            await this.clickByOCRCoordinates('AI-—á–∞—Ç—ã', '–ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ AI-—á–∞—Ç–æ–≤', onScreenshot);
            await this.delay(1000);
            const domElements7 = await this.getClickableElements();
            const chatScreenshot = path.join(this.settings.outputDir, 'temp', 'chat.png');
            await this.page.screenshot({ path: chatScreenshot, fullPage: true });
            const ocrText7 = await this.extractTextWithOCR(chatScreenshot);
            const state7 = this.determineState(domElements7, ocrText7);
            await this.takeScreenshot(state7, 'chat_open', 'scenarios/chat_interaction');
            this.validatePageContent(['ai-—á–∞—Ç—ã', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å'], 'AI-—á–∞—Ç—ã –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏—Å—å');
            this.logger.info(`‚úÖ AI-—á–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã —É—Å–ø–µ—à–Ω–æ`);

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            const tempDir = path.join(this.settings.outputDir, 'temp');
            if (fs.existsSync(tempDir)) {
                fs.rmSync(tempDir, { recursive: true, force: true });
            }
            this.logger.info('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            this.logger.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            throw error;
        }
    }

    async run() {
        const startTime = Date.now();
        const allScreenshots = [];
        this.lastScreenshotPath = null;
        try {
            await this.init();
            await this.generateAllScreenshots((screenshotPath) => { this.lastScreenshotPath = screenshotPath; });
            const duration = Date.now() - startTime;
            this.logger.info(`üéâ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms`);
            this.logger.info(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${this.screenshots.length}`);
            this.logger.info(`‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
            if (allScreenshots.length > 0) {
                this.logger.info('üìÅ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –°–ö–†–ò–ù–®–û–¢–û–í:');
                allScreenshots.forEach((screenshotPath, index) => {
                    this.logger.info(`   ${index + 1}. ${screenshotPath}`);
                });
                this.logger.info(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allScreenshots.length}`);
            }
            if (this.errors.length > 0) {
                // –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û: –≤—ã–≤–æ–¥–∏–º –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                this.logger.error('DEBUG ERRORS: ' + JSON.stringify(this.errors, null, 2));
                this.logger.error('\n================ –û–®–ò–ë–ö–ò =================');
                this.errors.forEach((err, i) => {
                    this.logger.error(`\n‚ùå –û–®–ò–ë–ö–ê #${i+1}: ${err.message || err}`);
                    if (err.screenshotPath) this.logger.error(`–°–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—à–∏–±–∫–æ–π: ${err.screenshotPath}`);
                    if (err.stack) this.logger.error(`–°—Ç–µ–∫: ${err.stack}`);
                });
                this.logger.error('==========================================\n');
            }
            return {
                screenshots: this.screenshots,
                allScreenshots: allScreenshots,
                errors: this.errors,
                duration: duration
            };
        } catch (error) {
            if (!this.errors.length) {
                let errorScreenshotPath = this.lastScreenshotPath;
                try {
                    const errorPath = path.join(this.settings.outputDir, 'temp', `error_${Date.now()}.png`);
                    if (this.page) {
                        await this.page.screenshot({ path: errorPath, fullPage: true });
                        errorScreenshotPath = errorPath;
                        this.logger.error(`[ERROR_SCREENSHOT] ${errorScreenshotPath}`);
                    }
                } catch {}
                this.errors.push({ type: 'critical_error', message: error.message, stack: error.stack, screenshotPath: errorScreenshotPath });
            }
            this.logger.error('DEBUG ERRORS: ' + JSON.stringify(this.errors, null, 2));
            this.logger.error('\n================ –û–®–ò–ë–ö–ò =================');
            this.errors.forEach((err, i) => {
                this.logger.error(`\n‚ùå –û–®–ò–ë–ö–ê #${i+1}: ${err.message || err}`);
                if (err.screenshotPath) this.logger.error(`–°–∫—Ä–∏–Ω—à–æ—Ç —Å –æ—à–∏–±–∫–æ–π: ${err.screenshotPath}`);
                if (err.stack) this.logger.error(`–°—Ç–µ–∫: ${err.stack}`);
            });
            this.logger.error('==========================================\n');
            throw error;
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
    }

    async loadOCRCoordinates() {
        try {
            // –ò—â–µ–º —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            const files = fs.readdirSync('.').filter(f => f.startsWith('ocr_coordinates_') && f.endsWith('.json'));
            if (files.length === 0) {
                throw new Error('–§–∞–π–ª —Å OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ debug_ocr_coordinates.js —Å–Ω–∞—á–∞–ª–∞.');
            }
            
            const latestFile = files.sort().pop();
            const data = JSON.parse(fs.readFileSync(latestFile, 'utf8'));
            this.ocrCoordinates = data.coordinates;
            
            this.logger.info(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.ocrCoordinates.length} OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ ${latestFile}`);
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OCR –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
            throw error;
        }
    }

    async closeModalIfOpen() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalSelector = '.MuiDialog-root, .modal, [role="dialog"]';
        const isModalOpen = await this.page.evaluate((selector) => {
            return !!document.querySelector(selector);
        }, modalSelector);
        if (!isModalOpen) return;
        this.logger.info('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ. –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å...');
        // 1. –ö–ª–∏–∫ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
        const closedByCross = await this.page.evaluate(() => {
            const cross = document.querySelector('.MuiDialog-root [aria-label="Close"], .modal [aria-label="Close"], [role="dialog"] [aria-label="Close"], .MuiDialog-root .MuiButtonBase-root, .modal .close, [role="dialog"] .close');
            if (cross) {
                cross.click();
                return true;
            }
            return false;
        });
        if (closedByCross) {
            this.logger.info('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É.');
            await this.delay(700);
            return;
        }
        // 2. –ö–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É
        const closedByBackdrop = await this.page.evaluate(() => {
            const backdrop = document.querySelector('.MuiDialog-root .MuiBackdrop-root, .modal-backdrop, [role="dialog"] .backdrop');
            if (backdrop) {
                backdrop.click();
                return true;
            }
            return false;
        });
        if (closedByBackdrop) {
            this.logger.info('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ñ–æ–Ω—É.');
            await this.delay(700);
            return;
        }
        // 3. Escape
        await this.page.keyboard.press('Escape');
        this.logger.info('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ Escape.');
        await this.delay(700);
    }

    async getClickableElements() {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –∫–Ω–æ–ø–∫–∏
        const elements = await this.page.evaluate(() => {
            const modals = document.querySelectorAll('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
            if (modals.length > 0) {
                // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –º–æ–¥–∞–ª (–∏–ª–∏ –º–æ–∂–Ω–æ –≤—Å–µ)
                const modal = modals[0];
                const rect = modal.getBoundingClientRect();
                if (rect.width > 0 && rect.height > 0) {
                    const modalButtons = Array.from(modal.querySelectorAll('button, [role="button"]')).map(btn => {
                        const r = btn.getBoundingClientRect();
                        return {
                            tagName: btn.tagName,
                            text: btn.textContent?.trim() || '',
                            x: r.x,
                            y: r.y,
                            width: r.width,
                            height: r.height
                        };
                    });
                    return modalButtons;
                }
            }
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª–∫–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const clickableElements = [];
            const allElements = document.querySelectorAll('button, [role="button"], .btn, [class*="button"]');
            allElements.forEach(el => {
                const rect = el.getBoundingClientRect();
                if (rect.width > 0 && rect.height > 0) {
                    clickableElements.push({
                        tagName: el.tagName,
                        text: el.textContent?.trim() || '',
                        x: rect.x,
                        y: rect.y,
                        width: rect.width,
                        height: rect.height
                    });
                }
            });
            return clickableElements;
        });
        return elements;
    }

    async clickByOCRCoordinates(buttonText, description = '', onScreenshot, expectModalToClose = false) {
        this.logger.info(`üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º: "${buttonText}"`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–∫—Å—Ç
        const modalInfo = await this.page.evaluate(() => {
            const modal = document.querySelector('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
            if (!modal) return null;
            let title = '';
            const titleEl = modal.querySelector('[role="heading"], .MuiDialogTitle-root, .modal-title, h2, h3, h4');
            if (titleEl) title = titleEl.textContent?.trim();
            let mainText = '';
            const mainTextEl = modal.querySelector('.MuiDialogContent-root, .modal-body, [role="document"]');
            if (mainTextEl) mainText = mainTextEl.textContent?.trim();
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            const modalButtons = Array.from(modal.querySelectorAll('button, [role="button"]')).map(btn => btn.textContent?.trim() || '');
            return { title, mainText, modalButtons };
        });
        if (modalInfo) {
            this.logger.warn(`‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!`);
            if (modalInfo.title) this.logger.warn(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞: "${modalInfo.title}"`);
            if (modalInfo.mainText) this.logger.warn(`   –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: "${modalInfo.mainText.slice(0, 100)}..."`);
        }
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –≤ –º–æ–¥–∞–ª–∫–µ ‚Äî –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è –º–æ–¥–∞–ª–∫—É
        if (modalInfo && modalInfo.modalButtons && modalInfo.modalButtons.some(b => b && b.toLowerCase().includes(buttonText.toLowerCase()))) {
            this.logger.info(`üü¶ –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "${buttonText}" –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞!`);
            const domElements = await this.getClickableElements();
            const button = domElements.find(coord => coord.text.toLowerCase().includes(buttonText.toLowerCase()));
            if (!button) {
                const error = `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞`;
                this.addError(error);
                throw new Error(error);
            }
            await this.delay(500);
            const safeButtonText = buttonText.replace(/[<>:"/\\|?*]/g, '-');
            const beforeClickPath = path.join(this.settings.outputDir, 'temp', `before_click_${safeButtonText}_${Date.now()}.png`);
            await this.page.screenshot({ path: beforeClickPath, fullPage: true });
            if (onScreenshot) onScreenshot(beforeClickPath);
            this.lastScreenshotPath = beforeClickPath;
            this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${beforeClickPath}`);
            this.logger.info(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ (–º–æ–¥–∞–ª–∫–∞) –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y})`);
            await this.page.mouse.click(button.x, button.y);
            this.logger.info(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y})`);
            // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è ‚Äî –∂–¥–µ–º –µ—ë –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            if (expectModalToClose) {
                this.logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞...');
                await this.page.waitForFunction(() => {
                    return !document.querySelector('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
                }, { timeout: 10000 });
                this.logger.info('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—á–µ–∑–ª–æ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞.');
            }
            return;
        }
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤ –º–æ–¥–∞–ª–∫–µ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –∏—â–µ–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (modalInfo) {
            this.logger.info('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª–∫–µ, –∑–∞–∫—Ä—ã–≤–∞—é –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
            await this.closeModalIfOpen();
        }
        // 1. DOM –∞–Ω–∞–ª–∏–∑
        const domElements = await this.getClickableElements();
        // 2. OCR –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ—á–µ–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
        // ... (–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const button = domElements.find(coord => coord.text.toLowerCase().includes(buttonText.toLowerCase()));
        if (!button) {
            const error = `–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ DOM-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`;
            this.addError(error);
            throw new Error(error);
        }
        this.logger.info(`üìç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "${button.text}" –≤ —Ç–æ—á–∫–µ (${button.x}, ${button.y})`);
        await this.delay(500);
        const safeButtonText = buttonText.replace(/[<>:"/\\|?*]/g, '-');
        const beforeClickPath = path.join(this.settings.outputDir, 'temp', `before_click_${safeButtonText}_${Date.now()}.png`);
        await this.page.screenshot({ path: beforeClickPath, fullPage: true });
        if (onScreenshot) onScreenshot(beforeClickPath);
        this.lastScreenshotPath = beforeClickPath;
        this.logger.info(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${beforeClickPath}`);
        this.logger.info(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ (DOM) –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y})`);
        await this.page.mouse.click(button.x, button.y);
        this.logger.info(`‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${button.x}, ${button.y})`);
        return;
    }

    async validatePageContent(expectedTexts, errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageInfo = await this.analyzePageState();
        
        // 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ò –∏–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        let actualTexts = [
            ...pageInfo.buttons.map(b => b.text),
            ...pageInfo.panels.map(p => p.text),
            ...pageInfo.sidebars.map(s => s.text),
            ...pageInfo.mainContent.map(c => c.text),
            ...pageInfo.textElements.map(t => t.text)
        ];
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (pageInfo.modals && pageInfo.modals.length > 0) {
            this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è—é —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
            pageInfo.modals.forEach(modal => {
                if (modal.text) actualTexts.push(modal.text);
                if (modal.buttons) actualTexts.push(...modal.buttons);
            });
        }
        
        // 4. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        const norm = s => (s || '').toLowerCase().replace(/\s+/g, ' ').trim();
        const missingTexts = expectedTexts.filter(t => !actualTexts.some(a => norm(a).includes(norm(t))));
        
        if (missingTexts.length > 0) {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ –∏ –ø–æ–∏—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞
            if (pageInfo.modals && pageInfo.modals.length > 0) {
                this.logger.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ, –ø—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –∏ –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ —Ñ–æ–Ω–µ...');
                await this.closeModalIfOpen();
                await this.delay(1000);
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
                const pageInfoAfter = await this.analyzePageState();
                let actualTextsAfter = [
                    ...pageInfoAfter.buttons.map(b => b.text),
                    ...pageInfoAfter.panels.map(p => p.text),
                    ...pageInfoAfter.sidebars.map(s => s.text),
                    ...pageInfoAfter.mainContent.map(c => c.text),
                    ...pageInfoAfter.textElements.map(t => t.text)
                ];
                
                const missingTextsAfter = expectedTexts.filter(t => !actualTextsAfter.some(a => norm(a).includes(norm(t))));
                if (missingTextsAfter.length > 0) {
                    const error = `${errorMessage}: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∏ –≤ –º–æ–¥–∞–ª–∫–µ, –Ω–∏ –Ω–∞ —Ñ–æ–Ω–µ): ${missingTextsAfter.join(', ')}`;
                    this.addError(error);
                    throw new Error(error);
                }
            } else {
                const error = `${errorMessage}: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${missingTexts.join(', ')}`;
                this.addError(error);
                throw new Error(error);
            }
        }
        
        this.logger.info(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã`);
        return;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showWindowsNotification(title, message, screenshotPath = null) {
        if (process.stdout.write) {
            process.stdout.write('');
        }
        this.logger.info(`üì¢ –ü–æ–∫–∞–∑—ã–≤–∞—é Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${title}`);
        try {
            const encodedTitle = Buffer.from(title, 'utf8').toString('base64');
            let fullMessage = message;
            let encodedScreenshot = '';
            let absPath = '';
            if (screenshotPath) {
                absPath = path.resolve(screenshotPath);
                fullMessage += `\n\n–ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä):\n${absPath}`;
                encodedScreenshot = Buffer.from(absPath, 'utf8').toString('base64');
            }
            const encodedMessage = Buffer.from(fullMessage, 'utf8').toString('base64');
            const psScript = `
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms
$title = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${encodedTitle}'))
$message = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${encodedMessage}'))
` + (screenshotPath ? `$clip = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${encodedScreenshot}'))
[System.Windows.Forms.Clipboard]::SetText($clip)
` : '') + `$result = [System.Windows.MessageBox]::Show($message, $title, 'OK', 'Information')
Write-Host "Notification shown: $result"
`;
            const tempFile = path.join(this.settings.outputDir, `notification_${Date.now()}.ps1`);
            const dir = path.dirname(tempFile);
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
            fs.writeFileSync(tempFile, psScript, 'utf8');
            execSync(`powershell -ExecutionPolicy Bypass -File "${tempFile}"`, { stdio: 'inherit', timeout: 10000 });
            try { fs.unlinkSync(tempFile); } catch (e) {}
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows: ${error.message}`);
            try {
                const cmdScript = `msg %username% "${title}: ${message}"`;
                execSync(cmdScript, { stdio: 'inherit' });
                this.logger.info('üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ cmd');
            } catch (cmdError) {
                this.logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${cmdError.message}`);
                console.log('\n' + '='.repeat(60));
                console.log(`üö® –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: ${title}`);
                console.log('='.repeat(60));
                console.log(message);
                if (screenshotPath) console.log('–ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:', path.resolve(screenshotPath));
                console.log('='.repeat(60) + '\n');
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    addError(description, error = null) {
        const errorInfo = {
            description,
            screenshotPath: this.lastScreenshotPath,
            timestamp: new Date().toISOString(),
            stack: error ? error.stack : null
        };
        this.errors.push(errorInfo);
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞: ${description}`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationTitle = `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ #${this.errors.length}`;
        const notificationMessage = `${description}`;
        this.showWindowsNotification(notificationTitle, notificationMessage, this.lastScreenshotPath);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    handleFinalErrors() {
        if (this.errors.length > 0) {
            console.log('\n=== –û–®–ò–ë–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
            console.log(`–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${this.errors.length}`);
            this.errors.forEach((error, index) => {
                console.log(`\n–û—à–∏–±–∫–∞ ${index + 1}:`);
                console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${error.description || error.message}`);
                console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç: ${error.screenshotPath}`);
                console.log(`–í—Ä–µ–º—è: ${error.timestamp || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                if (error.stack) {
                    console.log(`–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: ${error.stack}`);
                }
                console.log('---');
            });
            console.log('\n=== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê –û–ë –û–®–ò–ë–ö–ê–• ===');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const finalTitle = `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ - ${this.errors.length} –æ—à–∏–±–æ–∫`;
            const finalMessage = `–ù–∞–π–¥–µ–Ω–æ ${this.errors.length} –æ—à–∏–±–æ–∫.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${this.settings.outputDir}`;
            // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            const lastError = this.errors[this.errors.length - 1];
            this.showWindowsNotification(finalTitle, finalMessage, lastError && lastError.screenshotPath);
            return false;
        }
        return true;
    }

    async isModalOpen() {
        return await this.page.evaluate(() => {
            return !!document.querySelector('[role="dialog"], .modal, .popup, [class*="modal"], [class*="popup"]');
        });
    }

    async clickIfNoModal(buttonText, description = '', onScreenshot) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const pageInfo = await this.analyzePageState();
        if (pageInfo.modals && pageInfo.modals.length > 0) {
            this.logger.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Å—ë –µ—â—ë –æ—Ç–∫—Ä—ã—Ç–æ, –∫–ª–∏–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!');
            throw new Error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ, –∫–ª–∏–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω');
        }
        // –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –Ω–∞ —Ñ–æ–Ω–µ
        await this.clickByOCRCoordinates(buttonText, description, onScreenshot);
    }
}

module.exports = SimpleScreenshotGenerator;