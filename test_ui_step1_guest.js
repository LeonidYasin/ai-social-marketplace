const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function testStep1TwoGuests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —à–∞–≥–∞ 1: –í—Ö–æ–¥ –¥–≤—É—Ö –≥–æ—Å—Ç–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö');
  
  let browser1, browser2;
  try {
    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('üåê –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä');
    browser1 = await puppeteer.launch({
      headless: false,
      defaultViewport: { width: 1280, height: 720 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page1 = await browser1.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üì± –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
    await page1.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('üì∏ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    await page1.screenshot({ 
      path: './test_screenshots/step1_01_browser1_initial.png',
      fullPage: true 
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üîç –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
    
    let guestButton1 = null;
    const guestSelectors = [
      '//button[contains(text(), "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")]',
      '//*[contains(text(), "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")]',
      '//div[contains(text(), "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")]',
      '//span[contains(text(), "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")]',
      '//a[contains(text(), "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")]',
      'button:contains("–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨")',
      'button:contains("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å")',
      '[data-testid="guest-login-button"]'
    ];
    
    for (const selector of guestSelectors) {
      try {
        if (selector.startsWith('//')) {
          // XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
          const elements = await page1.$x(selector);
          if (elements.length > 0) {
            guestButton1 = elements[0];
            console.log(`‚úÖ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ XPath: ${selector}`);
            break;
          }
        } else {
          // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
          const element = await page1.$(selector);
          if (element) {
            guestButton1 = element;
            console.log(`‚úÖ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ CSS: ${selector}`);
            break;
          }
        }
      } catch (error) {
        console.log(`‚ùå –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${selector}`);
      }
    }
    
    if (!guestButton1) {
      console.log('‚ùå –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –∫–Ω–æ–ø–∫–∞ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const pageText = await page1.evaluate(() => document.body.innerText);
      console.log('üìã –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
      console.log(pageText.substring(0, 500) + '...');
      
      throw new Error('–ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
    
    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–µ—Ä–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üñ±Ô∏è –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
    await guestButton1.click();
    
    // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Å—Ç—è
    console.log('‚è≥ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –∂–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Å—Ç—è');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Å—Ç—è
    console.log('üì∏ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
    await page1.screenshot({ 
      path: './test_screenshots/step1_02_browser1_after_guest_login.png',
      fullPage: true 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –≥–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const userInfo1 = await page1.evaluate(() => {
      const userElement = document.querySelector('[data-testid="current-user"], .user-info, .profile-info');
      return userElement ? userElement.innerText : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    });
    console.log('üë§ –ü–µ—Ä–≤—ã–π –±—Ä–∞—É–∑–µ—Ä: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userInfo1);
    
    // –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('\nüåê –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä');
    browser2 = await puppeteer.launch({
      headless: false,
      defaultViewport: { width: 1280, height: 720 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page2 = await browser2.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üì± –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
    await page2.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    console.log('üì∏ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    await page2.screenshot({ 
      path: './test_screenshots/step1_03_browser2_initial.png',
      fullPage: true 
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üîç –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
    
    let guestButton2 = null;
    for (const selector of guestSelectors) {
      try {
        if (selector.startsWith('//')) {
          // XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
          const elements = await page2.$x(selector);
          if (elements.length > 0) {
            guestButton2 = elements[0];
            console.log(`‚úÖ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ XPath: ${selector}`);
            break;
          }
        } else {
          // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
          const element = await page2.$(selector);
          if (element) {
            guestButton2 = element;
            console.log(`‚úÖ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —á–µ—Ä–µ–∑ CSS: ${selector}`);
            break;
          }
        }
      } catch (error) {
        console.log(`‚ùå –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${selector}`);
      }
    }
    
    if (!guestButton2) {
      console.log('‚ùå –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –∫–Ω–æ–ø–∫–∞ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      throw new Error('–ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
    
    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
    console.log('üñ±Ô∏è –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
    await guestButton2.click();
    
    // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Å—Ç—è
    console.log('‚è≥ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –∂–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Å—Ç—è');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Å—Ç—è
    console.log('üì∏ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
    await page2.screenshot({ 
      path: './test_screenshots/step1_04_browser2_after_guest_login.png',
      fullPage: true 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –≥–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const userInfo2 = await page2.evaluate(() => {
      const userElement = document.querySelector('[data-testid="current-user"], .user-info, .profile-info');
      return userElement ? userElement.innerText : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    });
    console.log('üë§ –í—Ç–æ—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userInfo2);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ
    if (userInfo1 !== userInfo2) {
      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Å—Ç—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
      console.log(`   –ì–æ—Å—Ç—å 1: ${userInfo1}`);
      console.log(`   –ì–æ—Å—Ç—å 2: ${userInfo2}`);
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±–∞ –≥–æ—Å—Ç—è –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      console.log(`   –ì–æ—Å—Ç—å 1: ${userInfo1}`);
      console.log(`   –ì–æ—Å—Ç—å 2: ${userInfo2}`);
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    await page1.screenshot({ 
      path: './test_screenshots/step1_05_browser1_final.png',
      fullPage: true 
    });
    await page2.screenshot({ 
      path: './test_screenshots/step1_06_browser2_final.png',
      fullPage: true 
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç —à–∞–≥–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–≤–∞ –≥–æ—Å—Ç—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —à–∞–≥–∞ 1:', error.message);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—à–∏–±–æ–∫
    if (browser1) {
      const page1 = (await browser1.pages())[0];
      if (page1) {
        await page1.screenshot({ 
          path: './test_screenshots/step1_error_browser1.png',
          fullPage: true 
        });
      }
    }
    
    if (browser2) {
      const page2 = (await browser2.pages())[0];
      if (page2) {
        await page2.screenshot({ 
          path: './test_screenshots/step1_error_browser2.png',
          fullPage: true 
        });
      }
    }
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
    if (browser1) {
      await browser1.close();
    }
    if (browser2) {
      await browser2.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testStep1TwoGuests().catch(console.error); 