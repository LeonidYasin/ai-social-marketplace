const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');

class IntelligentUIAnalyzerV3 {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.userProfiles = [];
        this.stepCounter = 0;
    }

    async init(browserCount = 2) {
        console.log(`üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ UI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ V3 (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        for (let i = 0; i < browserCount; i++) {
            const profileDir = `./intelligent-v3-user-data-${i}`;
            
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
            }
            
            this.userProfiles.push(profileDir);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: [
                    '--start-maximized', 
                    '--no-sandbox',
                    `--user-data-dir=${this.userProfiles[i]}`,
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor'
                ]
            });
            
            const page = await browser.newPage();
            
            await page.setExtraHTTPHeaders({
                'X-User-Agent': `IntelligentV3-${i + 1}`,
                'X-User-ID': `user-${i + 1}`
            });
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º: ${this.userProfiles[i]}`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/intelligent_v3_step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async analyzeCurrentState(pageIndex) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è`);
        
        try {
            const stateInfo = await this.pages[pageIndex].evaluate(() => {
                const info = {
                    viewport: {
                        width: window.innerWidth,
                        height: window.innerHeight
                    },
                    panels: {
                        top: null,
                        left: null,
                        right: null,
                        center: null
                    },
                    modals: [],
                    buttons: [],
                    currentUser: null,
                    loginState: 'unknown'
                };

                // –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–ù–û–ü–û–ö
                const allButtons = Array.from(document.querySelectorAll('button, [role="button"], .btn, [class*="button"], [data-testid], [aria-label]'));
                allButtons.forEach(btn => {
                    const rect = btn.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        const text = btn.textContent?.trim() || '';
                        const aria = btn.getAttribute('aria-label') || '';
                        const testid = btn.getAttribute('data-testid') || '';
                        const className = typeof btn.className === 'string' ? btn.className : '';
                        
                        info.buttons.push({
                            text: text,
                            ariaLabel: aria,
                            dataTestId: testid,
                            className: className,
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            visible: rect.width > 0 && rect.height > 0 && rect.top >= 0 && rect.left >= 0
                        });
                    }
                });

                // –ê–ù–ê–õ–ò–ó –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
                const modals = document.querySelectorAll('[class*="modal"], [class*="dialog"], [class*="popup"], [role="dialog"]');
                modals.forEach(modal => {
                    const rect = modal.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        info.modals.push({
                            tagName: modal.tagName,
                            className: typeof modal.className === 'string' ? modal.className : '',
                            text: modal.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            visible: rect.width > 0 && rect.height > 0
                        });
                    }
                });

                // –ê–ù–ê–õ–ò–ó –ü–ê–ù–ï–õ–ï–ô
                const topElements = document.querySelectorAll('header, [class*="header"], [class*="app-bar"], [class*="top"], [class*="navbar"]');
                for (const el of topElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && rect.y < window.innerHeight * 0.2) {
                        info.panels.top = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                        break;
                    }
                }

                const rightElements = document.querySelectorAll('[class*="sidebar"], [class*="panel"], [class*="users"], [class*="right"]');
                for (const el of rightElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && rect.x > window.innerWidth * 0.6) {
                        info.panels.right = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                            users: []
                        };
                        
                        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
                        const userElements = el.querySelectorAll('[class*="user"], [class*="profile"], [data-testid*="user"], [class*="avatar"], [class*="list-item"]');
                        userElements.forEach(user => {
                            const userRect = user.getBoundingClientRect();
                            if (userRect.width > 0 && userRect.height > 0) {
                                info.panels.right.users.push({
                                    tagName: user.tagName,
                                    className: typeof user.className === 'string' ? user.className : '',
                                    text: user.textContent?.trim() || '',
                                    position: { x: userRect.x, y: userRect.y, width: userRect.width, height: userRect.height },
                                    isCurrentUser: user.textContent?.includes('(–í—ã)') || user.textContent?.includes('(You)') || false
                                });
                            }
                        });
                        break;
                    }
                }

                const centerElements = document.querySelectorAll('main, [class*="main"], [class*="content"], [class*="feed"], [class*="center"]');
                for (const el of centerElements) {
                    const rect = el.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0 && 
                        rect.x > window.innerWidth * 0.2 && rect.x < window.innerWidth * 0.6) {
                        info.panels.center = {
                            element: el.tagName,
                            className: typeof el.className === 'string' ? el.className : '',
                            text: el.textContent?.substring(0, 200),
                            position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height }
                        };
                        break;
                    }
                }

                // –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –í–•–û–î–ê
                if (info.panels.right && info.panels.right.users.length > 0) {
                    info.loginState = 'logged_in';
                    const currentUser = info.panels.right.users.find(user => user.isCurrentUser);
                    if (currentUser) {
                        info.currentUser = currentUser.text;
                    }
                } else if (info.modals.length > 0) {
                    info.loginState = 'modal_open';
                } else if (info.buttons.some(btn => btn.text.toLowerCase().includes('–≤–æ–π—Ç–∏') || btn.text.toLowerCase().includes('login'))) {
                    info.loginState = 'login_required';
                } else {
                    info.loginState = 'unknown';
                }

                return info;
            });

            console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            console.log(`   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞: ${stateInfo.loginState}`);
            console.log(`   - –ö–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: ${stateInfo.buttons.length}`);
            console.log(`   - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞: ${stateInfo.modals.length}`);
            console.log(`   - –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: ${stateInfo.panels.top ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: ${stateInfo.panels.right ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å: ${stateInfo.panels.center ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`   - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${stateInfo.currentUser || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);

            return stateInfo;

        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`, error.message);
            return null;
        }
    }

    async intelligentGuestLoginV3(pageIndex) {
        console.log(`\nüß† –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ V3`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const initialState = await this.analyzeCurrentState(pageIndex);
        
        if (initialState.loginState === 'logged_in') {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`);
            return { success: true, alreadyLoggedIn: true, user: initialState.currentUser };
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        const guestButton = initialState.buttons.find(btn => {
            const text = btn.text.toLowerCase();
            const aria = btn.ariaLabel.toLowerCase();
            return (text.includes('–≥–æ—Å—Ç—å') && text.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                   (aria.includes('–≥–æ—Å—Ç—å') && aria.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) ||
                   (text.includes('guest') && text.includes('continue')) ||
                   (aria.includes('guest') && aria.includes('continue'));
        });
        
        if (!guestButton) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:`);
            initialState.buttons.forEach((btn, index) => {
                console.log(`   ${index + 1}. "${btn.text}" (${btn.ariaLabel})`);
            });
            return { success: false, reason: 'no_guest_button_found' };
        }
        
        console.log(`üéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ "${guestButton.text}"`);
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        const clickX = guestButton.position.x + guestButton.position.width / 2;
        const clickY = guestButton.position.y + guestButton.position.height / 2;
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${clickX}, ${clickY})`);
        await this.pages[pageIndex].mouse.click(clickX, clickY);
        
        // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        const afterClickState = await this.analyzeCurrentState(pageIndex);
        
        // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if (afterClickState.loginState === 'modal_open') {
            console.log(`üìã –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—Ç–∫—Ä—ã–ª–æ—Å—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...`);
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É EMAIL –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            const emailButton = afterClickState.buttons.find(btn => {
                const text = btn.text.toLowerCase();
                const aria = btn.ariaLabel.toLowerCase();
                return text.includes('email') || aria.includes('email') || text.includes('–ø–æ—á—Ç–∞') || aria.includes('–ø–æ—á—Ç–∞');
            });
            
            if (emailButton) {
                console.log(`üìß –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ EMAIL "${emailButton.text}"`);
                
                const emailClickX = emailButton.position.x + emailButton.position.width / 2;
                const emailClickY = emailButton.position.y + emailButton.position.height / 2;
                console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ EMAIL (${emailClickX}, ${emailClickY})`);
                await this.pages[pageIndex].mouse.click(emailClickX, emailClickY);
                
                // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const finalState = await this.analyzeCurrentState(pageIndex);
                
                if (finalState.loginState === 'logged_in') {
                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ EMAIL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                    return { success: true, loginMethod: 'guest_email', user: finalState.currentUser };
                } else {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ EMAIL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return { success: false, reason: 'email_login_failed' };
                }
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–Ω–æ–ø–∫–∞ EMAIL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ`);
                return { success: false, reason: 'no_email_button_in_modal' };
            }
        } else if (afterClickState.loginState === 'logged_in') {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return { success: true, loginMethod: 'direct_guest', user: afterClickState.currentUser };
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
            return { success: false, reason: 'login_failed_after_click' };
        }
    }

    async getCurrentUserNameV3(pageIndex) {
        console.log(`üë§ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è V3`);
        
        try {
            const stateInfo = await this.analyzeCurrentState(pageIndex);
            
            if (stateInfo.currentUser) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: "${stateInfo.currentUser}"`);
                return stateInfo.currentUser;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏, –∏—â–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
            if (stateInfo.panels.top) {
                const profileButton = stateInfo.buttons.find(btn => 
                    btn.className.includes('avatar') || 
                    btn.className.includes('profile') || 
                    btn.ariaLabel.includes('–ø—Ä–æ—Ñ–∏–ª—å') || 
                    btn.ariaLabel.includes('profile')
                );
                
                if (profileButton) {
                    console.log(`üéØ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è "${profileButton.text}"`);
                    
                    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
                    const clickX = profileButton.position.x + profileButton.position.width / 2;
                    const clickY = profileButton.position.y + profileButton.position.height / 2;
                    console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é (${clickX}, ${clickY})`);
                    await this.pages[pageIndex].mouse.click(clickX, clickY);
                    
                    // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    const profileState = await this.analyzeCurrentState(pageIndex);
                    
                    // –ò—â–µ–º –∏–º—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Ñ–∏–ª—è
                    if (profileState.modals.length > 0) {
                        for (const modal of profileState.modals) {
                            if (modal.text.toLowerCase().includes('–≥–æ—Å—Ç—å') || modal.text.toLowerCase().includes('guest')) {
                                const userName = modal.text.replace(/[–ì–¢]/g, '').replace(/\(–í—ã\)/g, '').trim();
                                if (userName && userName.length > 2) {
                                    console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è: "${userName}"`);
                                    return userName;
                                }
                            }
                        }
                    }
                }
            }
            
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
            return null;
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
            return null;
        }
    }

    async checkUserVisibilityV3(pageIndex, targetUserName) {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${targetUserName}" V3`);
        
        try {
            const stateInfo = await this.analyzeCurrentState(pageIndex);
            
            if (!stateInfo.panels.right) {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return { visible: false, reason: 'no_right_panel' };
            }
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
            const targetUser = stateInfo.panels.right.users.find(user => {
                const userText = user.text.toLowerCase();
                const targetText = targetUserName.toLowerCase();
                return userText.includes(targetText) || targetText.includes(userText);
            });
            
            if (targetUser) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${targetUserName}" –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
                console.log(`   - –¢–µ–∫—Å—Ç: "${targetUser.text}"`);
                console.log(`   - –ö–ª–∞—Å—Å: ${targetUser.className}`);
                console.log(`   - –ü–æ–∑–∏—Ü–∏—è: x=${targetUser.position.x}, y=${targetUser.position.y}`);
                return { 
                    visible: true, 
                    user: targetUser,
                    matchType: 'exact'
                };
            } else {
                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${targetUserName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏`);
                console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
                stateInfo.panels.right.users.forEach((user, index) => {
                    console.log(`   ${index + 1}. "${user.text}"`);
                });
                return { visible: false, reason: 'user_not_found', availableUsers: stateInfo.panels.right.users };
            }
            
        } catch (error) {
            console.error(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
            return { visible: false, reason: 'error', error: error.message };
        }
    }

    async runIntelligentTestV3() {
        try {
            console.log('üß† –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è V3');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { waitUntil: 'networkidle2' });
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥
            console.log('\nüìã –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            const loginResults = [];
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const loginResult = await this.intelligentGuestLoginV3(i);
                loginResults.push(loginResult);
                
                if (!loginResult.success) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                    return false;
                }
            }
            
            // –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('\nüìã –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            const userNames = [];
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\n--- –ë—Ä–∞—É–∑–µ—Ä ${i + 1} ---`);
                const userName = await this.getCurrentUserNameV3(i);
                userNames.push(userName);
                
                if (!userName) {
                    console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
                    return false;
                }
            }
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (this.pages.length > 1) {
                console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                
                for (let i = 0; i < this.pages.length; i++) {
                    for (let j = 0; j < this.pages.length; j++) {
                        if (i !== j) {
                            console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                            
                            const visibilityResult = await this.checkUserVisibilityV3(i, userNames[j]);
                            
                            if (visibilityResult.visible) {
                                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userNames[j]}" –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                            } else {
                                console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –ù–ï –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${userNames[j]}" –∏–∑ –ë—Ä–∞—É–∑–µ—Ä–∞ ${j + 1}`);
                                console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${visibilityResult.reason}`);
                            }
                        }
                    }
                }
            }
            
            console.log('\nüéâ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ V3:', error.message);
            return false;
        }
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        for (const profileDir of this.userProfiles) {
            if (fs.existsSync(profileDir)) {
                fs.rmSync(profileDir, { recursive: true, force: true });
                console.log(`üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω: ${profileDir}`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ V3
async function main() {
    const analyzer = new IntelligentUIAnalyzerV3();
    
    try {
        await analyzer.init(2); // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        const success = await analyzer.runIntelligentTestV3();
        
        if (success) {
            console.log('\n‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V3 –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ V3 –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await analyzer.close();
    }
}

main().catch(console.error); 