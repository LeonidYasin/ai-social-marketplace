const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');

async function analyzeStep1Screenshot() {
  const screenshotPath = './test_screenshots/step1_01_initial.png';
  
  if (!fs.existsSync(screenshotPath)) {
    console.error('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', screenshotPath);
    return;
  }
  
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç step1_01_initial.png...');
  
  try {
    const { data: { text, words } } = await Tesseract.recognize(screenshotPath, 'rus+eng', {
      logger: m => {
        if (m.status === 'recognizing text') {
          process.stdout.write(`\r${Math.round(m.progress * 100)}%`);
        }
      }
    });
    
    console.log('\n\nüìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:');
    console.log('='.repeat(50));
    console.log(text);
    console.log('='.repeat(50));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
    const loginKeywords = ['–í–æ–π—Ç–∏', 'Login', 'Sign in', '–í—Ö–æ–¥', '–ü—Ä–æ—Ñ–∏–ª—å', 'Profile', '–í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£'];
    const foundLoginElements = words ? words.filter(w => 
      loginKeywords.some(keyword => 
        w.text.toLowerCase().includes(keyword.toLowerCase())
      )
    ) : [];
    
    if (foundLoginElements.length > 0) {
      console.log('\nüîò –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞:');
      foundLoginElements.forEach((element, index) => {
        console.log(`  ${index + 1}. "${element.text}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(element.confidence)}%)`);
      });
    } else {
      console.log('\n‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');
      console.log('  - –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –≤–∏–¥–Ω–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ');
      console.log('  - –ö–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\nüìù –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:');
    if (words) {
      words.slice(0, 20).forEach((word, index) => {
        console.log(`  ${index + 1}. "${word.text}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(word.confidence)}%)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

analyzeStep1Screenshot(); 