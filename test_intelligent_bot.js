const { IntelligentOCRBot } = require('./intelligent_ocr_bot');

class IntelligentBotTester {
    constructor() {
        this.bot = null;
        this.results = [];
    }

    async initialize() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...');
        
        this.bot = new IntelligentOCRBot();
        await this.bot.init(1); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 1 –±—Ä–∞—É–∑–µ—Ä–æ–º
        console.log('‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async runStateAnalysisTest() {
        console.log('\nüß† –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        
        const scenario = {
            name: '–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            steps: [
                {
                    action: 'navigate',
                    url: 'http://localhost:3000',
                    description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
                },
                {
                    action: 'wait',
                    duration: 3000,
                    description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                },
                {
                    action: 'analyze_state',
                    browserIndex: 0,
                    description: '–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è'
                },
                {
                    action: 'click',
                    browserIndex: 0,
                    text: '–≥–æ—Å—Ç—å',
                    description: '–≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
                },
                {
                    action: 'wait_for_state',
                    browserIndex: 0,
                    targetState: '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª',
                    timeout: 10000,
                    description: '–æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                },
                {
                    action: 'analyze_state',
                    browserIndex: 0,
                    description: '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞'
                },
                {
                    action: 'verify',
                    browserIndex: 0,
                    text: '–ø–æ—Å—Ç',
                    description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ'
                },
                {
                    action: 'click',
                    browserIndex: 0,
                    text: '—Å–æ–∑–¥–∞—Ç—å',
                    description: '—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                    required: false
                },
                {
                    action: 'wait_for_state',
                    browserIndex: 0,
                    targetState: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                    timeout: 5000,
                    description: '–æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞',
                    required: false
                }
            ]
        };

        try {
            const result = await this.bot.runIntelligentScenario(scenario);
            this.results.push({
                scenario: scenario.name,
                success: result.success,
                steps: result.steps,
                stateTransitions: result.stateTransitions,
                error: result.error
            });
            
            console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
            return result;
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
            this.results.push({
                scenario: scenario.name,
                success: false,
                error: error.message
            });
            return { success: false, error: error.message };
        }
    }

    async runMultiStateTest() {
        console.log('\nüîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π...');
        
        const scenario = {
            name: '–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π',
            description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            steps: [
                {
                    action: 'navigate',
                    url: 'http://localhost:3000',
                    description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
                },
                {
                    action: 'wait',
                    duration: 3000,
                    description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                },
                {
                    action: 'analyze_state',
                    browserIndex: 0,
                    description: '–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è'
                },
                {
                    action: 'click',
                    browserIndex: 0,
                    text: '–≥–æ—Å—Ç—å',
                    description: '–≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
                },
                {
                    action: 'wait_for_state',
                    browserIndex: 0,
                    targetState: '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª',
                    timeout: 10000,
                    description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞'
                },
                {
                    action: 'analyze_state',
                    browserIndex: 0,
                    description: '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                },
                {
                    action: 'verify',
                    browserIndex: 0,
                    text: '—á–∞—Ç',
                    description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞',
                    required: false
                },
                {
                    action: 'click',
                    browserIndex: 0,
                    text: '—á–∞—Ç',
                    description: '–æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞',
                    required: false
                },
                {
                    action: 'wait_for_state',
                    browserIndex: 0,
                    targetState: '–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç',
                    timeout: 5000,
                    description: '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞',
                    required: false
                },
                {
                    action: 'analyze_state',
                    browserIndex: 0,
                    description: '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞'
                }
            ]
        };

        try {
            const result = await this.bot.runIntelligentScenario(scenario);
            this.results.push({
                scenario: scenario.name,
                success: result.success,
                steps: result.steps,
                stateTransitions: result.stateTransitions,
                error: result.error
            });
            
            console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
            return result;
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
            this.results.push({
                scenario: scenario.name,
                success: false,
                error: error.message
            });
            return { success: false, error: error.message };
        }
    }

    generateIntelligentReport() {
        console.log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê');
        console.log('=' .repeat(60));
        
        const totalTests = this.results.length;
        const successfulTests = this.results.filter(r => r.success).length;
        const failedTests = totalTests - successfulTests;
        
        console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
        console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}`);
        console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedTests}`);
        console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successfulTests / totalTests) * 100).toFixed(1)}%`);
        
        console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        this.results.forEach((result, index) => {
            const status = result.success ? '‚úÖ' : '‚ùå';
            console.log(`\n${status} ${result.scenario}`);
            
            if (!result.success && result.error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
            }
            
            if (result.steps) {
                const successfulSteps = result.steps.filter(s => s.success).length;
                const totalSteps = result.steps.length;
                console.log(`   üìä –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successfulSteps}/${totalSteps}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
                if (result.stateTransitions && result.stateTransitions.length > 0) {
                    console.log(`   üîÑ –ü–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π:`);
                    result.stateTransitions.forEach(transition => {
                        console.log(`      ${transition.from} ‚Üí ${transition.to} (—à–∞–≥ ${transition.step})`);
                    });
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏
                const failedSteps = result.steps.filter(s => !s.success);
                if (failedSteps.length > 0) {
                    console.log(`   ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏:`);
                    failedSteps.forEach(step => {
                        console.log(`      - –®–∞–≥ ${step.step}: ${step.description}`);
                        if (step.error) {
                            console.log(`        –û—à–∏–±–∫–∞: ${step.error}`);
                        }
                    });
                }
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        const report = {
            timestamp: new Date().toISOString(),
            summary: {
                totalTests,
                successfulTests,
                failedTests,
                successRate: (successfulTests / totalTests) * 100
            },
            results: this.results
        };
        
        const fs = require('fs');
        const reportPath = './test_logs/intelligent_bot_report.json';
        
        if (!fs.existsSync('./test_logs')) {
            fs.mkdirSync('./test_logs', { recursive: true });
        }
        
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
    }

    async cleanup() {
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        
        if (this.bot) {
            await this.bot.close();
            console.log('‚úÖ –ë–æ—Ç –æ—á–∏—â–µ–Ω');
        }
    }

    async runAllTests() {
        try {
            await this.initialize();
            
            console.log('\nüéØ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í');
            console.log('=' .repeat(60));
            
            // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const stateResult = await this.runStateAnalysisTest();
            if (!stateResult.success) {
                console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.');
                this.generateIntelligentReport();
                return;
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const multiStateResult = await this.runMultiStateTest();
            if (!multiStateResult.success) {
                console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –ø—Ä–æ—à–µ–ª. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.');
                this.generateIntelligentReport();
                return;
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            await this.bot.generateIntelligentReport();
            this.generateIntelligentReport();
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        } finally {
            await this.cleanup();
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
async function checkServers() {
    const http = require('http');
    
    const checkServer = (port, name) => {
        return new Promise((resolve) => {
            const req = http.request(`http://localhost:${port}`, { method: 'HEAD' }, (res) => {
                console.log(`‚úÖ ${name} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
                resolve(true);
            });
            
            req.on('error', () => {
                console.log(`‚ùå ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
                resolve(false);
            });
            
            req.setTimeout(3000, () => {
                console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${name} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
                resolve(false);
            });
            
            req.end();
        });
    };
  
    const backendOk = await checkServer(8000, 'Backend');
    const frontendOk = await checkServer(3000, 'Frontend');
    
    if (!backendOk || !frontendOk) {
        console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!');
        console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.');
        console.log('Backend: npm start (–ø–æ—Ä—Ç 8000)');
        console.log('Frontend: npm start (–ø–æ—Ä—Ç 3000)');
        return false;
    }
    
    return true;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
    const tester = new IntelligentBotTester();
    await tester.runAllTests();
}

// –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä–≤–µ—Ä–æ–≤
if (require.main === module) {
    checkServers().then(serversOk => {
        if (serversOk) {
            console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
            main().catch(console.error);
        } else {
            console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤');
            process.exit(1);
        }
    });
}

module.exports = { IntelligentBotTester }; 