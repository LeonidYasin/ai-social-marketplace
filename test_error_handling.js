const { OCRMasterBot } = require('./ocr_master_bot');

class ErrorHandlingTester {
  constructor() {
    this.bot = null;
    this.results = [];
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    this.bot = new OCRMasterBot();
    await this.bot.init(1); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å 1 –±—Ä–∞—É–∑–µ—Ä–æ–º
    console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async runErrorTest() {
    console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π —Å –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const scenario = {
      name: '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
        },
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        {
          action: 'click',
          browserIndex: 0,
          text: '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_—ç–ª–µ–º–µ–Ω—Ç',
          description: '–ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤—ã—à–µ
        {
          action: 'verify',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–æ–≤ (–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)'
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        error: result.error
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runTimeoutTest() {
    console.log('\n‚è∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ç–∞–π–º–∞—É—Ç–∞...');
    
    const scenario = {
      name: '–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_—Ç–µ–∫—Å—Ç',
          timeout: 5000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–∞–π–º–∞—É—Ç)'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤—ã—à–µ
        {
          action: 'verify',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–æ–≤ (–Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)'
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        error: result.error
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  async runNonCriticalErrorTest() {
    console.log('\n‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...');
    
    const scenario = {
      name: '–¢–µ—Å—Ç –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö',
      steps: [
        {
          action: 'navigate',
          url: 'http://localhost:3000',
          description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        },
        {
          action: 'wait',
          duration: 3000,
          description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
        {
          action: 'click',
          browserIndex: 0,
          text: '–≥–æ—Å—Ç—å',
          description: '–≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
        },
        {
          action: 'waitFor',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          timeout: 10000,
          description: '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã'
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (required: false)
        {
          action: 'verify',
          browserIndex: 0,
          text: '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_—ç–ª–µ–º–µ–Ω—Ç',
          description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ)',
          required: false
        },
        // –≠—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤—ã—à–µ
        {
          action: 'verify',
          browserIndex: 0,
          text: '–ø–æ—Å—Ç',
          description: '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–æ–≤ (–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è)'
        }
      ]
    };

    try {
      const result = await this.bot.runScenario(scenario);
      this.results.push({
        scenario: scenario.name,
        success: result.success,
        steps: result.steps,
        error: result.error
      });
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`);
      return result;
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
      this.results.push({
        scenario: scenario.name,
        success: false,
        error: error.message
      });
      return { success: false, error: error.message };
    }
  }

  generateErrorReport() {
    console.log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û–ë –û–ë–†–ê–ë–û–¢–ö–ï –û–®–ò–ë–û–ö');
    console.log('=' .repeat(60));
    
    const totalTests = this.results.length;
    const successfulTests = this.results.filter(r => r.success).length;
    const failedTests = totalTests - successfulTests;
    
    console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failedTests}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successfulTests / totalTests) * 100).toFixed(1)}%`);
    
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    this.results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`\n${status} ${result.scenario}`);
      
      if (!result.success && result.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
      
      if (result.steps) {
        const successfulSteps = result.steps.filter(s => s.success).length;
        const totalSteps = result.steps.length;
        console.log(`   üìä –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successfulSteps}/${totalSteps}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏
        const failedSteps = result.steps.filter(s => !s.success);
        if (failedSteps.length > 0) {
          console.log(`   ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —à–∞–≥–∏:`);
          failedSteps.forEach(step => {
            console.log(`      - –®–∞–≥ ${step.step}: ${step.description}`);
            if (step.error) {
              console.log(`        –û—à–∏–±–∫–∞: ${step.error}`);
            }
          });
        }
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –û–®–ò–ë–û–ö:');
    const allSteps = this.results.flatMap(r => r.steps || []);
    const failedSteps = allSteps.filter(s => !s.success);
    
    if (failedSteps.length > 0) {
      const errorTypes = {};
      failedSteps.forEach(step => {
        if (step.error) {
          let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          if (step.error.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) errorType = '—ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
          else if (step.error.includes('—Ç–∞–π–º–∞—É—Ç')) errorType = '—Ç–∞–π–º–∞—É—Ç';
          else if (step.error.includes('–∫–ª–∏–∫')) errorType = '–æ—à–∏–±–∫–∞ –∫–ª–∏–∫–∞';
          
          errorTypes[errorType] = (errorTypes[errorType] || 0) + 1;
        }
      });
      
      Object.entries(errorTypes).forEach(([type, count]) => {
        console.log(`   ${type}: ${count} —Ä–∞–∑`);
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests,
        successfulTests,
        failedTests,
        successRate: (successfulTests / totalTests) * 100
      },
      results: this.results,
      errorAnalysis: failedSteps.length > 0 ? {
        totalFailedSteps: failedSteps.length,
        errorTypes: failedSteps.reduce((acc, step) => {
          if (step.error) {
            let errorType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            if (step.error.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) errorType = '—ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
            else if (step.error.includes('—Ç–∞–π–º–∞—É—Ç')) errorType = '—Ç–∞–π–º–∞—É—Ç';
            else if (step.error.includes('–∫–ª–∏–∫')) errorType = '–æ—à–∏–±–∫–∞ –∫–ª–∏–∫–∞';
            
            acc[errorType] = (acc[errorType] || 0) + 1;
          }
          return acc;
        }, {})
      } : null
    };
    
    const fs = require('fs');
    const reportPath = './test_logs/error_handling_report.json';
    
    if (!fs.existsSync('./test_logs')) {
      fs.mkdirSync('./test_logs', { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
  }

  async cleanup() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (this.bot) {
      await this.bot.close();
      console.log('‚úÖ –ë–æ—Ç –æ—á–∏—â–µ–Ω');
    }
  }

  async runAllTests() {
    try {
      await this.initialize();
      
      console.log('\nüéØ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö');
      console.log('=' .repeat(60));
      
      // –¢–µ—Å—Ç 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
      console.log('\nüß™ –¢–ï–°–¢ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
      console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ');
      const errorResult = await this.runErrorTest();
      
      if (!errorResult.success) {
        console.log('\n‚úÖ –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.generateErrorReport();
        return;
      }
      
      // –¢–µ—Å—Ç 2: –¢–∞–π–º–∞—É—Ç (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
      console.log('\n‚è∞ –¢–ï–°–¢ 2: –¢–∞–π–º–∞—É—Ç');
      console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ');
      const timeoutResult = await this.runTimeoutTest();
      
      if (!timeoutResult.success) {
        console.log('\n‚úÖ –¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.generateErrorReport();
        return;
      }
      
      // –¢–µ—Å—Ç 3: –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
      console.log('\n‚ö†Ô∏è –¢–ï–°–¢ 3: –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
      console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö');
      const nonCriticalResult = await this.runNonCriticalErrorTest();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.generateErrorReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
      await this.cleanup();
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
async function checkServers() {
  const http = require('http');
  
  const checkServer = (port, name) => {
    return new Promise((resolve) => {
      const req = http.request(`http://localhost:${port}`, { method: 'HEAD' }, (res) => {
        console.log(`‚úÖ ${name} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(true);
      });
      
      req.on('error', () => {
        console.log(`‚ùå ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.setTimeout(3000, () => {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${name} –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve(false);
      });
      
      req.end();
    });
  };
  
  const backendOk = await checkServer(8000, 'Backend');
  const frontendOk = await checkServer(3000, 'Frontend');
  
  if (!backendOk || !frontendOk) {
    console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.');
    console.log('Backend: npm start (–ø–æ—Ä—Ç 8000)');
    console.log('Frontend: npm start (–ø–æ—Ä—Ç 3000)');
    return false;
  }
  
  return true;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new ErrorHandlingTester();
  await tester.runAllTests();
}

// –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä–≤–µ—Ä–æ–≤
if (require.main === module) {
  checkServers().then(serversOk => {
    if (serversOk) {
      console.log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
      main().catch(console.error);
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤');
      process.exit(1);
    }
  });
}

module.exports = { ErrorHandlingTester }; 