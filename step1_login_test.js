const puppeteer = require('puppeteer');

async function step1LoginTest() {
  console.log('üîç –®–∞–≥ 1: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  let browser;
  let page;
  try {
    browser = await puppeteer.launch({ headless: false, slowMo: 800 });
    page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 720 });
    await page.goto('http://localhost:3000');
    await new Promise(resolve => setTimeout(resolve, 2000));
    await page.screenshot({ path: './test_screenshots/step1_01_initial.png', fullPage: true });

    // 1. –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
    await page.waitForSelector('button[aria-label="–í–æ–π—Ç–∏"]', { timeout: 5000 });
    await page.click('button[aria-label="–í–æ–π—Ç–∏"]');
    await new Promise(resolve => setTimeout(resolve, 1000));
    await page.screenshot({ path: './test_screenshots/step1_02_after_login_click.png', fullPage: true });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ (–∏—â–µ–º input[type="email"])
    const emailInputExists = await page.$('input[type="email"], input[placeholder*="email"]');
    if (!emailInputExists) {
      await page.screenshot({ path: './test_screenshots/step1_error_no_email_input.png', fullPage: true });
      throw new Error('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å: –ø–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.type('input[type="email"], input[placeholder*="email"]', 'testuser1@example.com');
    await page.type('input[type="password"]', 'password123');
    await page.screenshot({ path: './test_screenshots/step1_03_form_filled.png', fullPage: true });

    // 4. –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitButton = await page.$('button[type="submit"], button:has-text("–í–æ–π—Ç–∏")');
    if (!submitButton) {
      await page.screenshot({ path: './test_screenshots/step1_error_no_submit.png', fullPage: true });
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    await submitButton.click();
    await new Promise(resolve => setTimeout(resolve, 2000));
    await page.screenshot({ path: './test_screenshots/step1_04_after_submit.png', fullPage: true });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
    const hasToken = await page.evaluate(() => !!localStorage.getItem('authToken'));
    if (!hasToken) {
      await page.screenshot({ path: './test_screenshots/step1_error_no_token.png', fullPage: true });
      throw new Error('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error(error.message);
  } finally {
    if (browser) await browser.close();
  }
}

step1LoginTest().catch(e => console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e.message)); 