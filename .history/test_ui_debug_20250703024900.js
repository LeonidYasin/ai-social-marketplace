const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
const logFile = path.join(screenshotsDir, 'mobile_debug.log');
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}
function log(msg) {
  fs.appendFileSync(logFile, msg + '\n');
  console.log(msg);
}
function logObj(obj) {
  const str = typeof obj === 'string' ? obj : JSON.stringify(obj, null, 2);
  fs.appendFileSync(logFile, str + '\n');
  console.log(str);
}
async function screenshot(page, name) {
  const file = path.join(screenshotsDir, name);
  await page.screenshot({ path: file });
  log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${name}`);
}
async function debugMobileIssue() {
  fs.writeFileSync(logFile, ''); // clear log
  log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π...');
  let browser;
  let page;
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1500,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await screenshot(page, 'mobile_01_initial.png');
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    await page.waitForSelector('button', { timeout: 10000 });
    const buttons = await page.evaluate(() => {
      return Array.from(document.querySelectorAll('button')).map((btn, index) => ({
        index,
        text: btn.textContent.trim(),
        className: btn.className,
        id: btn.id,
        visible: btn.offsetParent !== null
      }));
    });
    log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:');
    logObj(buttons);
    await screenshot(page, 'mobile_02_buttons.png');
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
    const loginButtonIndex = buttons.findIndex(btn => btn.text === '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    if (loginButtonIndex !== -1) {
      log(`üñ±Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" (–∏–Ω–¥–µ–∫—Å: ${loginButtonIndex})`);
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
      try {
        // –°–ø–æ—Å–æ–± 1: –ø–æ –∏–Ω–¥–µ–∫—Å—É
        log('üñ±Ô∏è –°–ø–æ—Å–æ–± 1: –∫–ª–∏–∫ –ø–æ –∏–Ω–¥–µ–∫—Å—É');
        await page.click(`button:nth-child(${loginButtonIndex + 1})`);
        await new Promise(resolve => setTimeout(resolve, 3000));
        await screenshot(page, 'mobile_03_after_login_click_way1.png');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const afterClick1 = await page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          return {
            hasDialog: !!dialog,
            dialogTitle: dialog?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
            allButtons: Array.from(document.querySelectorAll('button')).map(btn => btn.textContent.trim()),
            dialogText: dialog?.textContent || '–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞'
          };
        });
        log('üìã –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ —Å–ø–æ—Å–æ–±–æ–º 1:');
        logObj(afterClick1);
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–ø–æ—Å–æ–±–æ–º 1: ${error.message}`);
      }
      
      try {
        // –°–ø–æ—Å–æ–± 2: –ø–æ —Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ XPath
        log('üñ±Ô∏è –°–ø–æ—Å–æ–± 2: –∫–ª–∏–∫ —á–µ—Ä–µ–∑ XPath');
        const loginButtonXPath = await page.$x("//button[contains(text(), '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')]");
        if (loginButtonXPath.length > 0) {
          await loginButtonXPath[0].click();
          await new Promise(resolve => setTimeout(resolve, 3000));
          await screenshot(page, 'mobile_04_after_login_click_way2.png');
          
          const afterClick2 = await page.evaluate(() => {
            const dialog = document.querySelector('[role="dialog"]');
            return {
              hasDialog: !!dialog,
              dialogTitle: dialog?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
              allButtons: Array.from(document.querySelectorAll('button')).map(btn => btn.textContent.trim()),
              dialogText: dialog?.textContent || '–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞'
            };
          });
          log('üìã –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ —Å–ø–æ—Å–æ–±–æ–º 2:');
          logObj(afterClick2);
        }
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–ø–æ—Å–æ–±–æ–º 2: ${error.message}`);
      }
      
      try {
        // –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ evaluate
        log('üñ±Ô∏è –°–ø–æ—Å–æ–± 3: –∫–ª–∏–∫ —á–µ—Ä–µ–∑ evaluate');
        await page.evaluate((index) => {
          const buttons = document.querySelectorAll('button');
          if (buttons[index]) {
            buttons[index].click();
          }
        }, loginButtonIndex);
        await new Promise(resolve => setTimeout(resolve, 3000));
        await screenshot(page, 'mobile_05_after_login_click_way3.png');
        
        const afterClick3 = await page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          return {
            hasDialog: !!dialog,
            dialogTitle: dialog?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
            allButtons: Array.from(document.querySelectorAll('button')).map(btn => btn.textContent.trim()),
            dialogText: dialog?.textContent || '–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞'
          };
        });
        log('üìã –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ —Å–ø–æ—Å–æ–±–æ–º 3:');
        logObj(afterClick3);
        
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–ø–æ—Å–æ–±–æ–º 3: ${error.message}`);
      }
      
    } else {
      log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    if (page) {
      await screenshot(page, 'mobile_error.png');
    }
  } finally {
    log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}
debugMobileIssue().catch(error => {
  log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ' + error.message);
}); 