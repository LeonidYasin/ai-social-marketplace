const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function finalTest() {
  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1000,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await page.screenshot({ path: path.join(screenshotsDir, 'final_01_initial.png') });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
    const loginButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginBtn = buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'));
      return loginBtn ? {
        index: buttons.indexOf(loginBtn),
        text: loginBtn.textContent.trim(),
        className: loginBtn.className
      } : null;
    });
    
    if (loginButton) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${loginButton.text}" (–∏–Ω–¥–µ–∫—Å: ${loginButton.index})`);
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ evaluate
      console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ...');
      await page.evaluate((index) => {
        const buttons = document.querySelectorAll('button');
        if (buttons[index]) {
          buttons[index].click();
        }
      }, loginButton.index);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await page.screenshot({ path: path.join(screenshotsDir, 'final_02_after_login_click.png') });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
      const result = await page.evaluate(() => {
        const dialog = document.querySelector('[role="dialog"]');
        return {
          hasDialog: !!dialog,
          dialogTitle: dialog?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
          dialogButtons: dialog ? Array.from(dialog.querySelectorAll('button')).map(btn => btn.textContent.trim()) : [],
          dialogText: dialog?.textContent || '–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞',
          hasEmail: dialog?.textContent.includes('Email') || false,
          hasWelcome: dialog?.textContent.includes('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å') || false
        };
      });
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞:');
      console.log(JSON.stringify(result, null, 2));
      
      if (result.hasDialog) {
        console.log('‚úÖ –î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã–ª—Å—è!');
        
        if (result.hasEmail) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Email –≤ –¥–∏–∞–ª–æ–≥–µ');
          
          // –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Email
          const emailButton = await page.evaluate(() => {
            const dialog = document.querySelector('[role="dialog"]');
            if (dialog) {
              const buttons = Array.from(dialog.querySelectorAll('button'));
              const emailBtn = buttons.find(btn => btn.textContent.includes('Email'));
              return emailBtn ? {
                index: buttons.indexOf(emailBtn),
                text: emailBtn.textContent.trim()
              } : null;
            }
            return null;
          });
          
          if (emailButton) {
            console.log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Email: "${emailButton.text}"`);
            await page.click(`[role="dialog"] button:nth-child(${emailButton.index + 1})`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            await page.screenshot({ path: path.join(screenshotsDir, 'final_03_after_email_click.png') });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            const formResult = await page.evaluate(() => {
              return {
                hasEmailInput: !!document.querySelector('[data-testid="email-input"]'),
                hasPasswordInput: !!document.querySelector('[data-testid="password-input"]'),
                hasSubmitButton: !!document.querySelector('[data-testid="submit-button"]'),
                formTitle: document.querySelector('[role="dialog"] h1, [role="dialog"] h2, [role="dialog"] h3, [role="dialog"] h4, [role="dialog"] h5, [role="dialog"] h6')?.textContent
              };
            });
            
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ Email:');
            console.log(JSON.stringify(formResult, null, 2));
            
            if (formResult.hasEmailInput) {
              console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞! –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
              
              // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
              console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...');
              await page.type('[data-testid="email-input"]', 'test@example.com');
              await page.type('[data-testid="password-input"]', 'password123');
              
              await page.screenshot({ path: path.join(screenshotsDir, 'final_04_form_filled.png') });
              
              // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
              console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞...');
              await page.click('[data-testid="submit-button"]');
              await new Promise(resolve => setTimeout(resolve, 3000));
              
              await page.screenshot({ path: path.join(screenshotsDir, 'final_05_after_submit.png') });
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞
              const loginResult = await page.evaluate(() => {
                return {
                  hasToken: !!localStorage.getItem('authToken'),
                  hasUser: !!localStorage.getItem('currentUser'),
                  dialogClosed: !document.querySelector('[role="dialog"]')
                };
              });
              
              console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:');
              console.log(JSON.stringify(loginResult, null, 2));
              
              if (loginResult.hasToken && loginResult.hasUser) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! JWT —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
              } else {
                console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º');
              }
              
            } else {
              console.log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ Email');
            }
          } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–µ');
          }
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∏–∞–ª–æ–≥–µ');
        }
      } else {
        console.log('‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (page) {
      await page.screenshot({ path: path.join(screenshotsDir, 'final_error.png') });
    }
  } finally {
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}

finalTest().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 