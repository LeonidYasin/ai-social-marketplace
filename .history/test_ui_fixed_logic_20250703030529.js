const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function testFixedLogic() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1000,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await page.screenshot({ path: path.join(screenshotsDir, 'fixed_01_initial.png') });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
    const loginButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginBtn = buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'));
      return loginBtn ? {
        index: buttons.indexOf(loginBtn),
        text: loginBtn.textContent.trim()
      } : null;
    });
    
    if (loginButton) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${loginButton.text}" (–∏–Ω–¥–µ–∫—Å: ${loginButton.index})`);
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
      console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
      await page.evaluate((index) => {
        const buttons = document.querySelectorAll('button');
        if (buttons[index]) {
          buttons[index].click();
        }
      }, loginButton.index);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await page.screenshot({ path: path.join(screenshotsDir, 'fixed_02_after_login_click.png') });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞...');
      const result = await page.evaluate(() => {
        const dialog = document.querySelector('[role="dialog"]');
        return {
          hasDialog: !!dialog,
          dialogTitle: dialog?.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
          dialogText: dialog?.textContent || '–ù–µ—Ç –¥–∏–∞–ª–æ–≥–∞',
          hasChooseMethod: dialog?.textContent.includes('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞') || false,
          hasEmail: dialog?.textContent.includes('Email') || false,
          hasGoogle: dialog?.textContent.includes('Google') || false,
          hasFacebook: dialog?.textContent.includes('Facebook') || false
        };
      });
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞:');
      console.log(JSON.stringify(result, null, 2));
      
      if (result.hasChooseMethod) {
        console.log('‚úÖ –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω!');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É Email
        const emailButton = await page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          if (dialog) {
            const buttons = Array.from(dialog.querySelectorAll('button'));
            const emailBtn = buttons.find(btn => btn.textContent.includes('Email'));
            return emailBtn ? {
              index: buttons.indexOf(emailBtn),
              text: emailBtn.textContent.trim()
            } : null;
          }
          return null;
        });
        
        if (emailButton) {
          console.log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Email: "${emailButton.text}"`);
          await page.evaluate((index) => {
            const dialog = document.querySelector('[role="dialog"]');
            if (dialog) {
              const buttons = dialog.querySelectorAll('button');
              if (buttons[index]) {
                buttons[index].click();
              }
            }
          }, emailButton.index);
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          await page.screenshot({ path: path.join(screenshotsDir, 'fixed_03_after_email_click.png') });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
          const formResult = await page.evaluate(() => {
            return {
              hasEmailInput: !!document.querySelector('[data-testid="email-input"]'),
              hasPasswordInput: !!document.querySelector('[data-testid="password-input"]'),
              hasSubmitButton: !!document.querySelector('[data-testid="submit-button"]'),
              formTitle: document.querySelector('[role="dialog"] h1, [role="dialog"] h2, [role="dialog"] h3, [role="dialog"] h4, [role="dialog"] h5, [role="dialog"] h6')?.textContent
            };
          });
          
          console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ Email:');
          console.log(JSON.stringify(formResult, null, 2));
          
          if (formResult.hasEmailInput) {
            console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞! –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...');
            await page.type('[data-testid="email-input"]', 'test@example.com');
            await page.type('[data-testid="password-input"]', 'password123');
            
            await page.screenshot({ path: path.join(screenshotsDir, 'fixed_04_form_filled.png') });
            
            // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
            console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞...');
            await page.click('[data-testid="submit-button"]');
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            await page.screenshot({ path: path.join(screenshotsDir, 'fixed_05_after_submit.png') });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞
            const loginResult = await page.evaluate(() => {
              return {
                hasToken: !!localStorage.getItem('authToken'),
                hasUser: !!localStorage.getItem('currentUser'),
                dialogClosed: !document.querySelector('[role="dialog"]')
              };
            });
            
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:');
            console.log(JSON.stringify(loginResult, null, 2));
            
            if (loginResult.hasToken && loginResult.hasUser) {
              console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! JWT —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            } else {
              console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º');
            }
            
          } else {
            console.log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ Email');
          }
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞');
        }
      } else {
        console.log('‚ùå –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (page) {
      await page.screenshot({ path: path.join(screenshotsDir, 'fixed_error.png') });
    }
  } finally {
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}

testFixedLogic().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 