const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function testCompleteFix() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1000,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await page.screenshot({ path: path.join(screenshotsDir, 'complete_01_initial.png') });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–ï–°–¢ 1: Guest-–≤—Ö–æ–¥
    console.log('\nüß™ –¢–ï–°–¢ 1: Guest-–≤—Ö–æ–¥');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"
    const guestButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const guestBtn = buttons.find(btn => btn.textContent.includes('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å'));
      return guestBtn ? {
        index: buttons.indexOf(guestBtn),
        text: guestBtn.textContent.trim()
      } : null;
    });
    
    if (guestButton) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${guestButton.text}"`);
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
      console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"...');
      await page.evaluate((index) => {
        const buttons = document.querySelectorAll('button');
        if (buttons[index]) {
          buttons[index].click();
        }
      }, guestButton.index);
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      await page.screenshot({ path: path.join(screenshotsDir, 'complete_02_after_guest.png') });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç guest-–≤—Ö–æ–¥–∞
      const guestResult = await page.evaluate(() => {
        return {
          hasUser: !!localStorage.getItem('currentUser'),
          hasDialog: !!document.querySelector('[role="dialog"]'),
          userData: localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null
        };
      });
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç guest-–≤—Ö–æ–¥–∞:');
      console.log(JSON.stringify(guestResult, null, 2));
      
      if (guestResult.hasUser && !guestResult.hasDialog) {
        console.log('‚úÖ Guest-–≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã–ª—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
      } else {
        console.log('‚ùå Guest-–≤—Ö–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–ï–°–¢ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    console.log('\nüß™ –¢–ï–°–¢ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
    const loginButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginBtn = buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'));
      return loginBtn ? {
        index: buttons.indexOf(loginBtn),
        text: loginBtn.textContent.trim()
      } : null;
    });
    
    if (loginButton) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: "${loginButton.text}"`);
      
      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
      console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"...');
      await page.evaluate((index) => {
        const buttons = document.querySelectorAll('button');
        if (buttons[index]) {
          buttons[index].click();
        }
      }, loginButton.index);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await page.screenshot({ path: path.join(screenshotsDir, 'complete_03_choose_method.png') });
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É Email
      const emailButton = await page.evaluate(() => {
        const dialog = document.querySelector('[role="dialog"]');
        if (dialog) {
          const buttons = Array.from(dialog.querySelectorAll('button'));
          const emailBtn = buttons.find(btn => btn.textContent.includes('Email'));
          return emailBtn ? {
            index: buttons.indexOf(emailBtn),
            text: emailBtn.textContent.trim()
          } : null;
        }
        return null;
      });
      
      if (emailButton) {
        console.log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Email: "${emailButton.text}"`);
        await page.evaluate((index) => {
          const dialog = document.querySelector('[role="dialog"]');
          if (dialog) {
            const buttons = dialog.querySelectorAll('button');
            if (buttons[index]) {
              buttons[index].click();
            }
          }
        }, emailButton.index);
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_04_login_form.png') });
        
        // –¢–ï–°–¢ 2.1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
        console.log('\nüß™ –¢–ï–°–¢ 2.1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π');
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π...');
        await page.click('[data-testid="submit-button"]');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_05_validation_error.png') });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const validationResult = await page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          return {
            hasError: dialog?.textContent.includes('–í–≤–µ–¥–∏—Ç–µ email') || dialog?.textContent.includes('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'),
            errorText: dialog?.textContent || '–ù–µ—Ç –æ—à–∏–±–∫–∏'
          };
        });
        
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
        console.log(JSON.stringify(validationResult, null, 2));
        
        if (validationResult.hasError) {
          console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π');
        } else {
          console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
        }
        
        // –¢–ï–°–¢ 2.2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email
        console.log('\nüß™ –¢–ï–°–¢ 2.2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        await page.type('[data-testid="email-input"]', 'invalid-email');
        await page.type('[data-testid="password-input"]', 'password123');
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_06_invalid_email.png') });
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
        await page.click('[data-testid="submit-button"]');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_07_email_validation_error.png') });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const emailValidationResult = await page.evaluate(() => {
          const dialog = document.querySelector('[role="dialog"]');
          return {
            hasError: dialog?.textContent.includes('–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
            errorText: dialog?.textContent || '–ù–µ—Ç –æ—à–∏–±–∫–∏'
          };
        });
        
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email:');
        console.log(JSON.stringify(emailValidationResult, null, 2));
        
        if (emailValidationResult.hasError) {
          console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        } else {
          console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
        }
        
        // –¢–ï–°–¢ 2.3: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        console.log('\nüß™ –¢–ï–°–¢ 2.3: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await page.evaluate(() => {
          const emailInput = document.querySelector('[data-testid="email-input"]');
          const passwordInput = document.querySelector('[data-testid="password-input"]');
          if (emailInput) emailInput.value = '';
          if (passwordInput) passwordInput.value = '';
        });
        
        await page.type('[data-testid="email-input"]', 'test@example.com');
        await page.type('[data-testid="password-input"]', 'password123');
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_08_valid_form.png') });
        
        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
        await page.click('[data-testid="submit-button"]');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        await page.screenshot({ path: path.join(screenshotsDir, 'complete_09_after_login.png') });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞
        const loginResult = await page.evaluate(() => {
          return {
            hasToken: !!localStorage.getItem('authToken'),
            hasUser: !!localStorage.getItem('currentUser'),
            dialogClosed: !document.querySelector('[role="dialog"]'),
            userData: localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null
          };
        });
        
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:');
        console.log(JSON.stringify(loginResult, null, 2));
        
        if (loginResult.hasToken && loginResult.hasUser && loginResult.dialogClosed) {
          console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! JWT —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –¥–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã–ª—Å—è');
        } else {
          console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º');
        }
        
      } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (page) {
      await page.screenshot({ path: path.join(screenshotsDir, 'complete_error.png') });
    }
  } finally {
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}

testCompleteFix().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 