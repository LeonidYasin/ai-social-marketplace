const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');

async function analyzeScreenshotsWithOCR() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å OCR...');
  
  const screenshots = [
    'final_01_initial.png',
    'final_02_after_login_click.png'
  ];
  
  for (const screenshot of screenshots) {
    const filePath = path.join('./test_screenshots', screenshot);
    
    if (fs.existsSync(filePath)) {
      console.log(`\nüì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${screenshot}`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        const result = await Tesseract.recognize(
          filePath,
          'rus+eng', // –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏
          {
            logger: m => console.log(`   ${m.status}: ${m.progress * 100}%`)
          }
        );
        
        console.log(`\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:`);
        console.log('‚îÄ'.repeat(50));
        console.log(result.data.text);
        console.log('‚îÄ'.repeat(50));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        const text = result.data.text.toLowerCase();
        
        if (screenshot === 'final_01_initial.png') {
          console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞:');
          if (text.includes('–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          }
          if (text.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"');
          }
          if (text.includes('email')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Email');
          }
        } else if (screenshot === 'final_02_after_login_click.png') {
          console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞:');
          if (text.includes('–≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')) {
            console.log('   ‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –≤—Å–µ –µ—â–µ –≤–∏–¥–Ω–∞');
          }
          if (text.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')) {
            console.log('   ‚úÖ –≠–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" –≤—Å–µ –µ—â–µ –≤–∏–¥–µ–Ω');
          }
          if (text.includes('email')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Email');
          }
          if (text.includes('google')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Google');
          }
          if (text.includes('facebook')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Facebook');
          }
          if (text.includes('telegram')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Telegram');
          }
          if (text.includes('github')) {
            console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ GitHub');
          }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.data.confidence).toFixed(1)}%`);
        console.log(`   –°–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.data.words.length}`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ OCR: ${error.message}`);
      }
      
    } else {
      console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${screenshot}`);
    }
  }
  
  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

analyzeScreenshotsWithOCR().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 