const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
const logFile = path.join(screenshotsDir, 'mobile_debug.log');
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}
function log(msg) {
  fs.appendFileSync(logFile, msg + '\n');
  console.log(msg);
}
function logObj(obj) {
  const str = typeof obj === 'string' ? obj : JSON.stringify(obj, null, 2);
  fs.appendFileSync(logFile, str + '\n');
  console.log(str);
}
async function screenshot(page, name) {
  const file = path.join(screenshotsDir, name);
  await page.screenshot({ path: file });
  log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${name}`);
}
async function debugMobileIssue() {
  fs.writeFileSync(logFile, ''); // clear log
  log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π...');
  let browser;
  let page;
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 1200,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    page = await browser.newPage();
    await page.setViewport({ width: 375, height: 667 });
    log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await screenshot(page, 'mobile_01_initial.png');
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    await page.waitForSelector('button', { timeout: 10000 });
    const buttons = await page.evaluate(() => {
      return Array.from(document.querySelectorAll('button')).map((btn, index) => ({
        index,
        text: btn.textContent.trim(),
        className: btn.className,
        id: btn.id,
        visible: btn.offsetParent !== null
      }));
    });
    log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:');
    logObj(buttons);
    await screenshot(page, 'mobile_02_buttons.png');
    // –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–µ (–ø—Ä–æ—Ñ–∏–ª—å)
    if (buttons.length > 0) {
      const lastButton = buttons[buttons.length - 1];
      log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ: "${lastButton.text}"`);
      await page.click(`button:nth-child(${lastButton.index + 1})`);
      await new Promise(resolve => setTimeout(resolve, 1500));
      await screenshot(page, 'mobile_03_after_profile_click.png');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
      const dialogContent = await page.evaluate(() => {
        const dialog = document.querySelector('[role="dialog"]');
        if (dialog) {
          return {
            title: dialog.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
            buttons: Array.from(dialog.querySelectorAll('button')).map(btn => btn.textContent.trim()),
            hasWelcome: dialog.textContent.includes('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'),
            allText: dialog.textContent
          };
        }
        return null;
      });
      log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞:');
      logObj(dialogContent);
      await screenshot(page, 'mobile_04_dialog_opened.png');
      if (dialogContent && dialogContent.hasWelcome) {
        log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"');
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        let loginButton = await page.$x("//button[contains(., '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')]");
        if (loginButton.length === 0) {
          loginButton = await page.$x("//button[contains(., '–í–æ–π—Ç–∏')]");
        }
        if (loginButton.length === 0) {
          // Fallback: –∏—â–µ–º –ø–æ aria-label
          loginButton = await page.$$('button[aria-label*="–í–æ–π—Ç–∏"]');
        }
        if (loginButton.length > 0) {
          log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          await loginButton[0].click();
          await new Promise(resolve => setTimeout(resolve, 1500));
          await screenshot(page, 'mobile_05_after_login_click.png');
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
          const afterLoginContent = await page.evaluate(() => {
            const dialog = document.querySelector('[role="dialog"]');
            if (dialog) {
              return {
                title: dialog.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
                buttons: Array.from(dialog.querySelectorAll('button')).map(btn => btn.textContent.trim()),
                hasEmail: dialog.textContent.includes('Email'),
                allText: dialog.textContent
              };
            }
            return null;
          });
          log('üìã –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É":');
          logObj(afterLoginContent);
          await screenshot(page, 'mobile_06_after_login_dialog.png');
          if (afterLoginContent && afterLoginContent.hasEmail) {
            log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Email');
            let emailButton = await page.$x("//button[contains(., 'Email')]");
            if (emailButton.length === 0) {
              emailButton = await page.$x("//button[contains(., 'email')]");
            }
            if (emailButton.length > 0) {
              log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º Email');
              await emailButton[0].click();
              await new Promise(resolve => setTimeout(resolve, 1500));
              await screenshot(page, 'mobile_07_after_email_click.png');
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
              const formExists = await page.evaluate(() => {
                return !!document.querySelector('[data-testid="email-input"]');
              });
              if (formExists) {
                log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞!');
              } else {
                log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
              }
            } else {
              log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
          } else {
            log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          }
        } else {
          log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        log('‚ùå –≠–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
    log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    if (page) {
      await screenshot(page, 'mobile_error.png');
    }
  } finally {
    log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}
debugMobileIssue().catch(error => {
  log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ' + error.message);
}); 