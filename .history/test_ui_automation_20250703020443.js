const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logsDir = './test_logs';
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
const writeLog = (filename, content) => {
  const timestamp = new Date().toISOString();
  const logContent = `[${timestamp}] ${content}\n`;
  fs.appendFileSync(path.join(logsDir, filename), logContent);
  console.log(content);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
const clearLogs = () => {
  const files = ['ui_test.log', 'users_panel.log', 'api_calls.log', 'errors.log'];
  files.forEach(file => {
    const filepath = path.join(logsDir, file);
    if (fs.existsSync(filepath)) {
      fs.unlinkSync(filepath);
    }
  });
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function testUI() {
  writeLog('ui_test.log', 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI...');
  
  let browser;
  let page1, page2;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    writeLog('ui_test.log', 'üì± –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    browser = await puppeteer.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      slowMo: 1000, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    // –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–∞–∫ –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    page1 = await browser.newPage();
    page2 = await browser.newPage();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    await setupPageLogging(page1, 'Page1');
    await setupPageLogging(page2, 'Page2');

    writeLog('ui_test.log', 'üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    await page1.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    await page2.goto('http://localhost:3000', { waitUntil: 'networkidle0' });

    writeLog('ui_test.log', '‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');

    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    writeLog('ui_test.log', 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await registerUser(page1, 'testuser1@example.com', 'password123', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1');
    
    // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    writeLog('ui_test.log', 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await registerUser(page2, 'testuser2@example.com', 'password123', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2');

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    writeLog('ui_test.log', 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await checkUsersDisplay(page1, 'Page1');
    await checkUsersDisplay(page2, 'Page2');

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã
    writeLog('ui_test.log', 'üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã...');
    await checkAPICalls(page1, 'Page1');
    await checkAPICalls(page2, 'Page2');

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    writeLog('ui_test.log', 'üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage...');
    await checkLocalStorage(page1, 'Page1');
    await checkLocalStorage(page2, 'Page2');

    writeLog('ui_test.log', '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`);
    writeLog('errors.log', `–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
  } finally {
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    if (page1) {
      await page1.screenshot({ path: path.join(logsDir, 'page1_final.png') });
    }
    if (page2) {
      await page2.screenshot({ path: path.join(logsDir, 'page2_final.png') });
    }
    
    if (browser) {
      await browser.close();
    }
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function setupPageLogging(page, pageName) {
  // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Å–æ–ª—å
  page.on('console', msg => {
    writeLog('ui_test.log', `[${pageName}] Console: ${msg.text()}`);
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  page.on('pageerror', error => {
    writeLog('errors.log', `[${pageName}] Page Error: ${error.message}`);
  });

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  page.on('request', request => {
    if (request.url().includes('/api/')) {
      writeLog('api_calls.log', `[${pageName}] API Request: ${request.method()} ${request.url()}`);
    }
  });

  page.on('response', response => {
    if (response.url().includes('/api/')) {
      writeLog('api_calls.log', `[${pageName}] API Response: ${response.status()} ${response.url()}`);
    }
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(page, email, password, name) {
  try {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.type('input[type="email"]', email);
    await page.type('input[type="password"]', password);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
    await page.waitForFunction(() => {
      return !document.querySelector('input[type="email"]') || 
             document.querySelector('[data-testid="user-settings"]') ||
             localStorage.getItem('currentUser');
    }, { timeout: 15000 });
    
    writeLog('ui_test.log', `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–≤–æ—à–µ–ª`);
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${name}: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsersDisplay(page, pageName) {
  try {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    await page.waitForSelector('[data-testid="sidebar-right"]', { timeout: 10000 });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await page.evaluate(() => {
      const userElements = document.querySelectorAll('[data-testid="user-item"]');
      return Array.from(userElements).map(el => ({
        name: el.querySelector('[data-testid="user-name"]')?.textContent,
        isMe: el.querySelector('[data-testid="user-me"]') !== null,
        isRealUser: el.querySelector('[data-testid="user-real"]') !== null
      }));
    });
    
    writeLog('users_panel.log', `[${pageName}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    users.forEach((user, index) => {
      writeLog('users_panel.log', `[${pageName}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}: ${user.name} (–í—ã: ${user.isMe}, –†–µ–∞–ª—å–Ω—ã–π: ${user.isRealUser})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (users.length >= 2) {
      writeLog('users_panel.log', `‚úÖ [${pageName}] –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    } else {
      writeLog('users_panel.log', `‚ö†Ô∏è [${pageName}] –ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    }
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π [${pageName}]: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤—ã–∑–æ–≤–æ–≤
async function checkAPICalls(page, pageName) {
  try {
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
    await page.waitForTimeout(2000);
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ API –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    const apiLogs = await page.evaluate(() => {
      return window.apiLogs || [];
    });
    
    writeLog('api_calls.log', `[${pageName}] API –≤—ã–∑–æ–≤–æ–≤: ${apiLogs.length}`);
    apiLogs.forEach(log => {
      writeLog('api_calls.log', `[${pageName}] ${log}`);
    });
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API [${pageName}]: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
async function checkLocalStorage(page, pageName) {
  try {
    const storage = await page.evaluate(() => {
      return {
        authToken: localStorage.getItem('authToken'),
        currentUser: localStorage.getItem('currentUser'),
        hasToken: !!localStorage.getItem('authToken'),
        hasUser: !!localStorage.getItem('currentUser')
      };
    });
    
    writeLog('ui_test.log', `[${pageName}] localStorage: —Ç–æ–∫–µ–Ω=${storage.hasToken}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${storage.hasUser}`);
    
    if (storage.hasToken && storage.hasUser) {
      writeLog('ui_test.log', `‚úÖ [${pageName}] JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    } else {
      writeLog('ui_test.log', `‚ö†Ô∏è [${pageName}] –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π`);
    }
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage [${pageName}]: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
clearLogs();
testUI().catch(error => {
  writeLog('errors.log', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  process.exit(1);
}); 