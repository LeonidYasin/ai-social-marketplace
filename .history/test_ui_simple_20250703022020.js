const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function testMultiUser() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã...');
  
  let browser;
  let page1, page2;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    console.log('üì± –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    browser = await puppeteer.launch({ 
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      slowMo: 500, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    // –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page1 = await browser.newPage();
    page2 = await browser.newPage();

    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –û—á–∏—â–∞–µ–º localStorage –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await page1.goto('http://localhost:3000');
    await page1.evaluate(() => localStorage.clear());
    await page1.reload({ waitUntil: 'networkidle0' });
    
    await page2.goto('http://localhost:3000');
    await page2.evaluate(() => localStorage.clear());
    await page2.reload({ waitUntil: 'networkidle0' });

    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page1.screenshot({ path: path.join(screenshotsDir, '01_initial_page1.png') });
    await page2.screenshot({ path: path.join(screenshotsDir, '01_initial_page2.png') });

    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await registerUser(page1, 'testuser1@example.com', 'password123', 'page1');
    
    // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await registerUser(page2, 'testuser2@example.com', 'password123', 'page2');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await checkUsers(page1, 'page1');
    await checkUsers(page2, 'page2');

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    console.log('üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage...');
    await checkLocalStorage(page1, 'page1');
    await checkLocalStorage(page2, 'page2');

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  } finally {
    // –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    if (page1) {
      await page1.screenshot({ path: path.join(screenshotsDir, 'final_page1.png') });
    }
    if (page2) {
      await page2.screenshot({ path: path.join(screenshotsDir, 'final_page2.png') });
    }
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(page, email, password, pageName) {
  try {
    console.log(`[${pageName}] –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...`);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    await page.waitForSelector('input[type="email"], [data-testid="user-settings-dialog"]', { timeout: 10000 });
    
    // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settingsButton = await page.$('[data-testid="settings-button"], button[aria-label*="–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"], button[aria-label*="settings"]');
    if (settingsButton) {
      console.log(`[${pageName}] –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫...`);
      await settingsButton.click();
      await page.waitForTimeout(1000);
    }
    
    // –ñ–¥–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    
    console.log(`[${pageName}] –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É...`);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º
    await page.click('input[type="email"]');
    await page.keyboard.down('Control');
    await page.keyboard.press('KeyA');
    await page.keyboard.up('Control');
    await page.type('input[type="email"]', email);
    
    await page.click('input[type="password"]');
    await page.keyboard.down('Control');
    await page.keyboard.press('KeyA');
    await page.keyboard.up('Control');
    await page.type('input[type="password"]', password);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    console.log(`[${pageName}] –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...`);
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.waitForFunction(() => {
      return !document.querySelector('input[type="email"]') || 
             localStorage.getItem('currentUser');
    }, { timeout: 15000 });
    
    console.log(`‚úÖ [${pageName}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–≤–æ—à–µ–ª`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await page.screenshot({ path: path.join(screenshotsDir, `02_after_register_${pageName}.png`) });
    
  } catch (error) {
    console.error(`‚ùå [${pageName}] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`, error.message);
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    await page.screenshot({ path: path.join(screenshotsDir, `error_${pageName}.png`) });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsers(page, pageName) {
  try {
    console.log(`[${pageName}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    await page.waitForFunction(() => {
      const sidebar = document.querySelector('[data-testid="sidebar-right"]');
      return sidebar && sidebar.offsetParent !== null;
    }, { timeout: 10000 });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await page.evaluate(() => {
      const userElements = document.querySelectorAll('[data-testid="user-item"]');
      return Array.from(userElements).map(el => ({
        name: el.querySelector('[data-testid="user-name"]')?.textContent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        isMe: el.querySelector('[data-testid="user-me"]') !== null,
        isRealUser: el.querySelector('[data-testid="user-real"]') !== null
      }));
    });
    
    console.log(`[${pageName}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    users.forEach((user, index) => {
      console.log(`  - ${user.name} (–í—ã: ${user.isMe}, –†–µ–∞–ª—å–Ω—ã–π: ${user.isRealUser})`);
    });
    
    if (users.length >= 2) {
      console.log(`‚úÖ [${pageName}] –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    } else {
      console.log(`‚ö†Ô∏è [${pageName}] –ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    }
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    const sidebar = await page.$('[data-testid="sidebar-right"]');
    if (sidebar) {
      await sidebar.screenshot({ path: path.join(screenshotsDir, `03_users_panel_${pageName}.png`) });
    }
    
  } catch (error) {
    console.error(`‚ùå [${pageName}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
async function checkLocalStorage(page, pageName) {
  try {
    const storage = await page.evaluate(() => {
      return {
        authToken: localStorage.getItem('authToken'),
        currentUser: localStorage.getItem('currentUser'),
        hasToken: !!localStorage.getItem('authToken'),
        hasUser: !!localStorage.getItem('currentUser')
      };
    });
    
    console.log(`[${pageName}] localStorage:`);
    console.log(`  - –¢–æ–∫–µ–Ω: ${storage.hasToken ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
    console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${storage.hasUser ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
    
    if (storage.hasToken && storage.hasUser) {
      console.log(`‚úÖ [${pageName}] JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    } else {
      console.log(`‚ö†Ô∏è [${pageName}] –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π`);
    }
    
  } catch (error) {
    console.error(`‚ùå [${pageName}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:`, error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMultiUser().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 