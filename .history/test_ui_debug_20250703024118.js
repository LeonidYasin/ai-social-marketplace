const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const screenshotsDir = './test_screenshots';
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir);
}

async function debugMobileIssue() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π...');
  
  let browser;
  let page;
  
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 2000,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    page = await browser.newPage();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewport({ width: 375, height: 667 }); // iPhone —Ä–∞–∑–º–µ—Ä
    
    console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...');
    await page.goto('http://localhost:3000');
    await page.evaluate(() => localStorage.clear());
    await page.reload({ waitUntil: 'networkidle0' });
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    await page.screenshot({ path: path.join(screenshotsDir, 'mobile_01_initial.png') });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
    await page.waitForSelector('button', { timeout: 10000 });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const buttons = await page.evaluate(() => {
      return Array.from(document.querySelectorAll('button')).map((btn, index) => ({
        index,
        text: btn.textContent.trim(),
        className: btn.className,
        id: btn.id,
        visible: btn.offsetParent !== null
      }));
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', buttons);
    
    // –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è)
    if (buttons.length > 0) {
      const lastButton = buttons[buttons.length - 1];
      console.log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ: "${lastButton.text}"`);
      
      await page.click(`button:nth-child(${lastButton.index + 1})`);
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await page.screenshot({ path: path.join(screenshotsDir, 'mobile_02_after_click.png') });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å
      const dialogContent = await page.evaluate(() => {
        const dialog = document.querySelector('[role="dialog"]');
        if (dialog) {
          return {
            title: dialog.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
            buttons: Array.from(dialog.querySelectorAll('button')).map(btn => btn.textContent.trim()),
            hasWelcome: dialog.textContent.includes('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')
          };
        }
        return null;
      });
      
      console.log('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞:', dialogContent);
      
      if (dialogContent && dialogContent.hasWelcome) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        const loginButton = await page.$x("//button[contains(., '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')]");
        if (loginButton.length > 0) {
          console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          await loginButton[0].click();
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          await page.screenshot({ path: path.join(screenshotsDir, 'mobile_03_after_login_click.png') });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
          const afterLoginContent = await page.evaluate(() => {
            const dialog = document.querySelector('[role="dialog"]');
            if (dialog) {
              return {
                title: dialog.querySelector('h1, h2, h3, h4, h5, h6')?.textContent,
                buttons: Array.from(dialog.querySelectorAll('button')).map(btn => btn.textContent.trim()),
                hasEmail: dialog.textContent.includes('Email')
              };
            }
            return null;
          });
          
          console.log('üìã –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É":', afterLoginContent);
          
          if (afterLoginContent && afterLoginContent.hasEmail) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Email');
            const emailButton = await page.$x("//button[contains(., 'Email')]");
            if (emailButton.length > 0) {
              console.log('üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º Email');
              await emailButton[0].click();
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              await page.screenshot({ path: path.join(screenshotsDir, 'mobile_04_after_email_click.png') });
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
              const formExists = await page.evaluate(() => {
                return !!document.querySelector('[data-testid="email-input"]');
              });
              
              if (formExists) {
                console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞!');
              } else {
                console.log('‚ùå –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
              }
            }
          } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ Email –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
          }
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('‚ùå –≠–∫—Ä–∞–Ω "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
    
    console.log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (page) {
      await page.screenshot({ path: path.join(screenshotsDir, 'mobile_error.png') });
    }
  } finally {
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ test_screenshots/');
    console.log('üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }
}

debugMobileIssue().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
}); 