const fetch = require('node-fetch');

class SimpleNotificationTest {
  constructor() {
    this.baseUrl = 'http://localhost:8000';
    this.users = [];
  }

  async testNotifications() {
    console.log('üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    try {
      // –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const user1 = await this.createUser('testuser1', 'test1@example.com');
      const user2 = await this.createUser('testuser2', 'test2@example.com');

      if (!user1 || !user2) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return false;
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:', user1.username, '–∏', user2.username);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ç–æ—Ä–æ–º—É
      const message = await this.sendMessage(user1, user2.id, '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!');
      
      if (message) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', message.content);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', user1.username);
        console.log('üì• –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', user2.username);
        
        console.log('\nüéØ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –¥–≤—É—Ö –≤–∫–ª–∞–¥–∫–∞—Ö');
        console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ testuser1 –∏ testuser2');
        console.log('3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É');
        console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
        console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)');
        
        return true;
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return false;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      return false;
    }
  }

  async createUser(username, email) {
    try {
      const response = await fetch(`${this.baseUrl}/api/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username,
          email,
          password: 'testpass123',
          first_name: username,
          last_name: 'Test'
        })
      });

      if (response.ok) {
        const userData = await response.json();
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —Å–æ–∑–¥–∞–Ω`);
        return userData;
      } else {
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è`);
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return await this.getUserByUsername(username);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error.message);
      return null;
    }
  }

  async getUserByUsername(username) {
    try {
      const response = await fetch(`${this.baseUrl}/api/users`);
      if (response.ok) {
        const users = await response.json();
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users.map(u => u.username));
        const user = users.find(u => u.username === username);
        if (user) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username}`);
          return user;
        } else {
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ`);
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${response.status}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error.message);
    }
    return null;
  }

  async sendMessage(sender, receiverId, content) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const loginResponse = await fetch(`${this.baseUrl}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: sender.username,
          password: 'testpass123'
        })
      });

      if (!loginResponse.ok) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        return null;
      }

      const loginData = await loginResponse.json();
      const token = loginData.token;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageResponse = await fetch(`${this.baseUrl}/api/messages/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          receiverId,
          content
        })
      });

      if (messageResponse.ok) {
        const message = await messageResponse.json();
        return message;
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageResponse.status);
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runSimpleNotificationTest() {
  const test = new SimpleNotificationTest();
  
  try {
    const result = await test.testNotifications();
    
    if (result) {
      console.log('\nüéâ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏');
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runSimpleNotificationTest();
}

module.exports = SimpleNotificationTest; 