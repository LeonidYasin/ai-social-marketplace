const puppeteer = require('puppeteer');
const FinalStateAnalyzer = require('./final_state_analyzer');

class TestFinalAnalyzer {
    constructor() {
        this.browser = null;
        this.page = null;
        this.analyzer = new FinalStateAnalyzer();
        this.baseUrl = 'http://localhost:3000';
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: { width: 1920, height: 1080 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        this.page = await this.browser.newPage();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async pause(ms = 2000) {
        await new Promise(resolve => setTimeout(resolve, ms));
    }

    async testCurrentState() {
        console.log('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        
        await this.page.goto(this.baseUrl);
        await this.pause(3000);
        
        const state = await this.analyzer.analyzeState(this.page);
        console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
        
        return state;
    }

    async testMenuNavigation() {
        console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∏–∫–æ–Ω–∫–∞ —Å —Ç—Ä–µ–º—è –ª–∏–Ω–∏—è–º–∏)
        const menuButton = await this.analyzer.findElementByTestId(this.page, 'MenuIcon');
        if (menuButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞–π–¥–µ–Ω–∞');
            await menuButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é:', state);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            await menuButton.element.click();
            await this.pause(1000);
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testPostInteraction() {
        console.log('\nüëç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–∞–º–∏...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ù—Ä–∞–≤–∏—Ç—Å—è" –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ
        const likeButton = await this.analyzer.findElementByPartialText(this.page, '–ù—Ä–∞–≤–∏—Ç—Å—è');
        if (likeButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è" –Ω–∞–π–¥–µ–Ω–∞');
            await likeButton.element.click();
            await this.pause(1000);
            
            console.log('‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω');
            return true;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }
    }

    async testChatAccess() {
        console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —á–∞—Ç–∞
        const chatButton = await this.analyzer.findElementByTestId(this.page, 'SmartToyIcon');
        if (chatButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
            await chatButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞:', state);
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testSearchFunctionality() {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        const searchButton = await this.analyzer.findElementByTestId(this.page, 'SearchIcon');
        if (searchButton) {
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
            await searchButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞:', state);
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testCreatePost() {
        console.log('\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...');
        
        // –ò—â–µ–º –ø–æ–ª–µ "–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
        const postField = await this.analyzer.findElementByPartialText(this.page, '–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?');
        if (postField) {
            console.log('‚úÖ –ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ');
            await postField.element.click();
            await this.pause(1000);
            
            // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            await this.page.keyboard.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞');
            await this.pause(1000);
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            const sendButton = await this.analyzer.findElementByPartialText(this.page, '–û–¢–ü–†–ê–í–ò–¢–¨');
            if (sendButton) {
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞');
                await sendButton.element.click();
                await this.pause(2000);
                
                console.log('‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                return true;
            } else {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }
        } else {
            console.log('‚ùå –ü–æ–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return false;
        }
    }

    async runAllTests() {
        try {
            console.log('üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');
            
            await this.init();
            
            // –¢–µ—Å—Ç 1: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const currentState = await this.testCurrentState();
            
            // –¢–µ—Å—Ç 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
            const menuState = await this.testMenuNavigation();
            
            // –¢–µ—Å—Ç 3: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–∞–º–∏
            const postInteraction = await this.testPostInteraction();
            
            // –¢–µ—Å—Ç 4: –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            const chatState = await this.testChatAccess();
            
            // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫
            const searchState = await this.testSearchFunctionality();
            
            // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            const createPost = await this.testCreatePost();
            
            // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
            console.log('=' * 50);
            console.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState?.name} (${Math.round(currentState?.confidence * 100)}%)`);
            console.log(`–ú–µ–Ω—é: ${menuState?.name || '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'}`);
            console.log(`–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–∞–º–∏: ${postInteraction ? '‚úÖ' : '‚ùå'}`);
            console.log(`–ß–∞—Ç: ${chatState?.name || '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'}`);
            console.log(`–ü–æ–∏—Å–∫: ${searchState?.name || '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'}`);
            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: ${createPost ? '‚úÖ' : '‚ùå'}`);
            
            const successCount = [
                currentState?.confidence > 0.7,
                menuState?.confidence > 0.7,
                postInteraction,
                chatState?.confidence > 0.7,
                searchState?.confidence > 0.7,
                createPost
            ].filter(Boolean).length;
            
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/6`);
            
            if (successCount >= 5) {
                console.log('üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
            } else if (successCount >= 4) {
                console.log('üëç –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ');
            } else {
                console.log('‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            }
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            if (currentState?.confidence > 0.8) {
                console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            } else {
                console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π');
            }
            
            if (postInteraction && createPost) {
                console.log('‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            } else {
                console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    const tester = new TestFinalAnalyzer();
    tester.runAllTests();
}

module.exports = TestFinalAnalyzer; 