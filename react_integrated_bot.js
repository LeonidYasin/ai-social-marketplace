const puppeteer = require('puppeteer');
const { DOMBasedStateAnalyzer } = require('./dom_based_state_analyzer');

class ReactIntegratedBot {
    constructor(options = {}) {
        this.browser = null;
        this.page = null;
        this.baseUrl = options.baseUrl || 'http://localhost:3000';
        this.screenshotDir = options.screenshotDir || './test_screenshots/react_integrated';
        this.logDir = options.logDir || './test_logs';
        this.headless = options.headless !== false;
        this.slowMo = options.slowMo || 100;
        this.timeout = options.timeout || 30000;
        
        // DOM-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        this.domAnalyzer = new DOMBasedStateAnalyzer();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        this.currentState = null;
        this.stateHistory = [];
        this.errorCount = 0;
        this.maxErrors = 3;
        
        // React DevTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        this.reactDevToolsEnabled = options.reactDevTools !== false;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        this.ensureDirectories();
        
        console.log('ü§ñ React-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    ensureDirectories() {
        const dirs = [this.screenshotDir, this.logDir];
        dirs.forEach(dir => {
            if (!require('fs').existsSync(dir)) {
                require('fs').mkdirSync(dir, { recursive: true });
            }
        });
    }

    async initialize() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è React-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...');
            
            this.browser = await puppeteer.launch({
                headless: this.headless,
                slowMo: this.slowMo,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu'
                ]
            });

            this.page = await this.browser.newPage();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
            await this.page.setViewport({
                width: 1200,
                height: 800
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            this.page.setDefaultTimeout(this.timeout);
            this.page.setDefaultNavigationTimeout(this.timeout);

            // –í–∫–ª—é—á–∞–µ–º React DevTools (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if (this.reactDevToolsEnabled) {
                await this.enableReactDevTools();
            }

            console.log('‚úÖ React-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ React-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:', error.message);
            return false;
        }
    }

    async enableReactDevTools() {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å React DevTools
            await this.page.evaluateOnNewDocument(() => {
                // –í–∫–ª—é—á–∞–µ–º React DevTools
                if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                    console.log('React DevTools –¥–æ—Å—Ç—É–ø–Ω—ã');
                }
            });

            console.log('üîß React DevTools –≤–∫–ª—é—á–µ–Ω—ã');
        } catch (error) {
            console.log('‚ö†Ô∏è React DevTools –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
        }
    }

    async navigateTo(url = null) {
        const targetUrl = url || this.baseUrl;
        console.log(`üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: ${targetUrl}`);
        
        try {
            await this.page.goto(targetUrl, { waitUntil: 'networkidle2' });
            await this.pause(2000);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ DOM
            await this.analyzeCurrentState();
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error.message);
            return false;
        }
    }

    async analyzeCurrentState() {
        try {
            const screenshotPath = await this.takeScreenshot('current_state');
            const analysis = await this.domAnalyzer.analyzeStateFromDOM(this.page);
            
            this.currentState = analysis;
            this.stateHistory.push(analysis);
            
            console.log(`üß† –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${analysis.detectedState.name}`);
            console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
            console.log(`üîó URL: ${analysis.url}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            if (analysis.domAnalysis) {
                console.log(`üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${analysis.domAnalysis.structure.layout}`);
                console.log(`üîò –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${analysis.domAnalysis.interactive.length}`);
            }
            
            if (analysis.reactAnalysis) {
                console.log(`‚öõÔ∏è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${analysis.reactAnalysis.detected.length}`);
            }
            
            return analysis;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
            return null;
        }
    }

    async takeScreenshot(name) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `${name}_${timestamp}.png`;
        const filepath = require('path').join(this.screenshotDir, filename);
        
        await this.page.screenshot({
            path: filepath,
            fullPage: true
        });
        
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
        return filepath;
    }

    async findElementByText(text, options = {}) {
        const {
            exact = false,
            timeout = 5000,
            confidence = 70,
            state = this.currentState?.detectedState
        } = options;

        console.log(`üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: "${text}" (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${exact})`);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ DOM-–∞–Ω–∞–ª–∏–∑
            if (state) {
                const domElement = await this.domAnalyzer.findElementByState(this.page, text, state);
                if (domElement) {
                    console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ DOM-–∞–Ω–∞–ª–∏–∑: "${text}"`);
                    return domElement;
                }
            }

            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            const standardElement = await this.findElementStandard(text, exact, confidence);
            if (standardElement) {
                console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: "${text}"`);
                return standardElement;
            }

            console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${text}"`);
            return null;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ "${text}":`, error.message);
            return null;
        }
    }

    async findElementStandard(text, exact = false, confidence = 70) {
        try {
            // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DOM
            const domSelector = exact 
                ? `text="${text}"` 
                : `text*="${text}"`;
            
            const element = await this.page.$(`[${domSelector}]`);
            if (element) {
                const box = await element.boundingBox();
                return {
                    text: text,
                    x: box.x + box.width / 2,
                    y: box.y + box.height / 2,
                    confidence: 100,
                    method: 'dom'
                };
            }
            
            // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ XPath
            const xpath = exact 
                ? `//*[text()="${text}"]`
                : `//*[contains(text(),"${text}")]`;
            
            const xpathElement = await this.page.$x(xpath);
            if (xpathElement.length > 0) {
                const box = await xpathElement[0].boundingBox();
                return {
                    text: text,
                    x: box.x + box.width / 2,
                    y: box.y + box.height / 2,
                    confidence: 90,
                    method: 'xpath'
                };
            }
            
            return null;
        } catch (error) {
            return null;
        }
    }

    async clickElement(element) {
        if (!element) {
            console.log('‚ùå –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞');
            return false;
        }

        try {
            console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: "${element.text}" (${element.x}, ${element.y})`);
            
            if (element.element) {
                // –ö–ª–∏–∫ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç
                await element.element.click();
            } else {
                // –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                await this.page.mouse.click(element.x, element.y);
            }
            
            await this.pause(1000);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.analyzeCurrentState();
            
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É "${element.text}":`, error.message);
            return false;
        }
    }

    async typeText(text, selector = null) {
        try {
            console.log(`‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: "${text}"`);
            
            if (selector) {
                await this.page.type(selector, text);
            } else {
                // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                const inputElement = await this.page.$('input, textarea');
                if (inputElement) {
                    await inputElement.click();
                    await this.page.keyboard.type(text);
                } else {
                    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞');
                    return false;
                }
            }
            
            await this.pause(500);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:`, error.message);
            return false;
        }
    }

    async waitForElement(text, timeout = 10000) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: "${text}"`);
        
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const element = await this.findElementByText(text);
            if (element) {
                console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è: "${text}"`);
                return element;
            }
            
            await this.pause(500);
        }
        
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: "${text}"`);
        return null;
    }

    async verifyText(text, context = null) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞: "${text}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ DOM
        const domCheck = await this.page.evaluate((searchText) => {
            return document.body.innerText.toLowerCase().includes(searchText.toLowerCase());
        }, text);
        
        if (domCheck) {
            console.log(`‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ DOM: "${text}"`);
            
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
            if (context && this.currentState) {
                const contextMatch = this.verifyContext(this.currentState, context);
                if (!contextMatch) {
                    console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É`);
                    return false;
                }
            }
            
            return true;
        } else {
            console.log(`‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM: "${text}"`);
            return false;
        }
    }

    verifyContext(actualState, expectedContext) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (expectedContext.state && actualState.detectedState.name !== expectedContext.state) {
            return false;
        }
        
        if (expectedContext.actions) {
            const hasActions = expectedContext.actions.some(action => 
                actualState.availableActions.includes(action)
            );
            if (!hasActions) {
                return false;
            }
        }
        
        return true;
    }

    async executeStep(step, bot = null) {
        const currentBot = bot || this;
        
        try {
            console.log(`\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: ${step.description}`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            const preState = await currentBot.analyzeCurrentState();
            
            let result = false;
            
            switch (step.action) {
                case 'navigate':
                    result = await currentBot.navigateTo(step.url);
                    break;
                    
                case 'click':
                    const element = await currentBot.findElementByText(step.text, {
                        ...step.options,
                        state: preState?.detectedState
                    });
                    if (element) {
                        result = await currentBot.clickElement(element);
                    } else {
                        console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: "${step.text}"`);
                        result = false;
                    }
                    break;
                    
                case 'type':
                    result = await currentBot.typeText(step.text, step.selector);
                    break;
                    
                case 'wait':
                    result = await currentBot.waitForElement(step.text, step.timeout);
                    break;
                    
                case 'verify':
                    result = await currentBot.verifyText(step.text, step.context);
                    break;
                    
                case 'screenshot':
                    await currentBot.takeScreenshot(step.name);
                    result = true;
                    break;
                    
                case 'pause':
                    await currentBot.pause(step.duration);
                    result = true;
                    break;
                    
                default:
                    console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
                    result = false;
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const postState = await currentBot.analyzeCurrentState();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (preState && postState && preState.detectedState.name !== postState.detectedState.name) {
                console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${preState.detectedState.name} ‚Üí ${postState.detectedState.name}`);
            }
            
            if (!result) {
                currentBot.errorCount++;
                console.log(`‚ùå –®–∞–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${step.description}`);
                
                // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if (currentBot.errorCount >= currentBot.maxErrors) {
                    throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (${currentBot.maxErrors})`);
                }
            } else {
                currentBot.errorCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            }
            
            return result;
            
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —à–∞–≥–µ "${step.description}":`, error.message);
            currentBot.errorCount++;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            await currentBot.saveErrorInfo(step, error);
            
            throw error;
        }
    }

    async runScenario(scenario, bot = null) {
        const currentBot = bot || this;
        
        console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
        
        const results = {
            name: scenario.name,
            description: scenario.description,
            steps: [],
            startTime: new Date(),
            success: true,
            errorCount: 0
        };
        
        try {
            for (let i = 0; i < scenario.steps.length; i++) {
                const step = scenario.steps[i];
                const stepResult = {
                    index: i + 1,
                    description: step.description,
                    action: step.action,
                    success: false,
                    error: null,
                    duration: 0
                };
                
                const startTime = Date.now();
                
                try {
                    stepResult.success = await currentBot.executeStep(step, currentBot);
                    stepResult.duration = Date.now() - startTime;
                    
                    if (!stepResult.success) {
                        results.errorCount++;
                    }
                    
                } catch (error) {
                    stepResult.success = false;
                    stepResult.error = error.message;
                    stepResult.duration = Date.now() - startTime;
                    results.errorCount++;
                    
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ ${i + 1}:`, error.message);
                }
                
                results.steps.push(stepResult);
                
                // –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                if (!stepResult.success) {
                    console.log(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —à–∞–≥–µ ${i + 1}`);
                    break;
                }
            }
            
            results.endTime = new Date();
            results.duration = results.endTime - results.startTime;
            results.success = results.errorCount === 0;
            
            console.log(`\n${results.success ? '‚úÖ' : '‚ùå'} –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${scenario.name}`);
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.steps.filter(s => s.success).length}/${results.steps.length} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(results.duration / 1000).toFixed(1)}—Å`);
            
            return results;
            
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error.message);
            
            results.endTime = new Date();
            results.duration = results.endTime - results.startTime;
            results.success = false;
            results.error = error.message;
            
            return results;
        }
    }

    async saveErrorInfo(step, error) {
        const errorInfo = {
            timestamp: new Date().toISOString(),
            step: step,
            error: error.message,
            stack: error.stack,
            currentState: this.currentState,
            screenshotPath: await this.takeScreenshot('error_state')
        };
        
        const errorFile = require('path').join(this.logDir, `react_error_${Date.now()}.json`);
        require('fs').writeFileSync(errorFile, JSON.stringify(errorInfo, null, 2));
        
        console.log(`üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${errorFile}`);
    }

    async generateReport(results) {
        const report = {
            timestamp: new Date().toISOString(),
            bot: 'ReactIntegratedBot',
            results: results,
            stateHistory: this.stateHistory,
            summary: {
                totalScenarios: results.length,
                successfulScenarios: results.filter(r => r.success).length,
                failedScenarios: results.filter(r => !r.success).length,
                totalSteps: results.reduce((sum, r) => sum + r.steps.length, 0),
                successfulSteps: results.reduce((sum, r) => sum + r.steps.filter(s => s.success).length, 0),
                totalDuration: results.reduce((sum, r) => sum + r.duration, 0)
            }
        };
        
        const reportFile = require('path').join(this.logDir, `react_integrated_report_${Date.now()}.json`);
        require('fs').writeFileSync(reportFile, JSON.stringify(report, null, 2));
        
        console.log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
        return report;
    }

    async pause(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async cleanup() {
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
        }
    }
}

module.exports = { ReactIntegratedBot }; 