const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

class IntelligentStateAnalyzer {
    constructor() {
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.states = {
            'initial': {
                name: '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
                description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Ö–æ–¥–∞',
                indicators: ['–≥–æ—Å—Ç—å', '–≤–æ–π—Ç–∏', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'],
                actions: ['click_guest', 'click_login', 'click_register']
            },
            'guest_logged_in': {
                name: '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –∫–∞–∫ –≥–æ—Å—Ç—å, –≤–∏–¥–Ω–∞ –ª–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤',
                indicators: ['–ø–æ—Å—Ç', '–ª–µ–Ω—Ç–∞', '—Å–æ–∑–¥–∞—Ç—å', '–ø—Ä–æ—Ñ–∏–ª—å'],
                actions: ['create_post', 'view_profile', 'open_chat', 'search']
            },
            'post_creation': {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                description: '–û—Ç–∫—Ä—ã—Ç–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞',
                indicators: ['—Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞'],
                actions: ['write_text', 'send_post', 'cancel_post']
            },
            'chat_open': {
                name: '–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç',
                description: '–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                indicators: ['—á–∞—Ç', '—Å–æ–æ–±—â–µ–Ω–∏—è', '–æ–Ω–ª–∞–π–Ω', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
                actions: ['send_message', 'select_user', 'close_chat']
            },
            'profile_view': {
                name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è',
                description: '–û—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                indicators: ['–ø—Ä–æ—Ñ–∏–ª—å', '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                actions: ['edit_profile', 'view_settings', 'back_to_feed']
            },
            'search_results': {
                name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
                description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
                indicators: ['–ø–æ–∏—Å–∫', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–Ω–∞–π–¥–µ–Ω–æ', '—Ñ–∏–ª—å—Ç—Ä—ã'],
                actions: ['select_result', 'refine_search', 'clear_search']
            },
            'error_page': {
                name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏',
                description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞',
                indicators: ['–æ—à–∏–±–∫–∞', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'],
                actions: ['retry', 'go_back', 'refresh_page']
            },
            'loading': {
                name: '–ó–∞–≥—Ä—É–∑–∫–∞',
                description: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏',
                indicators: ['–∑–∞–≥—Ä—É–∑–∫–∞', '–ø–æ–¥–æ–∂–¥–∏—Ç–µ', 'loading', 'spinner'],
                actions: ['wait', 'refresh']
            }
        };
        
        this.stateHistory = [];
        this.confidenceThreshold = 0.7;
    }

    async analyzeScreenshot(imagePath) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${path.basename(imagePath)}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            const allText = await this.extractAllText(imagePath);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
            const stateAnalysis = await this.analyzeStateFromText(allText);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            const elements = await this.extractElements(imagePath);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const fullAnalysis = {
                timestamp: new Date().toISOString(),
                imagePath: imagePath,
                detectedState: stateAnalysis.state,
                confidence: stateAnalysis.confidence,
                allText: allText,
                elements: elements,
                availableActions: stateAnalysis.availableActions,
                context: this.buildContext(stateAnalysis, elements)
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.stateHistory.push(fullAnalysis);
            
            console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${stateAnalysis.state.name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(stateAnalysis.confidence * 100).toFixed(1)}%)`);
            
            return fullAnalysis;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
            return {
                timestamp: new Date().toISOString(),
                imagePath: imagePath,
                detectedState: this.states.error_page,
                confidence: 0,
                error: error.message
            };
        }
    }

    async extractAllText(imagePath) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                    return;
                }

                const outputFile = 'output.txt';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                resolve(content.trim());
            });
        });
    }

    async extractElements(imagePath) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                    return;
                }

                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const elements = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.trim() && conf > 30) {
                            elements.push({
                                text: text.trim(),
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2,
                                area: width * height
                            });
                        }
                    }
                }

                resolve(elements);
            });
        });
    }

    async analyzeStateFromText(text) {
        const textLower = text.toLowerCase();
        let bestState = null;
        let bestScore = 0;
        let bestActions = [];

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        for (const [stateKey, state] of Object.entries(this.states)) {
            let score = 0;
            let matchedIndicators = [];
            let availableActions = [];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
            for (const indicator of state.indicators) {
                if (textLower.includes(indicator.toLowerCase())) {
                    score += 1;
                    matchedIndicators.push(indicator);
                }
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É
            const normalizedScore = score / state.indicators.length;

            // –ï—Å–ª–∏ —ç—Ç–æ –ª—É—á—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
            if (normalizedScore > bestScore) {
                bestScore = normalizedScore;
                bestState = state;
                bestActions = state.actions;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
        if (bestScore < this.confidenceThreshold) {
            const heuristicState = this.applyHeuristics(textLower);
            if (heuristicState) {
                bestState = heuristicState.state;
                bestScore = heuristicState.confidence;
                bestActions = heuristicState.actions;
            }
        }

        return {
            state: bestState || this.states.initial,
            confidence: bestScore,
            availableActions: bestActions
        };
    }

    applyHeuristics(textLower) {
        // –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const heuristics = [
            {
                condition: () => textLower.includes('–ø–æ—Å—Ç') && textLower.includes('—Å–æ–∑–¥–∞—Ç—å'),
                state: this.states.post_creation,
                confidence: 0.8,
                actions: ['write_text', 'send_post', 'cancel_post']
            },
            {
                condition: () => textLower.includes('—á–∞—Ç') && textLower.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ'),
                state: this.states.chat_open,
                confidence: 0.8,
                actions: ['send_message', 'select_user', 'close_chat']
            },
            {
                condition: () => textLower.includes('–ø—Ä–æ—Ñ–∏–ª—å') && textLower.includes('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
                state: this.states.profile_view,
                confidence: 0.8,
                actions: ['edit_profile', 'view_settings', 'back_to_feed']
            },
            {
                condition: () => textLower.includes('–ø–æ–∏—Å–∫') && textLower.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç'),
                state: this.states.search_results,
                confidence: 0.8,
                actions: ['select_result', 'refine_search', 'clear_search']
            },
            {
                condition: () => textLower.includes('–æ—à–∏–±–∫–∞') || textLower.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
                state: this.states.error_page,
                confidence: 0.9,
                actions: ['retry', 'go_back', 'refresh_page']
            },
            {
                condition: () => textLower.includes('–∑–∞–≥—Ä—É–∑–∫–∞') || textLower.includes('–ø–æ–¥–æ–∂–¥–∏—Ç–µ'),
                state: this.states.loading,
                confidence: 0.9,
                actions: ['wait', 'refresh']
            }
        ];

        for (const heuristic of heuristics) {
            if (heuristic.condition()) {
                return heuristic;
            }
        }

        return null;
    }

    buildContext(stateAnalysis, elements) {
        const context = {
            stateName: stateAnalysis.state.name,
            stateDescription: stateAnalysis.state.description,
            confidence: stateAnalysis.confidence,
            availableActions: stateAnalysis.availableActions,
            elementCount: elements.length,
            prominentElements: this.findProminentElements(elements),
            suggestedNextActions: this.suggestNextActions(stateAnalysis, elements)
        };

        return context;
    }

    findProminentElements(elements) {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–±–æ–ª—å—à–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º)
        return elements
            .filter(el => el.confidence > 70 || el.area > 1000)
            .sort((a, b) => (b.confidence + b.area / 1000) - (a.confidence + a.area / 1000))
            .slice(0, 5)
            .map(el => ({
                text: el.text,
                confidence: el.confidence,
                position: { x: el.centerX, y: el.centerY }
            }));
    }

    suggestNextActions(stateAnalysis, elements) {
        const suggestions = [];
        
        // –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        switch (stateAnalysis.state.name) {
            case '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
                suggestions.push('–í–æ–π—Ç–∏ –∫–∞–∫ –≥–æ—Å—Ç—å', '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
                break;
            case '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª':
                suggestions.push('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ü–æ–∏—Å–∫');
                break;
            case '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞':
                suggestions.push('–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç', '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ');
                break;
            case '–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç':
                suggestions.push('–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', '–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç');
                break;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const clickableElements = elements.filter(el => 
            el.text.toLowerCase().includes('–∫–Ω–æ–ø–∫–∞') || 
            el.text.toLowerCase().includes('–Ω–∞–∂–∞—Ç—å') ||
            el.area > 500
        );

        if (clickableElements.length > 0) {
            suggestions.push(`–ö–ª–∏–∫–Ω—É—Ç—å –ø–æ "${clickableElements[0].text}"`);
        }

        return suggestions;
    }

    async getStateHistory() {
        return this.stateHistory;
    }

    async getCurrentState() {
        if (this.stateHistory.length === 0) {
            return null;
        }
        return this.stateHistory[this.stateHistory.length - 1];
    }

    async saveStateAnalysis(analysis, filename = null) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const defaultFilename = `state_analysis_${timestamp}.json`;
        const filepath = filename || `./test_logs/${defaultFilename}`;
        
        if (!fs.existsSync('./test_logs')) {
            fs.mkdirSync('./test_logs', { recursive: true });
        }
        
        fs.writeFileSync(filepath, JSON.stringify(analysis, null, 2));
        console.log(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
        
        return filepath;
    }

    async generateStateReport() {
        if (this.stateHistory.length === 0) {
            return { message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' };
        }

        const report = {
            timestamp: new Date().toISOString(),
            totalAnalyses: this.stateHistory.length,
            states: {},
            transitions: [],
            recommendations: []
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for (const analysis of this.stateHistory) {
            const stateName = analysis.detectedState.name;
            if (!report.states[stateName]) {
                report.states[stateName] = {
                    count: 0,
                    averageConfidence: 0,
                    totalConfidence: 0
                };
            }
            
            report.states[stateName].count++;
            report.states[stateName].totalConfidence += analysis.confidence;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        for (const stateName in report.states) {
            const state = report.states[stateName];
            state.averageConfidence = state.totalConfidence / state.count;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        for (let i = 1; i < this.stateHistory.length; i++) {
            const prevState = this.stateHistory[i - 1].detectedState.name;
            const currentState = this.stateHistory[i].detectedState.name;
            
            if (prevState !== currentState) {
                report.transitions.push({
                    from: prevState,
                    to: currentState,
                    timestamp: this.stateHistory[i].timestamp
                });
            }
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const lowConfidenceStates = Object.entries(report.states)
            .filter(([name, data]) => data.averageConfidence < 0.6);
        
        if (lowConfidenceStates.length > 0) {
            report.recommendations.push(
                `–£–ª—É—á—à–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${lowConfidenceStates.map(([name]) => name).join(', ')}`
            );
        }

        return report;
    }
}

module.exports = { IntelligentStateAnalyzer }; 