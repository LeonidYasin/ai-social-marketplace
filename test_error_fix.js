console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "Cannot read properties of undefined (reading message)"...\n');

// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const testNotifications = [
  { type: 'error', message: '–ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' },
  { type: 'success', message: '–ë—ç–∫–µ–Ω–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' },
  undefined, // –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  { type: 'info', message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }
];

console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º...');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
testNotifications.forEach((notification, index) => {
  try {
    const message = notification?.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è';
    const type = notification?.type || 'unknown';
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index}: type="${type}", message="${message}"`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ ${index}:`, error.message);
  }
});

console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ getEventIcon...');

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getEventIcon
const getEventIcon = (type, message) => {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const safeType = type || '';
  const safeMessage = message || '';
  
  if (safeType === 'error' || /–±—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç|–æ—à–∏–±–∫–∞/i.test(safeMessage)) {
    return 'ErrorIcon';
  }
  if (/–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç/i.test(safeMessage)) {
    return 'PostAddIcon';
  }
  if (/–ª–∞–π–∫|—Ä–µ–∞–∫—Ü/i.test(safeMessage)) {
    return 'ThumbUpIcon';
  }
  if (/–∫–æ–º–º–µ–Ω—Ç/i.test(safeMessage)) {
    return 'ChatBubbleIcon';
  }
  return 'NotificationsIcon';
};

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const testCases = [
  { type: 'error', message: '–ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' },
  { type: 'success', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç' },
  { type: undefined, message: undefined },
  { type: null, message: null },
  { type: 'info', message: '–ù–æ–≤—ã–π –ª–∞–π–∫' }
];

testCases.forEach((testCase, index) => {
  try {
    const icon = getEventIcon(testCase.type, testCase.message);
    console.log(`‚úÖ –¢–µ—Å—Ç ${index + 1}: type="${testCase.type}", message="${testCase.message}" -> icon="${icon}"`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${index + 1}:`, error.message);
  }
});

console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');

// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
const testErrors = [
  new Error('Failed to fetch'),
  new Error('ERR_CONNECTION_REFUSED'),
  new Error('401 Unauthorized'),
  new Error('500 Internal Server Error'),
  undefined,
  null
];

testErrors.forEach((error, index) => {
  try {
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    if (error?.message) {
      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
      } else if (error.message.includes('401')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      } else if (error.message.includes('500')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
      } else {
        errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
      }
    }
    
    console.log(`‚úÖ –û—à–∏–±–∫–∞ ${index + 1}: "${errorMessage}"`);
  } catch (err) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${index + 1}:`, err.message);
  }
});

console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è getEventIcon –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç undefined');
console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
console.log('\nüîß –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ "Cannot read properties of undefined"'); 