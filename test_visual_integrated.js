const puppeteer = require('puppeteer');
const Tesseract = require('tesseract.js');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  frontendUrl: 'http://localhost:3000',
  backendUrl: 'http://localhost:8000/api',
  screenshotsDir: './test_screenshots',
  logsDir: './test_logs',
  testUsers: [
    { email: 'visual_test_user1@example.com', password: 'password123', name: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç 1' },
    { email: 'visual_test_user2@example.com', password: 'password123', name: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç 2' },
    { email: 'visual_test_user3@example.com', password: 'password123', name: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç 3' }
  ]
};

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
[CONFIG.screenshotsDir, CONFIG.logsDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
const writeLog = (filename, content) => {
  const timestamp = new Date().toISOString();
  const logContent = `[${timestamp}] ${content}\n`;
  fs.appendFileSync(path.join(CONFIG.logsDir, filename), logContent);
  console.log(content);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
const clearLogs = () => {
  const files = ['visual_test.log', 'ocr_analysis.log', 'api_calls.log', 'errors.log'];
  files.forEach(file => {
    const filepath = path.join(CONFIG.logsDir, file);
    if (fs.existsSync(filepath)) {
      fs.unlinkSync(filepath);
    }
  });
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
async function testVisualInterface() {
  writeLog('visual_test.log', 'üé® –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
  
  let browser;
  let pages = [];
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    writeLog('visual_test.log', 'üì± –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    browser = await puppeteer.launch({ 
      headless: false,
      slowMo: 500,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--window-size=1920,1080']
    });

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = 0; i < CONFIG.testUsers.length; i++) {
      const page = await browser.newPage();
      await page.setViewport({ width: 1920, height: 1080 });
      await setupPageLogging(page, `User${i + 1}`);
      pages.push(page);
    }

    writeLog('visual_test.log', 'üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    await Promise.all(pages.map(page => 
      page.goto(CONFIG.frontendUrl, { waitUntil: 'networkidle0' })
    ));

    writeLog('visual_test.log', '‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö');

    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    writeLog('visual_test.log', 'üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (let i = 0; i < pages.length; i++) {
      await registerUser(pages[i], CONFIG.testUsers[i], `User${i + 1}`);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    writeLog('visual_test.log', 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (let i = 0; i < pages.length; i++) {
      await checkUsersDisplay(pages[i], `User${i + 1}`);
    }

    // –¢–µ—Å—Ç 3: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
    writeLog('visual_test.log', 'üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã...');
    await takeScreenshots(pages);

    // –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å OCR
    writeLog('visual_test.log', 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å OCR...');
    await analyzeScreenshotsWithOCR();

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã
    writeLog('visual_test.log', 'üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã...');
    await checkAPICalls(pages);

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    writeLog('visual_test.log', 'üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage...');
    await checkLocalStorage(pages);

    writeLog('visual_test.log', '‚úÖ –í—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ: ${error.message}`);
    writeLog('errors.log', `–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function setupPageLogging(page, pageName) {
  page.on('console', msg => {
    writeLog('visual_test.log', `[${pageName}] Console: ${msg.text()}`);
  });

  page.on('pageerror', error => {
    writeLog('errors.log', `[${pageName}] Page Error: ${error.message}`);
  });

  page.on('request', request => {
    if (request.url().includes('/api/')) {
      writeLog('api_calls.log', `[${pageName}] API Request: ${request.method()} ${request.url()}`);
    }
  });

  page.on('response', response => {
    if (response.url().includes('/api/')) {
      writeLog('api_calls.log', `[${pageName}] API Response: ${response.status()} ${response.url()}`);
    }
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(page, user, pageName) {
  try {
    writeLog('visual_test.log', `[${pageName}] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name}`);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await page.waitForSelector('[data-testid="user-settings-dialog"]', { timeout: 10000 });
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await page.type('input[type="email"]', user.email);
    await page.type('input[type="password"]', user.password);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
    await page.waitForFunction(() => {
      return !document.querySelector('[data-testid="user-settings-dialog"]') ||
             !document.querySelector('input[type="email"]') ||
             localStorage.getItem('currentUser');
    }, { timeout: 15000 });
    
    writeLog('visual_test.log', `‚úÖ [${pageName}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–≤–æ—à–µ–ª`);
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ [${pageName}]: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsersDisplay(page, pageName) {
  try {
    writeLog('visual_test.log', `[${pageName}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
    await page.waitForFunction(() => {
      const sidebar = document.querySelector('[data-testid="sidebar-right"]');
      return sidebar && sidebar.offsetParent !== null;
    }, { timeout: 10000 });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await page.evaluate(() => {
      const userElements = document.querySelectorAll('[data-testid="user-item"]');
      return Array.from(userElements).map(el => ({
        name: el.querySelector('[data-testid="user-name"]')?.textContent,
        isMe: el.querySelector('[data-testid="user-me"]') !== null,
        isRealUser: el.querySelector('[data-testid="user-real"]') !== null
      }));
    });
    
    writeLog('visual_test.log', `[${pageName}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    users.forEach((user, index) => {
      writeLog('visual_test.log', `[${pageName}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}: ${user.name} (–í—ã: ${user.isMe}, –†–µ–∞–ª—å–Ω—ã–π: ${user.isRealUser})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (users.length >= CONFIG.testUsers.length) {
      writeLog('visual_test.log', `‚úÖ [${pageName}] –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    } else {
      writeLog('visual_test.log', `‚ö†Ô∏è [${pageName}] –ú–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    }
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π [${pageName}]: ${error.message}`);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
async function takeScreenshots(pages) {
  try {
    for (let i = 0; i < pages.length; i++) {
      const page = pages[i];
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `visual_test_user${i + 1}_${timestamp}.png`;
      const filepath = path.join(CONFIG.screenshotsDir, filename);
      
      await page.screenshot({ 
        path: filepath,
        fullPage: true 
      });
      
      writeLog('visual_test.log', `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
    }
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error.message}`);
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å OCR
async function analyzeScreenshotsWithOCR() {
  try {
    writeLog('ocr_analysis.log', 'üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å OCR...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .png —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    const screenshots = fs.readdirSync(CONFIG.screenshotsDir)
      .filter(f => f.endsWith('.png') && f.includes('visual_test_'));
    
    for (const screenshot of screenshots) {
      const filePath = path.join(CONFIG.screenshotsDir, screenshot);
      
      writeLog('ocr_analysis.log', `üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${screenshot}`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        const result = await Tesseract.recognize(
          filePath,
          'rus+eng',
          {
            logger: m => {
              if (m.status) {
                writeLog('ocr_analysis.log', `   ${m.status}: ${(m.progress*100).toFixed(1)}%`);
              }
            }
          }
        );
        
        const text = result.data.text.toLowerCase();
        
        writeLog('ocr_analysis.log', `üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (${screenshot}):`);
        writeLog('ocr_analysis.log', result.data.text);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const analysis = {
          hasLoginButton: text.includes('–≤–æ–π—Ç–∏') || text.includes('login'),
          hasWelcomeText: text.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å') || text.includes('welcome'),
          hasEmailField: text.includes('email'),
          hasUserList: text.includes('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || text.includes('user'),
          hasRealUsers: text.includes('—Ä–µ–∞–ª—å–Ω—ã–π') || text.includes('real'),
          confidence: result.data.confidence
        };
        
        writeLog('ocr_analysis.log', `üîç –ê–Ω–∞–ª–∏–∑ ${screenshot}:`);
        writeLog('ocr_analysis.log', `   –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: ${analysis.hasLoginButton}`);
        writeLog('ocr_analysis.log', `   –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: ${analysis.hasWelcomeText}`);
        writeLog('ocr_analysis.log', `   –ü–æ–ª–µ email: ${analysis.hasEmailField}`);
        writeLog('ocr_analysis.log', `   –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${analysis.hasUserList}`);
        writeLog('ocr_analysis.log', `   –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${analysis.hasRealUsers}`);
        writeLog('ocr_analysis.log', `   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR: ${analysis.confidence.toFixed(1)}%`);
        
      } catch (error) {
        writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ OCR –¥–ª—è ${screenshot}: ${error.message}`);
      }
    }
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤—ã–∑–æ–≤–æ–≤
async function checkAPICalls(pages) {
  try {
    writeLog('visual_test.log', 'üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤—ã–∑–æ–≤—ã –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã
    const apiLogContent = fs.readFileSync(path.join(CONFIG.logsDir, 'api_calls.log'), 'utf8');
    
    const apiCalls = {
      getUsers: (apiLogContent.match(/getUsers/g) || []).length,
      login: (apiLogContent.match(/login/g) || []).length,
      register: (apiLogContent.match(/register/g) || []).length
    };
    
    writeLog('visual_test.log', `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –≤—ã–∑–æ–≤–æ–≤:`);
    writeLog('visual_test.log', `   getUsers: ${apiCalls.getUsers}`);
    writeLog('visual_test.log', `   login: ${apiCalls.login}`);
    writeLog('visual_test.log', `   register: ${apiCalls.register}`);
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
async function checkLocalStorage(pages) {
  try {
    writeLog('visual_test.log', 'üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage...');
    
    for (let i = 0; i < pages.length; i++) {
      const page = pages[i];
      const localStorage = await page.evaluate(() => {
        return {
          currentUser: localStorage.getItem('currentUser'),
          token: localStorage.getItem('token'),
          theme: localStorage.getItem('theme')
        };
      });
      
      writeLog('visual_test.log', `[User${i + 1}] localStorage:`);
      writeLog('visual_test.log', `   currentUser: ${localStorage.currentUser ? '‚úÖ' : '‚ùå'}`);
      writeLog('visual_test.log', `   token: ${localStorage.token ? '‚úÖ' : '‚ùå'}`);
      writeLog('visual_test.log', `   theme: ${localStorage.theme || 'default'}`);
    }
    
  } catch (error) {
    writeLog('errors.log', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage: ${error.message}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  testVisualInterface,
  clearLogs,
  CONFIG
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  clearLogs();
  testVisualInterface().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
} 