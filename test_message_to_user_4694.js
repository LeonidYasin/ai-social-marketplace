const io = require('socket.io-client');
const fetch = require('node-fetch');

class MessageTest {
  constructor() {
    this.baseUrl = 'http://localhost:8000';
    this.socket = null;
    this.testUser = null;
    this.targetUserId = 109;
  }

  async init() {
    console.log('üîç –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 4694...');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.createTestUser();
    
    // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
    await this.connectWebSocket();
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.sendMessage();
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    await this.checkMessageReceived();
  }

  async createTestUser() {
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const userData = {
      username: `test_user_${Date.now()}`,
      email: `test_${Date.now()}@example.com`,
      password: 'testpassword123',
      first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };

    try {
      const response = await fetch(`${this.baseUrl}/api/users/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
      });

      if (response.ok) {
        const result = await response.json();
        this.testUser = result.user;
        this.testUser.token = result.token;
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
          id: this.testUser.id,
          username: this.testUser.username
        });
      } else {
        const error = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      throw error;
    }
  }

  async connectWebSocket() {
    console.log('2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...');
    
    return new Promise((resolve, reject) => {
      this.socket = io(this.baseUrl, {
        transports: ['websocket', 'polling'],
        timeout: 10000
      });

      this.socket.on('connect', () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, socket.id:', this.socket.id);
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
        this.socket.emit('join', {
          userId: this.testUser.id,
          username: this.testUser.username,
          avatarUrl: this.testUser.avatar || ''
        });
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω join —Å –¥–∞–Ω–Ω—ã–º–∏:', {
          userId: this.testUser.id,
          username: this.testUser.username
        });
        
        resolve();
      });

      this.socket.on('connect_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
        reject(error);
      });

      this.socket.on('newMessage', (data) => {
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ newMessage:', data);
      });

      this.socket.on('messageSent', (data) => {
        console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ messageSent:', data);
      });

      // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        if (!this.socket.connected) {
          reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥'));
        }
      }, 10000);
    });
  }

  async sendMessage() {
    console.log('3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 4694...');
    
    const messageData = {
      receiverId: this.targetUserId,
      content: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${this.testUser.username} –≤ ${new Date().toLocaleTimeString()}`,
      senderId: this.testUser.id,
      senderUsername: this.testUser.username
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:', messageData);
    
    this.socket.emit('sendMessage', messageData);
    
    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    try {
      const response = await fetch(`${this.baseUrl}/api/messages/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.testUser.token}`
        },
        body: JSON.stringify({
          receiverId: this.targetUserId,
          content: messageData.content
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API:', result);
      } else {
        const error = await response.text();
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ API:', error);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ API:', error.message);
    }
  }

  async checkMessageReceived() {
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const response = await fetch(`${this.baseUrl}/api/messages/conversation/${this.targetUserId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.testUser.token}`
        }
      });

      if (response.ok) {
        const conversation = await response.json();
        console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ –±–µ—Å–µ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 4694:');
        console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', conversation.messages?.length || 0);
        
        if (conversation.messages && conversation.messages.length > 0) {
          const lastMessage = conversation.messages[conversation.messages.length - 1];
          console.log('- –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
            id: lastMessage.id,
            content: lastMessage.content,
            sender_id: lastMessage.sender_id,
            created_at: lastMessage.created_at
          });
        }
      } else {
        const error = await response.text();
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–µ–¥—ã:', error);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ—Å–µ–¥—ã:', error.message);
    }
  }

  async cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞...');
    
    if (this.socket) {
      this.socket.disconnect();
      console.log('‚úÖ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runTest() {
  const test = new MessageTest();
  
  try {
    await test.init();
    
    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('- –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    console.log('- WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('- –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 4694');
    console.log('- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –õ–æ–≥–∏ backend –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
    console.log('2. –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    console.log('3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 4694 –æ–Ω–ª–∞–π–Ω - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  } finally {
    await test.cleanup();
  }
}

runTest(); 