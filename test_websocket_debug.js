const io = require('socket.io-client');

class WebSocketDebugTest {
  constructor() {
    this.socket1 = null;
    this.socket2 = null;
  }

  async testWebSocket() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');

    try {
      // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
      
      this.socket1 = io('http://localhost:8000');
      this.socket2 = io('http://localhost:8000');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.socket1.on('connect', () => {
        console.log('‚úÖ Socket 1 –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        this.socket1.emit('join', {
          userId: 'test_user_1',
          username: 'test_user_1',
          avatarUrl: ''
        });
        console.log('üì§ Socket 1: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω join');
      });

      this.socket1.on('onlineUsers', (users) => {
        console.log('üì• Socket 1: –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
      });

      this.socket1.on('newMessage', (message) => {
        console.log('üì• Socket 1: –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.socket2.on('connect', () => {
        console.log('‚úÖ Socket 2 –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        this.socket2.emit('join', {
          userId: 'test_user_2',
          username: 'test_user_2',
          avatarUrl: ''
        });
        console.log('üì§ Socket 2: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω join');
      });

      this.socket2.on('onlineUsers', (users) => {
        console.log('üì• Socket 2: –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
      });

      this.socket2.on('newMessage', (message) => {
        console.log('üì• Socket 2: –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      });

      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await this.wait(2000);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log('\n2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      this.socket1.emit('sendMessage', {
        receiverId: 'test_user_2',
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket!',
        senderId: 'test_user_1',
        senderUsername: 'test_user_1'
      });
      console.log('üì§ Socket 1: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ');

      // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.wait(3000);

      console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log('- WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      console.log('- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç Socket 1 –∫ Socket 2');
      console.log('- Socket 2 –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ newMessage');

      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ WebSocket:', error);
      return false;
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (this.socket1) {
        this.socket1.disconnect();
      }
      if (this.socket2) {
        this.socket2.disconnect();
      }
    }
  }

  wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function runWebSocketDebugTest() {
  const test = new WebSocketDebugTest();
  
  try {
    const result = await test.testWebSocket();
    
    if (result) {
      console.log('\nüéâ –¢–µ—Å—Ç WebSocket –∑–∞–≤–µ—Ä—à–µ–Ω!');
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç WebSocket –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏');
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  runWebSocketDebugTest();
}

module.exports = WebSocketDebugTest; 