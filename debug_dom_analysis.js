const puppeteer = require('puppeteer');

async function debugDOMAnalysis() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ DOM-–∞–Ω–∞–ª–∏–∑–∞...');
    
    const browser = await puppeteer.launch({
        headless: false,
        slowMo: 100
    });
    
    const page = await browser.newPage();
    
    try {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ http://localhost:3000...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
        const currentUrl = await page.url();
        console.log(`üîó –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
        console.log('\nüîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫...');
        const buttons = await page.$$('button');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttons.length}`);
        
        for (let i = 0; i < buttons.length; i++) {
            const text = await buttons[i].evaluate(el => el.textContent || '');
            const isVisible = await buttons[i].isVisible();
            console.log(`   –ö–Ω–æ–ø–∫–∞ ${i + 1}: "${text}" (–≤–∏–¥–∏–º–∞—è: ${isVisible})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid
        console.log('\nüîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid...');
        const testIdElements = await page.$$('[data-testid]');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-testid: ${testIdElements.length}`);
        
        for (let i = 0; i < testIdElements.length; i++) {
            const testId = await testIdElements[i].evaluate(el => el.getAttribute('data-testid'));
            const text = await testIdElements[i].evaluate(el => el.textContent || '');
            const isVisible = await testIdElements[i].isVisible();
            console.log(`   –≠–ª–µ–º–µ–Ω—Ç ${i + 1}: data-testid="${testId}", —Ç–µ–∫—Å—Ç="${text}" (–≤–∏–¥–∏–º—ã–π: ${isVisible})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        const pageText = await page.evaluate(() => document.body.innerText);
        console.log(`üìù –¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${pageText.substring(0, 200)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const keywords = ['–≥–æ—Å—Ç—å', '–≤–æ–π—Ç–∏', '–ø–æ—Å—Ç', '—Å–æ–∑–¥–∞—Ç—å', '—á–∞—Ç', '–ø—Ä–æ—Ñ–∏–ª—å'];
        console.log('\nüîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...');
        
        for (const keyword of keywords) {
            const found = pageText.toLowerCase().includes(keyword.toLowerCase());
            console.log(`   "${keyword}": ${found ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        const structure = await page.evaluate(() => {
            const header = document.querySelector('header, .header, .app-bar, .navbar');
            const sidebar = document.querySelector('.sidebar, .side-panel, .nav-panel');
            const main = document.querySelector('main, .main, .content, .feed-container');
            const footer = document.querySelector('footer, .footer');
            
            return {
                hasHeader: !!header,
                hasSidebar: !!sidebar,
                hasMainContent: !!main,
                hasFooter: !!footer
            };
        });
        
        console.log(`üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞:`, structure);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        console.log('\nüéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        let state = 'unknown';
        let confidence = 0;
        
        if (pageText.toLowerCase().includes('–≥–æ—Å—Ç—å') && pageText.toLowerCase().includes('–≤–æ–π—Ç–∏')) {
            state = '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
            confidence = 0.8;
        } else if (pageText.toLowerCase().includes('–ø–æ—Å—Ç') || pageText.toLowerCase().includes('–ª–µ–Ω—Ç–∞')) {
            state = '–ì–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª';
            confidence = 0.7;
        } else if (pageText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å')) {
            state = '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞';
            confidence = 0.9;
        }
        
        console.log(`üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
        console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await browser.close();
        console.log('\nüßπ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

debugDOMAnalysis().catch(console.error); 