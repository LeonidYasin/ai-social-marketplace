const axios = require('axios');

class RenderLogsSetup {
  constructor(serviceUrl) {
    this.serviceUrl = serviceUrl;
    this.syslogEndpoint = `${serviceUrl}:514`;
  }

  async checkSyslogStatus() {
    try {
      const response = await axios.get(`${this.serviceUrl}/api/syslog/status`);
      console.log('‚úÖ Syslog —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.data.data);
      return true;
    } catch (error) {
      console.error('‚ùå Syslog —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }

  async testSyslogConnection() {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const dgram = require('dgram');
      const client = dgram.createSocket('udp4');
      
      const testMessage = '<14>Jan 15 10:30:00 render-test render: Test log streaming setup';
      
      return new Promise((resolve) => {
        const host = this.serviceUrl.replace('https://', '').replace('http://', '').split(':')[0];
        client.send(testMessage, 514, host, (err) => {
          client.close();
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
            resolve(false);
          } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            resolve(true);
          }
        });
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è syslog:', error.message);
      return false;
    }
  }

  generateSetupInstructions() {
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Log Streaming –≤ Render:');
    console.log('=' .repeat(60));
    console.log('\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Render Dashboard');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
    console.log('3. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "Logs"');
    console.log('4. –í–∫–ª—é—á–∏—Ç–µ "Log Streaming"');
    console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
    console.log(`   - Protocol: UDP`);
    console.log(`   - Host: ${this.serviceUrl.replace('https://', '').replace('http://', '')}`);
    console.log(`   - Port: 514`);
    const host = this.serviceUrl.replace('https://', '').replace('http://', '').split(':')[0];
    console.log(`   - Log Endpoint: ${host}:514`);
    console.log('\n6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    console.log('\n7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:');
    console.log(`   curl ${this.serviceUrl}/api/syslog/status`);
    console.log(`   curl ${this.serviceUrl}/api/syslog/logs?limit=5`);
  }

  async runSetup() {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Log Streaming –¥–ª—è Render');
    console.log('=' .repeat(50));
    console.log(`Service URL: ${this.serviceUrl}`);
    console.log(`Syslog Endpoint: ${this.syslogEndpoint}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å syslog —Å–µ—Ä–≤–µ—Ä–∞
    const isRunning = await this.checkSyslogStatus();
    if (!isRunning) {
      console.log('‚ùå Syslog —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π.');
      return false;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const connectionOk = await this.testSyslogConnection();
    if (!connectionOk) {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.');
      return false;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    this.generateSetupInstructions();

    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ –≤ Render Dashboard');
    console.log('2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ API');

    return true;
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const serviceUrl = process.argv[2];
if (!serviceUrl) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ URL —Å–µ—Ä–≤–∏—Å–∞:');
  console.log('node setup-render-logs.js https://your-app.onrender.com');
  process.exit(1);
}

const setup = new RenderLogsSetup(serviceUrl);
setup.runSetup().catch(console.error); 