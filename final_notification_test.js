async function finalNotificationTest() {
  console.log('=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694" (ID: 109)');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = {
      username: `final_sender_${Date.now()}`,
      email: `final_sender${Date.now()}@example.com`,
      password: 'testpass123',
      first_name: 'Final',
      last_name: 'Sender'
    };
    
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(sender)
    });
    
    if (!registerResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.status}`);
    }
    
    const senderData = await registerResponse.json();
    console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', senderData.username);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const messageResponse = await fetch('http://localhost:8000/api/messages/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${senderData.token}`
      },
      body: JSON.stringify({
        receiverId: 109,
        content: 'üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï! –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!'
      })
    });
    
    if (!messageResponse.ok) {
      const errorText = await messageResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${messageResponse.status} - ${errorText}`);
    }
    
    const messageData = await messageResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageData.id);
    
    // –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...');
    setTimeout(async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ì–æ—Å—Ç—å 4694)
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const checker = {
          username: `checker_${Date.now()}`,
          email: `checker${Date.now()}@example.com`,
          password: 'testpass123',
          first_name: 'Checker',
          last_name: 'User'
        };
        
        const checkerResponse = await fetch('http://localhost:8000/api/users/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(checker)
        });
        
        if (checkerResponse.ok) {
          const checkerData = await checkerResponse.json();
          
          const notificationsResponse = await fetch('http://localhost:8000/api/notifications', {
            headers: { 'Authorization': `Bearer ${checkerData.token}` }
          });
          
          if (notificationsResponse.ok) {
            const notifications = await notificationsResponse.json();
            console.log('üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ:', notifications);
            
            if (notifications.notifications && notifications.notifications.length > 0) {
              console.log('üéâ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ù–ê–ô–î–ï–ù–´!');
              notifications.notifications.forEach((notif, index) => {
                console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
                console.log(`     –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${notif.user_id}, –¢–∏–ø: ${notif.type}`);
              });
            } else {
              console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationsResponse.status);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ì–æ—Å—Ç—å 4694)
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 109...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ –ì–æ—Å—Ç—å 4694
        const guestLoginResponse = await fetch('http://localhost:8000/api/users/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            username: 'guest_469492e4_4g6cde',
            password: 'guest_password'
          })
        });
        
        if (guestLoginResponse.ok) {
          const guestData = await guestLoginResponse.json();
          console.log('‚úÖ –í—Ö–æ–¥ –ø–æ–¥ –ì–æ—Å—Ç—å 4694 –≤—ã–ø–æ–ª–Ω–µ–Ω');
          
          const guestNotificationsResponse = await fetch('http://localhost:8000/api/notifications', {
            headers: { 'Authorization': `Bearer ${guestData.token}` }
          });
          
          if (guestNotificationsResponse.ok) {
            const guestNotifications = await guestNotificationsResponse.json();
            console.log('üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ì–æ—Å—Ç—å 4694:', guestNotifications);
            
            if (guestNotifications.notifications && guestNotifications.notifications.length > 0) {
              console.log('üéâ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ù–ê–ô–î–ï–ù–´!');
              guestNotifications.notifications.forEach((notif, index) => {
                console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
              });
            } else {
              console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', guestNotificationsResponse.status);
          }
        } else {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–¥ –ì–æ—Å—Ç—å 4694');
        }
        
        console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
      }
      
      process.exit(0);
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

finalNotificationTest(); 