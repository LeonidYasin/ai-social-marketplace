#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å Render.com
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node get-render-logs.js [—Ç–∏–ø] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node get-render-logs.js backend --limit 50
 * node get-render-logs.js frontend --level error
 * node get-render-logs.js all --search "CORS"
 * node get-render-logs.js stats
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RENDER_API_URL = 'https://social-marketplace-api.onrender.com';
const LOG_TYPES = ['backend', 'frontend', 'all', 'stats'];

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
async function getLogs(type = 'all', params = {}) {
  try {
    console.log(colorize(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ç–∏–ø–∞: ${type}`, 'cyan'));
    
    const queryParams = new URLSearchParams(params).toString();
    const url = `${RENDER_API_URL}/api/logs/${type}${queryParams ? '?' + queryParams : ''}`;
    
    console.log(colorize(`üì° –ó–∞–ø—Ä–æ—Å: ${url}`, 'gray'));
    
    const response = await makeRequest(url);
    
    if (response.status !== 200) {
      throw new Error(`HTTP ${response.status}: ${response.data.message || 'Unknown error'}`);
    }
    
    return response.data;
    
  } catch (error) {
    console.error(colorize(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: ${error.message}`, 'red'));
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
function displayLogs(logsData, type) {
  if (!logsData || !logsData.success) {
    console.log(colorize(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: ${logsData?.message || 'Unknown error'}`, 'red'));
    return;
  }
  
  if (type === 'stats') {
    displayStats(logsData.stats);
    return;
  }
  
  const logs = logsData.logs || [];
  const count = logsData.count || 0;
  
  console.log(colorize(`\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}`, 'green'));
  
  if (logs.length === 0) {
    console.log(colorize('üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'yellow'));
    return;
  }
  
  console.log(colorize('\nüìã –õ–æ–≥–∏:', 'cyan'));
  console.log('='.repeat(80));
  
  logs.forEach((log, index) => {
    const timestamp = new Date(log.timestamp).toLocaleString('ru-RU');
    const level = log.level?.toUpperCase() || 'INFO';
    const source = log.source || 'unknown';
    const message = log.message || 'No message';
    
    // –¶–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let levelColor = 'white';
    switch (level.toLowerCase()) {
      case 'error': levelColor = 'red'; break;
      case 'warning': levelColor = 'yellow'; break;
      case 'info': levelColor = 'blue'; break;
      case 'debug': levelColor = 'magenta'; break;
    }
    
    console.log(colorize(`[${timestamp}] [${level}] [${source}] ${message}`, levelColor));
    
    // –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (log.data && Object.keys(log.data).length > 0) {
      console.log(colorize(`  üìÑ Data: ${JSON.stringify(log.data, null, 2)}`, 'gray'));
    }
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    if (index < logs.length - 1) {
      console.log('-'.repeat(40));
    }
  });
  
  console.log('='.repeat(80));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats(stats) {
  console.log(colorize('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:', 'cyan'));
  console.log('='.repeat(50));
  
  console.log(colorize('üîß Backend:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ: ${stats.backend.total}`);
  console.log(`  –û—à–∏–±–∫–∏: ${colorize(stats.backend.errors, 'red')}`);
  console.log(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${colorize(stats.backend.warnings, 'yellow')}`);
  console.log(`  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${colorize(stats.backend.info, 'green')}`);
  
  console.log(colorize('\nüé® Frontend:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ: ${stats.frontend.total}`);
  console.log(`  –û—à–∏–±–∫–∏: ${colorize(stats.frontend.errors, 'red')}`);
  console.log(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${colorize(stats.frontend.warnings, 'yellow')}`);
  console.log(`  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${colorize(stats.frontend.info, 'green')}`);
  
  console.log(colorize('\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${colorize(stats.total, 'cyan')}`);
  
  console.log('='.repeat(50));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
function saveLogsToFile(logsData, type, params = {}) {
  if (!logsData || !logsData.success) return;
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `render-logs-${type}-${timestamp}.json`;
  const filepath = path.join(__dirname, 'logs', filename);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(path.join(__dirname, 'logs'))) {
    fs.mkdirSync(path.join(__dirname, 'logs'));
  }
  
  try {
    fs.writeFileSync(filepath, JSON.stringify(logsData, null, 2), 'utf8');
    console.log(colorize(`üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`, 'green'));
  } catch (error) {
    console.error(colorize(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`, 'red'));
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const type = args[0] || 'all';
  
  if (!LOG_TYPES.includes(type)) {
    console.log(colorize('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–≥–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:', 'red'));
    LOG_TYPES.forEach(t => console.log(colorize(`  - ${t}`, 'cyan')));
    console.log(colorize('\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', 'yellow'));
    console.log('  node get-render-logs.js backend --limit 50');
    console.log('  node get-render-logs.js frontend --level error');
    console.log('  node get-render-logs.js all --search "CORS"');
    console.log('  node get-render-logs.js stats');
    return;
  }
  
  // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const params = {};
  for (let i = 1; i < args.length; i += 2) {
    if (args[i].startsWith('--') && args[i + 1]) {
      const key = args[i].substring(2);
      const value = args[i + 1];
      params[key] = value;
    }
  }
  
  console.log(colorize('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å Render.com', 'green'));
  console.log(colorize(`üìç API URL: ${RENDER_API_URL}`, 'gray'));
  
  const logsData = await getLogs(type, params);
  displayLogs(logsData, type);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
  saveLogsToFile(logsData, type, params);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(error => {
    console.error(colorize(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red'));
    process.exit(1);
  });
}

module.exports = { getLogs, displayLogs, displayStats }; 