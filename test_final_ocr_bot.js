const FinalOCRBot = require('./final_ocr_bot');

class TestFinalOCRBot {
    constructor() {
        this.bot = new FinalOCRBot();
    }

    async runBasicTests() {
        try {
            console.log('üéØ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ OCR –±–æ—Ç–∞...');
            
            await this.bot.init();
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await this.bot.page.goto(this.bot.baseUrl);
            await this.bot.pause(3000);
            
            // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            console.log('\nüì± –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            const state = await this.bot.analyzeCurrentState();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', state);
            
            // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            console.log('\n‚úèÔ∏è –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
            const createPostResult = await this.bot.createPost();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', createPostResult ? '‚úÖ' : '‚ùå');
            
            // –¢–µ—Å—Ç 3: –õ–∞–π–∫ –ø–æ—Å—Ç–∞
            console.log('\nüëç –¢–µ—Å—Ç 3: –õ–∞–π–∫ –ø–æ—Å—Ç–∞');
            const likeResult = await this.bot.likePost();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', likeResult ? '‚úÖ' : '‚ùå');
            
            // –¢–µ—Å—Ç 4: –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
            console.log('\nüí¨ –¢–µ—Å—Ç 4: –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞');
            const chatResult = await this.bot.sendMessage();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', chatResult ? '‚úÖ' : '‚ùå');
            
            // –¢–µ—Å—Ç 5: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
            console.log('\nüìã –¢–µ—Å—Ç 5: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é');
            const menuResult = await this.bot.openMenu();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', menuResult ? '‚úÖ' : '‚ùå');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            const report = await this.bot.generateReport();
            
            console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
            console.log('=' * 50);
            console.log(`–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${report.summary.totalActions}`);
            console.log(`–û—à–∏–±–æ–∫: ${report.summary.errors}`);
            console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${report.summary.warnings}`);
            console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${report.summary.success}`);
            
            const successRate = (report.summary.success / report.summary.totalActions * 100).toFixed(1);
            console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
            
            if (successRate >= 80) {
                console.log('üéâ OCR –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
            } else if (successRate >= 60) {
                console.log('üëç OCR –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ');
            } else {
                console.log('‚ö†Ô∏è OCR –±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
            this.bot.addError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤', error);
        } finally {
            this.bot.handleFinalErrors();
            await this.bot.cleanup();
        }
    }

    async runScenarioTests() {
        try {
            console.log('üé¨ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');
            
            await this.bot.init();
            
            // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–∞–∑–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            const basicScenario = {
                name: '–ë–∞–∑–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ',
                steps: [
                    { description: '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è', action: 'analyze_state', delay: 2000 },
                    { description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞', action: 'create_post', delay: 3000 },
                    { description: '–õ–∞–π–∫ –ø–æ—Å—Ç–∞', action: 'like_post', delay: 2000 }
                ]
            };
            
            console.log('\nüé¨ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–∞–∑–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ');
            const scenario1Result = await this.bot.runScenario(basicScenario);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', scenario1Result ? '‚úÖ' : '‚ùå');
            
            // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è
            const navigationScenario = {
                name: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
                steps: [
                    { description: '–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞', action: 'send_message', delay: 2000 },
                    { description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é', action: 'open_menu', delay: 2000 }
                ]
            };
            
            console.log('\nüé¨ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∞–≤–∏–≥–∞—Ü–∏—è');
            const scenario2Result = await this.bot.runScenario(navigationScenario);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', scenario2Result ? '‚úÖ' : '‚ùå');
            
            console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¶–ï–ù–ê–†–ò–ï–í:');
            console.log(`–°—Ü–µ–Ω–∞—Ä–∏–π 1: ${scenario1Result ? '‚úÖ' : '‚ùå'}`);
            console.log(`–°—Ü–µ–Ω–∞—Ä–∏–π 2: ${scenario2Result ? '‚úÖ' : '‚ùå'}`);
            
            const successCount = [scenario1Result, scenario2Result].filter(Boolean).length;
            console.log(`–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${successCount}/2`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', error);
            this.bot.addError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', error);
        } finally {
            this.bot.handleFinalErrors();
            await this.bot.cleanup();
        }
    }

    async runMultiuserTest() {
        try {
            console.log('üë• –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...');
            
            await this.bot.init();
            
            const multiuserResult = await this.bot.runMultiuserTest();
            
            console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –¢–ï–°–¢–ê:');
            console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${multiuserResult ? '‚úÖ' : '‚ùå'}`);
            
            if (multiuserResult) {
                console.log('üéâ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
            } else {
                console.log('‚ö†Ô∏è –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–µ:', error);
            this.bot.addError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–µ', error);
        } finally {
            this.bot.handleFinalErrors();
            await this.bot.cleanup();
        }
    }

    async runAllTests() {
        try {
            console.log('üéØ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –§–ò–ù–ê–õ–¨–ù–û–ì–û OCR –ë–û–¢–ê');
            console.log('=' * 60);
            
            // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
            await this.runBasicTests();
            
            console.log('\n' + '=' * 60);
            
            // –¢–µ—Å—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            await this.runScenarioTests();
            
            console.log('\n' + '=' * 60);
            
            // –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç
            await this.runMultiuserTest();
            
            console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            this.bot.addError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    const tester = new TestFinalOCRBot();
    
    const args = process.argv.slice(2);
    
    if (args.includes('--basic')) {
        tester.runBasicTests();
    } else if (args.includes('--scenarios')) {
        tester.runScenarioTests();
    } else if (args.includes('--multiuser')) {
        tester.runMultiuserTest();
    } else {
        tester.runAllTests();
    }
}

module.exports = TestFinalOCRBot; 