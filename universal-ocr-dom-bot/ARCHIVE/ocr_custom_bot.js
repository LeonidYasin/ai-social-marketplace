const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

class OCRCustomBot {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        this.testResults = [];
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir);
        }
    }

    async init(browserCount = 1) {
        console.log(`ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: ['--start-maximized', '--no-sandbox', `--user-data-dir=./user-data-${i}`]
            });
            
            const page = await browser.newPage();
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 0) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    async clickOnText(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ò—â–µ–º —Ç–µ–∫—Å—Ç "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `search_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length === 0) {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const target = coords[0];
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ù–∞–π–¥–µ–Ω–æ "${target.text}" (conf: ${target.confidence}%)`);
        console.log(`üìç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${target.x}, y=${target.y}, —Ü–µ–Ω—Ç—Ä: (${target.centerX}, ${target.centerY})`);

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
        await this.pages[pageIndex].mouse.click(target.centerX, target.centerY);
        console.log(`üñ±Ô∏è –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        return true;
    }

    async verifyTextExists(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, `verify_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length > 0) {
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–∞–π–¥–µ–Ω (${coords.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)`);
            return true;
        } else {
            console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }
    }

    async waitForText(pageIndex, searchText, timeout = 10000, description = '') {
        console.log(`‚è≥ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "${searchText}" ${description}`);
        
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const screenshotPath = await this.takeScreenshot(pageIndex, `wait_${searchText.replace(/\s+/g, '_')}`);
            const coords = await this.findTextCoordinates(screenshotPath, searchText);
            
            if (coords.length > 0) {
                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –ø–æ—è–≤–∏–ª—Å—è —á–µ—Ä–µ–∑ ${Date.now() - startTime}ms`);
                return true;
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log(`‚ùå –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ ${timeout}ms`);
        return false;
    }

    async runStep(step) {
        console.log(`\nüìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${step.description}`);
        
        try {
            switch (step.action) {
                case 'navigate':
                    for (let j = 0; j < this.pages.length; j++) {
                        await this.pages[j].goto(step.url, { waitUntil: 'networkidle2' });
                        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${j + 1}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${step.url}`);
                    }
                    return true;

                case 'wait':
                    await new Promise(resolve => setTimeout(resolve, step.duration));
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${step.duration}ms`);
                    return true;

                case 'click':
                    return await this.clickOnText(step.browserIndex, step.text, step.description);

                case 'verify':
                    return await this.verifyTextExists(step.browserIndex, step.text, step.description);

                case 'waitFor':
                    return await this.waitForText(step.browserIndex, step.text, step.timeout, step.description);

                default:
                    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
                    return false;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: ${error.message}`);
            return false;
        }
    }

    async createCustomScenario() {
        console.log('\nüé¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è');
        
        const scenario = {
            name: '',
            description: '',
            steps: []
        };

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario.name = await this.question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ');
        scenario.description = await this.question('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ');

        console.log('\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
        console.log('1. navigate - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL');
        console.log('2. wait - –æ–∂–∏–¥–∞–Ω–∏–µ (–º—Å)');
        console.log('3. click - –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É');
        console.log('4. verify - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞');
        console.log('5. waitFor - –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞');
        console.log('6. finish - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è');

        let stepNumber = 1;
        while (true) {
            console.log(`\n--- –®–∞–≥ ${stepNumber} ---`);
            
            const action = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ');
            
            if (action === '6' || action.toLowerCase() === 'finish') {
                break;
            }

            const step = {
                description: await this.question('–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞: ')
            };

            switch (action) {
                case '1':
                    step.action = 'navigate';
                    step.url = await this.question('URL: ');
                    break;

                case '2':
                    step.action = 'wait';
                    step.duration = parseInt(await this.question('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º—Å): '));
                    break;

                case '3':
                    step.action = 'click';
                    step.browserIndex = parseInt(await this.question('–ù–æ–º–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ (1-2): ')) - 1;
                    step.text = await this.question('–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ');
                    break;

                case '4':
                    step.action = 'verify';
                    step.browserIndex = parseInt(await this.question('–ù–æ–º–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ (1-2): ')) - 1;
                    step.text = await this.question('–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ');
                    break;

                case '5':
                    step.action = 'waitFor';
                    step.browserIndex = parseInt(await this.question('–ù–æ–º–µ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ (1-2): ')) - 1;
                    step.text = await this.question('–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: ');
                    step.timeout = parseInt(await this.question('–¢–∞–π–º–∞—É—Ç (–º—Å): '));
                    break;

                default:
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è');
                    continue;
            }

            scenario.steps.push(step);
            stepNumber++;
        }

        return scenario;
    }

    question(prompt) {
        return new Promise((resolve) => {
            this.rl.question(prompt, (answer) => {
                resolve(answer);
            });
        });
    }

    async runScenario(scenario) {
        console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
        
        const results = {
            scenario: scenario.name,
            steps: [],
            success: true
        };

        for (let i = 0; i < scenario.steps.length; i++) {
            const step = scenario.steps[i];
            
            const stepResult = {
                step: i + 1,
                description: step.description,
                success: false,
                error: null
            };

            try {
                stepResult.success = await this.runStep(step);
                
                if (!stepResult.success) {
                    stepResult.error = `–®–∞–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`;
                    results.success = false;
                    
                    const continueTest = await this.question('\n‚ùå –®–∞–≥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/n): ');
                    if (continueTest.toLowerCase() !== 'y') {
                        break;
                    }
                }
            } catch (error) {
                stepResult.error = error.message;
                results.success = false;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ ${i + 1}:`, error.message);
            }

            results.steps.push(stepResult);
        }

        this.testResults.push(results);
        return results;
    }

    async interactiveMode() {
        console.log('üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('1. create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π');
        console.log('2. run - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π');
        console.log('3. manual - —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
        console.log('4. exit - –≤—ã—Ö–æ–¥');

        while (true) {
            const command = await this.question('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ');

            switch (command.toLowerCase()) {
                case 'create':
                    const scenario = await this.createCustomScenario();
                    await this.runScenario(scenario);
                    break;

                case 'run':
                    await this.runPresetScenarios();
                    break;

                case 'manual':
                    await this.manualControl();
                    break;

                case 'exit':
                    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
                    return;

                default:
                    console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                    break;
            }
        }
    }

    async runPresetScenarios() {
        console.log('\nüìã –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:');
        console.log('1. basic - –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        console.log('2. multiuser - –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        console.log('3. create_post - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');

        const choice = await this.question('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π (1-3): ');

        const scenarios = {
            '1': {
                name: '–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                steps: [
                    { action: 'navigate', url: 'http://localhost:3000', description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
                    { action: 'wait', duration: 3000, description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏' },
                    { action: 'verify', browserIndex: 0, text: '–≥–æ—Å—Ç—å', description: '–Ω–∞ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞' },
                    { action: 'click', browserIndex: 0, text: '–≥–æ—Å—Ç—å', description: '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞' },
                    { action: 'waitFor', browserIndex: 0, text: '–ø–æ—Å—Ç', timeout: 10000, description: '–≤ –ª–µ–Ω—Ç–µ –ø–æ—Å—Ç–æ–≤' }
                ]
            },
            '2': {
                name: '–ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                steps: [
                    { action: 'navigate', url: 'http://localhost:3000', description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
                    { action: 'wait', duration: 3000, description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏' },
                    { action: 'click', browserIndex: 0, text: '–≥–æ—Å—Ç—å', description: '–¥–ª—è –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                    { action: 'waitFor', browserIndex: 0, text: '–ø–æ—Å—Ç', timeout: 10000, description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                    { action: 'click', browserIndex: 1, text: '–≥–æ—Å—Ç—å', description: '–¥–ª—è –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
                    { action: 'waitFor', browserIndex: 1, text: '–ø–æ—Å—Ç', timeout: 10000, description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
                ]
            },
            '3': {
                name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞',
                description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞',
                steps: [
                    { action: 'navigate', url: 'http://localhost:3000', description: '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
                    { action: 'wait', duration: 3000, description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏' },
                    { action: 'click', browserIndex: 0, text: '–≥–æ—Å—Ç—å', description: '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞' },
                    { action: 'waitFor', browserIndex: 0, text: '–ø–æ—Å—Ç', timeout: 10000, description: '–æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞' },
                    { action: 'verify', browserIndex: 0, text: '—Å–æ–∑–¥–∞—Ç—å', description: '–∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞' }
                ]
            }
        };

        if (scenarios[choice]) {
            await this.runScenario(scenarios[choice]);
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è');
        }
    }

    async manualControl() {
        console.log('\nüéÆ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏');
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('1. click <browser> <text> - –∫–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É');
        console.log('2. verify <browser> <text> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞');
        console.log('3. wait <browser> <text> <timeout> - –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞');
        console.log('4. screenshot <browser> - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç');
        console.log('5. back - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');

        while (true) {
            const command = await this.question('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ');

            if (command.toLowerCase() === 'back') {
                break;
            }

            const parts = command.split(' ');
            const action = parts[0];

            try {
                switch (action) {
                    case 'click':
                        const browserIndex = parseInt(parts[1]) - 1;
                        const text = parts.slice(2).join(' ');
                        await this.clickOnText(browserIndex, text);
                        break;

                    case 'verify':
                        const browserIndex2 = parseInt(parts[1]) - 1;
                        const text2 = parts.slice(2).join(' ');
                        await this.verifyTextExists(browserIndex2, text2);
                        break;

                    case 'wait':
                        const browserIndex3 = parseInt(parts[1]) - 1;
                        const text3 = parts.slice(2, -1).join(' ');
                        const timeout = parseInt(parts[parts.length - 1]);
                        await this.waitForText(browserIndex3, text3, timeout);
                        break;

                    case 'screenshot':
                        const browserIndex4 = parseInt(parts[1]) - 1;
                        await this.takeScreenshot(browserIndex4, 'manual');
                        break;

                    default:
                        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                        break;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
            }
        }
    }

    async close() {
        this.rl.close();
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
async function main() {
    const bot = new OCRCustomBot();
    
    try {
        console.log('ü§ñ OCR –ö–∞—Å—Ç–æ–º–Ω—ã–π –ë–æ—Ç –¥–ª—è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        console.log('=====================================');
        
        const browserCount = parseInt(process.argv[2]) || 2;
        await bot.init(browserCount);
        
        await bot.interactiveMode();
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await bot.close();
    }
}

main().catch(console.error); 