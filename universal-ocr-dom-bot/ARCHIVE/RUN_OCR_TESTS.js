#!/usr/bin/env node

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ OCR —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node RUN_OCR_TESTS.js [–æ–ø—Ü–∏–∏]
 */

const OCRBot = require('./OCR_BOT_IMPLEMENTATION');
const testScenarios = require('./TEST_SCENARIOS');
const path = require('path');

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const options = {
  device: 'desktop',
  scenarios: 'all',
  headless: false,
  slowMo: 100,
  output: 'reports'
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for (let i = 0; i < args.length; i++) {
  switch (args[i]) {
    case '--device':
      options.device = args[++i];
      break;
    case '--scenarios':
      options.scenarios = args[++i];
      break;
    case '--headless':
      options.headless = true;
      break;
    case '--slow':
      options.slowMo = parseInt(args[++i]) || 200;
      break;
    case '--output':
      options.output = args[++i];
      break;
    case '--help':
      showHelp();
      process.exit(0);
      break;
  }
}

function showHelp() {
  console.log(`
OCR Bot - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä—É—é—â–∏–π –º–æ–¥—É–ª—å

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node RUN_OCR_TESTS.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --device <device>     –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (desktop, mobile) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: desktop]
  --scenarios <type>    –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (all, basic, advanced, multiuser, auth, post, chat) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all]
  --headless           –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  --slow <ms>          –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100]
  --output <path>      –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: reports]
  --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node RUN_OCR_TESTS.js --device mobile --scenarios basic
  node RUN_OCR_TESTS.js --headless --scenarios auth
  node RUN_OCR_TESTS.js --slow 200 --scenarios all
`);
}

// –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function getScenariosToRun() {
  switch (options.scenarios) {
    case 'all':
      return testScenarios.allScenarios;
    case 'basic':
      return testScenarios.basicScenarios;
    case 'advanced':
      return testScenarios.advancedScenarios;
    case 'multiuser':
      return testScenarios.multiuserScenarios;
    case 'auth':
      return [testScenarios.authScenario];
    case 'post':
      return [testScenarios.createPostScenario];
    case 'chat':
      return [testScenarios.chatScenario, testScenarios.sendMessageScenario];
    default:
      console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${options.scenarios}`);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: all, basic, advanced, multiuser, auth, post, chat');
      process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ OCR —Ç–µ—Å—Ç–æ–≤');
  console.log(`üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${options.device}`);
  console.log(`üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏: ${options.scenarios}`);
  console.log(`üëª Headless: ${options.headless}`);
  console.log(`üêå –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: ${options.slowMo}ms`);
  console.log(`üìÅ –û—Ç—á–µ—Ç—ã: ${options.output}`);
  console.log('');

  const bot = new OCRBot({
    browser: {
      headless: options.headless,
      slowMo: options.slowMo
    },
    devices: {
      desktop: { width: 1920, height: 1080 },
      mobile: { width: 375, height: 667 }
    }
  });

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    await bot.init(options.device);
    console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const scenarios = getScenariosToRun();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${scenarios.length}`);

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    for (let i = 0; i < scenarios.length; i++) {
      const scenario = scenarios[i];
      console.log(`\nüé¨ [${i + 1}/${scenarios.length}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
      
      const result = await bot.runScenario(scenario);
      
      if (result.status === 'passed') {
        console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è`);
        console.log(`   –û—à–∏–±–∫–∏: ${result.errors.join(', ')}`);
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');
    const report = await bot.generateReport();
    
    // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${report.summary.totalScenarios}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${report.summary.passedScenarios}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${report.summary.failedScenarios}`);
    console.log(`   –í—Å–µ–≥–æ —à–∞–≥–æ–≤: ${report.summary.totalSteps}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: ${report.summary.passedSteps}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —à–∞–≥–æ–≤: ${report.summary.failedSteps}`);
    
    if (report.summary.failedScenarios > 0) {
      console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
      report.errors.forEach(error => {
        console.log(`   - ${error.step || 'Unknown'}: ${error.error}`);
      });
      
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      report.recommendations.forEach(rec => {
        console.log(`   - ${rec.message} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${rec.priority})`);
      });
      
      process.exit(1); // –í—ã—Ö–æ–¥ —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã
    } else {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    await bot.cleanup();
    console.log('üîí –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { runTests, options }; 