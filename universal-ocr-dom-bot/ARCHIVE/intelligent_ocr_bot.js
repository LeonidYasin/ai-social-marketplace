const puppeteer = require('puppeteer');
const { IntelligentStateAnalyzer } = require('./intelligent_state_analyzer');
const fs = require('fs');
const path = require('path');

class IntelligentOCRBot {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.stateAnalyzer = new IntelligentStateAnalyzer();
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        this.currentState = null;
        this.actionHistory = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir, { recursive: true });
        }
    }

    async init(browserCount = 1) {
        console.log(`ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ OCR –±–æ—Ç–∞ (${browserCount} –±—Ä–∞—É–∑–µ—Ä–æ–≤)...`);
        
        for (let i = 0; i < browserCount; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: null,
                args: ['--start-maximized', '--no-sandbox', `--user-data-dir=./user-data-${i}`]
            });
            
            const page = await browser.newPage();
            
            this.browsers.push(browser);
            this.pages.push(page);
            
            console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω`);
        }
    }

    async takeScreenshot(pageIndex, name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_browser${pageIndex + 1}_${name}.png`;
        await this.pages[pageIndex].screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async analyzeCurrentState(pageIndex) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${pageIndex + 1}...`);
        
        const screenshotPath = await this.takeScreenshot(pageIndex, 'state_analysis');
        const stateAnalysis = await this.stateAnalyzer.analyzeScreenshot(screenshotPath);
        
        this.currentState = stateAnalysis;
        
        console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateAnalysis.detectedState.name}`);
        console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(stateAnalysis.confidence * 100).toFixed(1)}%`);
        console.log(`üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ${stateAnalysis.availableActions.join(', ')}`);
        
        if (stateAnalysis.context.suggestedNextActions.length > 0) {
            console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ${stateAnalysis.context.suggestedNextActions.join(', ')}`);
        }
        
        return stateAnalysis;
    }

    async findTextInCurrentState(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü–æ–∏—Å–∫ "${searchText}" ${description}`);
        
        // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const stateAnalysis = await this.analyzeCurrentState(pageIndex);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        if (stateAnalysis.confidence < 0.5) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(stateAnalysis.confidence * 100).toFixed(1)}%)`);
        }
        
        // –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const matchingElements = stateAnalysis.elements.filter(element => 
            element.text.toLowerCase().includes(searchText.toLowerCase()) && 
            element.confidence > 50
        );
        
        if (matchingElements.length === 0) {
            const error = `–¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "${stateAnalysis.detectedState.name}"`;
            await this.handleError(error, '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                searchText,
                currentState: stateAnalysis.detectedState.name,
                confidence: stateAnalysis.confidence,
                availableElements: stateAnalysis.elements.map(el => el.text).slice(0, 10),
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }

        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —ç–ª–µ–º–µ–Ω—Ç (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –¥–æ–≤–µ—Ä–∏–µ–º)
        const bestElement = matchingElements.reduce((best, current) => 
            current.confidence > best.confidence ? current : best
        );
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ "${bestElement.text}" (conf: ${bestElement.confidence}%)`);
        console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${bestElement.x}, y=${bestElement.y}, —Ü–µ–Ω—Ç—Ä: (${bestElement.centerX}, ${bestElement.centerY})`);

        try {
            await this.pages[pageIndex].mouse.click(bestElement.centerX, bestElement.centerY);
            console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${bestElement.centerX}, ${bestElement.centerY})`);
            
            // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.analyzeCurrentState(pageIndex);
            
            return true;
        } catch (error) {
            await this.handleError(`–ö–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${error.message}`, '–∫–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
                searchText,
                coordinates: { x: bestElement.centerX, y: bestElement.centerY },
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }
    }

    async verifyTextInCurrentState(pageIndex, searchText, description = '') {
        console.log(`üîç –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è "${searchText}" ${description}`);
        
        const stateAnalysis = await this.analyzeCurrentState(pageIndex);
        
        const matchingElements = stateAnalysis.elements.filter(element => 
            element.text.toLowerCase().includes(searchText.toLowerCase()) && 
            element.confidence > 50
        );
        
        if (matchingElements.length > 0) {
            console.log(`‚úÖ –¢–µ–∫—Å—Ç "${searchText}" –Ω–∞–π–¥–µ–Ω (${matchingElements.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)`);
            return true;
        } else {
            const error = `–¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "${stateAnalysis.detectedState.name}"`;
            await this.handleError(error, '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                searchText,
                currentState: stateAnalysis.detectedState.name,
                confidence: stateAnalysis.confidence,
                availableElements: stateAnalysis.elements.map(el => el.text).slice(0, 10),
                browserIndex: pageIndex + 1,
                description
            });
            return false;
        }
    }

    async waitForStateChange(pageIndex, targetState, timeout = 10000, description = '') {
        console.log(`‚è≥ –ë—Ä–∞—É–∑–µ—Ä ${pageIndex + 1}: –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${targetState}" ${description}`);
        
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            const stateAnalysis = await this.analyzeCurrentState(pageIndex);
            
            if (stateAnalysis.detectedState.name === targetState) {
                console.log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${targetState}" –ø—Ä–æ–∏–∑–æ—à–µ–ª —á–µ—Ä–µ–∑ ${Date.now() - startTime}ms`);
                return true;
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        const error = `–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${targetState}" –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∑–∞ ${timeout}ms`;
        await this.handleError(error, '—Ç–∞–π–º–∞—É—Ç', {
            targetState,
            currentState: this.currentState?.detectedState.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            timeout,
            browserIndex: pageIndex + 1,
            description
        });
        return false;
    }

    async handleError(errorMessage, errorType, context) {
        console.log('\n' + '='.repeat(60));
        console.log('‚ùå –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!');
        console.log('='.repeat(60));
        console.log(`üîç –û–ø–∏—Å–∞–Ω–∏–µ: ${errorMessage}`);
        console.log(`üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${JSON.stringify(context, null, 2)}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if (this.currentState) {
            console.log(`\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:`);
            console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${this.currentState.detectedState.name}`);
            console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(this.currentState.confidence * 100).toFixed(1)}%`);
            console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${this.currentState.elements.map(el => el.text).slice(0, 5).join(', ')}`);
        }
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –°–ü–û–°–û–ë–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
        const suggestions = this.getErrorSuggestions(errorType, context);
        suggestions.forEach((suggestion, index) => {
            console.log(`   ${index + 1}. ${suggestion}`);
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã');
        console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        console.log('   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç');
        console.log('   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        const errorInfo = {
            timestamp: new Date().toISOString(),
            error: errorMessage,
            type: errorType,
            context: context,
            currentState: this.currentState ? {
                name: this.currentState.detectedState.name,
                confidence: this.currentState.confidence,
                availableActions: this.currentState.availableActions
            } : null,
            suggestions: suggestions
        };
        
        const errorLogPath = './test_logs/intelligent_error_log.json';
        if (!fs.existsSync('./test_logs')) {
            fs.mkdirSync('./test_logs', { recursive: true });
        }
        
        let errorLog = [];
        if (fs.existsSync(errorLogPath)) {
            errorLog = JSON.parse(fs.readFileSync(errorLogPath, 'utf8'));
        }
        errorLog.push(errorInfo);
        fs.writeFileSync(errorLogPath, JSON.stringify(errorLog, null, 2));
        
        console.log(`\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${errorLogPath}`);
        console.log('='.repeat(60));
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        throw new Error(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${errorMessage}`);
    }

    getErrorSuggestions(errorType, context) {
        const baseSuggestions = {
            '—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω': [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
                '–í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è - —É–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞'
            ],
            '—Ç–∞–π–º–∞—É—Ç': [
                '–£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                '–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø'
            ],
            '–∫–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω': [
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
                '–í–æ–∑–º–æ–∂–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏',
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ —ç–ª–µ–º–µ–Ω—Ç—É',
                '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞'
            ]
        };

        let suggestions = baseSuggestions[errorType] || baseSuggestions['—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (context.currentState) {
            suggestions.push(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "${context.currentState}"`);
            suggestions.push('–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        }

        if (context.availableElements && context.availableElements.length > 0) {
            suggestions.push(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${context.availableElements.join(', ')}`);
        }

        return suggestions;
    }

    async runIntelligentScenario(scenario) {
        console.log(`\nüé¨ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
        
        const results = {
            scenario: scenario.name,
            steps: [],
            success: true,
            error: null,
            stateTransitions: []
        };

        try {
            for (let i = 0; i < scenario.steps.length; i++) {
                const step = scenario.steps[i];
                console.log(`\nüìã –®–∞–≥ ${i + 1}: ${step.description}`);
                
                const stepResult = {
                    step: i + 1,
                    description: step.description,
                    success: false,
                    error: null,
                    stateBefore: this.currentState?.detectedState.name,
                    stateAfter: null
                };

                try {
                    switch (step.action) {
                        case 'navigate':
                            for (let j = 0; j < this.pages.length; j++) {
                                await this.pages[j].goto(step.url, { waitUntil: 'networkidle2' });
                                console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä ${j + 1}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ${step.url}`);
                            }
                            stepResult.success = true;
                            break;
                            
                        case 'wait':
                            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${step.duration}ms`);
                            await new Promise(resolve => setTimeout(resolve, step.duration));
                            stepResult.success = true;
                            break;
                            
                        case 'analyze_state':
                            const stateAnalysis = await this.analyzeCurrentState(step.browserIndex);
                            stepResult.success = stateAnalysis.confidence > 0.5;
                            stepResult.stateAfter = stateAnalysis.detectedState.name;
                            break;
                            
                        case 'click':
                            const clickSuccess = await this.findTextInCurrentState(step.browserIndex, step.text, step.description);
                            if (!clickSuccess && step.required !== false) {
                                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É "${step.text}"`);
                            }
                            stepResult.success = clickSuccess;
                            stepResult.stateAfter = this.currentState?.detectedState.name;
                            break;
                            
                        case 'verify':
                            const verifySuccess = await this.verifyTextInCurrentState(step.browserIndex, step.text, step.description);
                            if (!verifySuccess && step.required !== false) {
                                throw new Error(`–¢–µ–∫—Å—Ç "${step.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                            }
                            stepResult.success = verifySuccess;
                            break;
                            
                        case 'wait_for_state':
                            const waitSuccess = await this.waitForStateChange(step.browserIndex, step.targetState, step.timeout, step.description);
                            if (!waitSuccess && step.required !== false) {
                                throw new Error(`–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${step.targetState}" –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª`);
                            }
                            stepResult.success = waitSuccess;
                            stepResult.stateAfter = this.currentState?.detectedState.name;
                            break;
                            
                        default:
                            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
                    }
                } catch (error) {
                    stepResult.error = error.message;
                    stepResult.success = false;
                    
                    if (step.required !== false) {
                        throw error;
                    }
                }
                
                results.steps.push(stepResult);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if (stepResult.stateBefore && stepResult.stateAfter && stepResult.stateBefore !== stepResult.stateAfter) {
                    results.stateTransitions.push({
                        step: i + 1,
                        from: stepResult.stateBefore,
                        to: stepResult.stateAfter
                    });
                }
                
                if (!stepResult.success && step.required !== false) {
                    results.success = false;
                    results.error = stepResult.error;
                    break;
                }
            }
        } catch (error) {
            results.success = false;
            results.error = error.message;
        }

        return results;
    }

    async generateIntelligentReport() {
        console.log('\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê');
        console.log('=' .repeat(60));
        
        const stateHistory = await this.stateAnalyzer.getStateHistory();
        const stateReport = await this.stateAnalyzer.generateStateReport();
        
        const report = {
            timestamp: new Date().toISOString(),
            stateAnalysis: stateReport,
            actionHistory: this.actionHistory,
            recommendations: this.generateRecommendations(stateHistory)
        };
        
        const reportPath = './test_logs/intelligent_report.json';
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log(`üíæ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
        
        return report;
    }

    generateRecommendations(stateHistory) {
        const recommendations = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        const stateTransitions = [];
        for (let i = 1; i < stateHistory.length; i++) {
            const prev = stateHistory[i - 1];
            const current = stateHistory[i];
            if (prev.detectedState.name !== current.detectedState.name) {
                stateTransitions.push({
                    from: prev.detectedState.name,
                    to: current.detectedState.name,
                    confidence: current.confidence
                });
            }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if (stateHistory.some(s => s.confidence < 0.6)) {
            recommendations.push('–£–ª—É—á—à–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é');
        }
        
        if (stateTransitions.length === 0) {
            recommendations.push('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–æ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ - –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π');
        }
        
        const lowConfidenceStates = stateHistory.filter(s => s.confidence < 0.5);
        if (lowConfidenceStates.length > 0) {
            recommendations.push(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${lowConfidenceStates.map(s => s.detectedState.name).join(', ')}`);
        }
        
        return recommendations;
    }

    async close() {
        for (let i = 0; i < this.browsers.length; i++) {
            if (this.browsers[i]) {
                await this.browsers[i].close();
                console.log(`üîí –ë—Ä–∞—É–∑–µ—Ä ${i + 1} –∑–∞–∫—Ä—ã—Ç`);
            }
        }
    }
}

module.exports = { IntelligentOCRBot }; 