const puppeteer = require('puppeteer');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

class OCRTestBot {
    constructor() {
        this.browser = null;
        this.page = null;
        this.tesseractPath = '"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"';
        this.screenshotDir = 'test_screenshots';
        this.stepCounter = 0;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.screenshotDir)) {
            fs.mkdirSync(this.screenshotDir);
        }
    }

    async init() {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR —Ç–µ—Å—Ç-–±–æ—Ç–∞...');
        
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--no-sandbox']
        });
        
        this.page = await this.browser.newPage();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }

    async takeScreenshot(name) {
        this.stepCounter++;
        const filename = `${this.screenshotDir}/step${this.stepCounter.toString().padStart(2, '0')}_${name}.png`;
        await this.page.screenshot({ path: filename, fullPage: true });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
        return filename;
    }

    async findTextCoordinates(imagePath, searchText) {
        return new Promise((resolve, reject) => {
            const command = `${this.tesseractPath} "${imagePath}" output -l rus+eng tsv`;
            
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ Tesseract:', error.message);
                    reject(error);
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                const outputFile = 'output.tsv';
                if (!fs.existsSync(outputFile)) {
                    reject(new Error('Output file not found'));
                    return;
                }

                const content = fs.readFileSync(outputFile, 'utf8');
                const lines = content.trim().split('\n');
                
                if (lines.length < 2) {
                    resolve([]);
                    return;
                }

                const headers = lines[0].split('\t');
                const found = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split('\t');
                    if (values.length >= headers.length) {
                        const text = values[headers.indexOf('text')];
                        const conf = parseFloat(values[headers.indexOf('conf')]);
                        const left = parseInt(values[headers.indexOf('left')]);
                        const top = parseInt(values[headers.indexOf('top')]);
                        const width = parseInt(values[headers.indexOf('width')]);
                        const height = parseInt(values[headers.indexOf('height')]);

                        if (text && text.toLowerCase().includes(searchText.toLowerCase()) && conf > 0) {
                            found.push({
                                text: text,
                                confidence: conf,
                                x: left,
                                y: top,
                                width: width,
                                height: height,
                                centerX: left + width / 2,
                                centerY: top + height / 2
                            });
                        }
                    }
                }

                resolve(found);
            });
        });
    }

    async clickOnText(searchText, description = '') {
        console.log(`üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç: "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(`search_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length === 0) {
            console.log(`‚ùå –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const target = coords[0];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: "${target.text}" (conf: ${target.confidence}%)`);
        console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${target.x}, y=${target.y}, —Ü–µ–Ω—Ç—Ä: (${target.centerX}, ${target.centerY})`);

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
        await this.page.mouse.click(target.centerX, target.centerY);
        console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${target.centerX}, ${target.centerY})`);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        return true;
    }

    async verifyTextExists(searchText, description = '') {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞: "${searchText}" ${description}`);
        
        const screenshotPath = await this.takeScreenshot(`verify_${searchText.replace(/\s+/g, '_')}`);
        const coords = await this.findTextCoordinates(screenshotPath, searchText);
        
        if (coords.length > 0) {
            console.log(`‚úÖ –¢–µ–∫—Å—Ç "${searchText}" –Ω–∞–π–¥–µ–Ω (${coords.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)`);
            return true;
        } else {
            console.log(`‚ùå –¢–µ–∫—Å—Ç "${searchText}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }
    }

    async runTest() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            await this.page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"
            console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
            const guestButtonExists = await this.verifyTextExists('–≥–æ—Å—Ç—å', '–Ω–∞ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
            
            if (!guestButtonExists) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return false;
            }
            
            // –®–∞–≥ 3: –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"
            console.log('\nüìã –®–∞–≥ 3: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–†–û–î–û–õ–ñ–ò–¢–¨ –ö–ê–ö –ì–û–°–¢–¨"');
            const guestClickSuccess = await this.clickOnText('–≥–æ—Å—Ç—å', '–¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
            
            if (!guestClickSuccess) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
                return false;
            }
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
            console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞');
            const loginSuccess = await this.verifyTextExists('–ø–æ—Å—Ç', '–≤ –ª–µ–Ω—Ç–µ –ø–æ—Å—Ç–æ–≤');
            
            if (!loginSuccess) {
                console.log('‚ùå –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return false;
            }
            
            console.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
            // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            console.log('\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
            const createPostButton = await this.verifyTextExists('–Ω–æ–≤–æ–≥–æ', '–≤ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
            
            if (createPostButton) {
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
                
                // –®–∞–≥ 6: –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                console.log('\nüìã –®–∞–≥ 6: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
                const createPostClick = await this.clickOnText('–Ω–æ–≤–æ–≥–æ', '–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
                
                if (createPostClick) {
                    console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞');
                    
                    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                    console.log('\nüìã –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
                    const formExists = await this.verifyTextExists('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–≤ —Ñ–æ—Ä–º–µ –ø–æ—Å—Ç–∞');
                    
                    if (formExists) {
                        console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                    } else {
                        console.log('‚ùå –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    }
                }
            }
            
            // –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –ª–µ–Ω—Ç–µ
            console.log('\nüìã –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤');
            const postsExist = await this.verifyTextExists('–ø–æ—Å—Ç', '–≤ –ª–µ–Ω—Ç–µ');
            
            if (postsExist) {
                console.log('‚úÖ –ü–æ—Å—Ç—ã –≤ –ª–µ–Ω—Ç–µ –Ω–∞–π–¥–µ–Ω—ã');
            } else {
                console.log('‚ùå –ü–æ—Å—Ç—ã –≤ –ª–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            console.log('\nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
            return false;
        }
    }

    async close() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
    const bot = new OCRTestBot();
    
    try {
        await bot.init();
        const success = await bot.runTest();
        
        if (success) {
            console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        await bot.close();
    }
}

main().catch(console.error); 