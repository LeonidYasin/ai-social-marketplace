const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

class IntelligentUIAnalyzer {
    constructor() {
        this.browsers = [];
        this.pages = [];
        this.userNames = [];
        this.screenshotsDir = 'test_screenshots/intelligent_final';
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if (!fs.existsSync(this.screenshotsDir)) {
            fs.mkdirSync(this.screenshotsDir, { recursive: true });
        }
    }

    async initialize() {
        console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ UI (–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        for (let i = 0; i < 2; i++) {
            const browser = await puppeteer.launch({
                headless: false,
                defaultViewport: { width: 1920, height: 1080 },
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu',
                    `--user-data-dir=./browser_profile_${i}`
                ]
            });
            
            const page = await browser.newPage();
            
            // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            page.on('console', msg => {
                console.log(`üì± –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: ${msg.text()}`);
            });
            
            this.browsers.push(browser);
            this.pages.push(page);
        }
        
        console.log('‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async analyzeState(page, stepName) {
        console.log(`\nüìã –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${stepName}`);
        
        const state = await page.evaluate(() => {
            const buttons = Array.from(document.querySelectorAll('button')).map(btn => ({
                text: btn.textContent?.trim() || '',
                ariaLabel: btn.getAttribute('aria-label') || '',
                className: btn.className || '',
                visible: btn.offsetParent !== null,
                disabled: btn.disabled,
                position: btn.getBoundingClientRect()
            }));
            
            const modals = document.querySelectorAll('[role="dialog"], .MuiModal-root, .modal, .popup');
            const profileElements = document.querySelectorAll('[data-testid*="profile"], [class*="profile"], [id*="profile"]');
            
            // –ü–æ–∏—Å–∫ –ø–∞–Ω–µ–ª–µ–π
            const topPanel = document.querySelector('header, .header, .top-panel, .app-bar');
            const rightPanel = document.querySelector('.sidebar-right, .right-panel, [data-testid="sidebar-right"]');
            const centerPanel = document.querySelector('main, .main, .center-panel, .content');
            
            // LocalStorage
            const localStorage = {};
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key) {
                    localStorage[key] = localStorage.getItem(key);
                }
            }
            
            return {
                url: window.location.href,
                title: document.title,
                buttons: buttons.slice(0, 20), // –ü–µ—Ä–≤—ã–µ 20 –∫–Ω–æ–ø–æ–∫
                modalsCount: modals.length,
                profileElementsCount: profileElements.length,
                topPanel: !!topPanel,
                rightPanel: !!rightPanel,
                centerPanel: !!centerPanel,
                localStorage: localStorage
            };
        });
        
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:
   - URL: ${state.url}
   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${state.title}
   - –ö–Ω–æ–ø–∫–∏: ${state.buttons.length}
   - –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞: ${state.modalsCount}
   - –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è: ${state.profileElementsCount}
   - –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: ${state.topPanel ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
   - –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: ${state.rightPanel ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
   - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å: ${state.centerPanel ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
   - LocalStorage –∫–ª—é—á–∏: ${Object.keys(state.localStorage).length}`);
        
        return state;
    }

    async extractUserNamesFromProfile(page, browserIndex) {
        console.log(`\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–ë—Ä–∞—É–∑–µ—Ä ${browserIndex + 1})`);
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É
        const profileButton = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(btn => {
                const text = btn.textContent?.trim() || '';
                return text.includes('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') || text.includes('(–í—ã)') || text.includes('–ì–æ—Å—Ç—å');
            });
        });
        
        if (!profileButton || await profileButton.evaluate(btn => !btn)) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        const profileText = await profileButton.evaluate(btn => btn.textContent?.trim() || '');
        console.log(`üìã –¢–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è: ${profileText.substring(0, 200)}...`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const userNames = this.extractUserNamesFromText(profileText);
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userNames.length}`);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–º–µ—á–µ–Ω–Ω–æ–≥–æ "(–í—ã)")
        const currentUser = userNames.find(name => name.includes('(–í—ã)'));
        if (currentUser) {
            const cleanName = currentUser.replace(' (–í—ã)', '').trim();
            console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${cleanName}`);
            this.userNames[browserIndex] = cleanName;
        }
        
        return userNames;
    }

    extractUserNamesFromText(text) {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const lines = text.split('\n').filter(line => line.trim());
        const userNames = [];
        
        for (const line of lines) {
            const trimmed = line.trim();
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (trimmed.includes('–ì–æ—Å—Ç—å') || 
                trimmed.includes('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') || 
                trimmed.includes('User') ||
                trimmed.includes('–¢–µ—Å—Ç') ||
                trimmed.includes('Admin') ||
                trimmed.includes('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä') ||
                trimmed.includes('–ü—Ä–µ–º–∏—É–º') ||
                trimmed.includes('–û–±—ã—á–Ω—ã–π') ||
                trimmed.includes('Security') ||
                trimmed.includes('(–í—ã)')) {
                userNames.push(trimmed);
            }
        }
        
        return userNames;
    }

    async checkUserVisibility(page, targetUserName, browserIndex) {
        console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${targetUserName}" –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${browserIndex + 1}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        const userNames = await this.extractUserNamesFromProfile(page, browserIndex);
        
        if (!userNames) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
        const isVisible = userNames.some(name => 
            name.includes(targetUserName) || 
            name.replace(' (–í—ã)', '').trim() === targetUserName
        );
        
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${targetUserName}" ${isVisible ? '–≤–∏–¥–µ–Ω' : '–Ω–µ –≤–∏–¥–µ–Ω'} –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${browserIndex + 1}`);
        return isVisible;
    }

    async takeScreenshot(page, filename) {
        const filepath = path.join(this.screenshotsDir, filename);
        await page.screenshot({ 
            path: filepath, 
            fullPage: true 
        });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
    }

    async runTest() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
            
            // –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–±–æ–∏—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
            console.log('\nüìã –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
            for (let i = 0; i < this.pages.length; i++) {
                await this.pages[i].goto('http://localhost:3000', { 
                    waitUntil: 'networkidle2',
                    timeout: 30000 
                });
                await this.takeScreenshot(this.pages[i], `step01_browser${i + 1}_initial.png`);
            }
            
            // –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤ –æ–±–æ–∏—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
            console.log('\nüìã –®–∞–≥ 2: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥');
            for (let i = 0; i < this.pages.length; i++) {
                console.log(`\nüîÑ –ë—Ä–∞—É–∑–µ—Ä ${i + 1}: –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥`);
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"
                const guestButton = await this.pages[i].evaluateHandle(() => {
                    const buttons = Array.from(document.querySelectorAll('button'));
                    return buttons.find(btn => {
                        const text = btn.textContent?.trim() || '';
                        return text.includes('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å') || text.includes('Continue as guest');
                    });
                });
                
                if (guestButton && await guestButton.evaluate(btn => !!btn)) {
                    await guestButton.click();
                    console.log(`‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${i + 1}`);
                    
                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    await this.takeScreenshot(this.pages[i], `step02_browser${i + 1}_after_guest.png`);
                } else {
                    console.log(`‚ùå –ö–Ω–æ–ø–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ ${i + 1}`);
                }
            }
            
            // –®–∞–≥ 3: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('\nüìã –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            for (let i = 0; i < this.pages.length; i++) {
                await this.extractUserNamesFromProfile(this.pages[i], i);
                await this.takeScreenshot(this.pages[i], `step03_browser${i + 1}_profile.png`);
            }
            
            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
            console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            if (this.userNames[0] && this.userNames[1]) {
                console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${this.userNames[0]}" –≤–∏–¥–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ 2`);
                const user1VisibleInBrowser2 = await this.checkUserVisibility(this.pages[1], this.userNames[0], 1);
                
                console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${this.userNames[1]}" –≤–∏–¥–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ 1`);
                const user2VisibleInBrowser1 = await this.checkUserVisibility(this.pages[0], this.userNames[1], 0);
                
                // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 (${this.userNames[0]}) –≤–∏–¥–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ 2: ${user1VisibleInBrowser2 ? '–î–ê' : '–ù–ï–¢'}`);
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 (${this.userNames[1]}) –≤–∏–¥–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ 1: ${user2VisibleInBrowser1 ? '–î–ê' : '–ù–ï–¢'}`);
                
                const success = user1VisibleInBrowser2 && user2VisibleInBrowser1;
                console.log(`\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' : '–¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù'}`);
                
                return success;
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
            return false;
        }
    }

    async cleanup() {
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        for (const browser of this.browsers) {
            await browser.close();
        }
        console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

async function main() {
    const analyzer = new IntelligentUIAnalyzer();
    
    try {
        await analyzer.initialize();
        const result = await analyzer.runTest();
        
        if (result) {
            console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        } else {
            console.log('\nüí• –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await analyzer.cleanup();
    }
}

if (require.main === module) {
    main();
}

module.exports = IntelligentUIAnalyzer; 