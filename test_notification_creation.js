async function testNotificationCreation() {
  console.log('=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      username: `notif_test_${Date.now()}`,
      email: `notif_test${Date.now()}@example.com`,
      password: 'testpass123',
      first_name: 'Notification',
      last_name: 'Test'
    };
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const registerResponse = await fetch('http://localhost:8000/api/users/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testUser)
    });
    
    if (!registerResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.status}`);
    }
    
    const userData = await registerResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', userData.username);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694" (ID: 109)
    console.log('\n1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694"...');
    const messageResponse = await fetch('http://localhost:8000/api/messages/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${userData.token}`
      },
      body: JSON.stringify({
        receiverId: 109,
        content: 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è!'
      })
    });
    
    if (!messageResponse.ok) {
      const errorText = await messageResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageResponse.status} - ${errorText}`);
    }
    
    const messageData = await messageResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageData);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    setTimeout(async () => {
      try {
        const notificationsResponse = await fetch('http://localhost:8000/api/notifications', {
          headers: {
            'Authorization': `Bearer ${userData.token}`
          }
        });
        
        if (notificationsResponse.ok) {
          const notifications = await notificationsResponse.json();
          console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', notifications);
          
          if (notifications.notifications && notifications.notifications.length > 0) {
            console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            notifications.notifications.forEach((notif, index) => {
              console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
            });
          } else {
            console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
        } else {
          const errorText = await notificationsResponse.text();
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', errorText);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ì–æ—Å—Ç—å 4694)
        console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è...');
        try {
          // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∫–∞–∫ –ì–æ—Å—Ç—å 4694
          const guestLoginResponse = await fetch('http://localhost:8000/api/users/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              username: 'guest_469492e4_4g6cde',
              password: 'guest_password'
            })
          });
          
          if (guestLoginResponse.ok) {
            const guestData = await guestLoginResponse.json();
            console.log('‚úÖ –í—Ö–æ–¥ –ø–æ–¥ –ì–æ—Å—Ç—å 4694 –≤—ã–ø–æ–ª–Ω–µ–Ω');
            
            const guestNotificationsResponse = await fetch('http://localhost:8000/api/notifications', {
              headers: {
                'Authorization': `Bearer ${guestData.token}`
              }
            });
            
            if (guestNotificationsResponse.ok) {
              const guestNotifications = await guestNotificationsResponse.json();
              console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ì–æ—Å—Ç—å 4694:', guestNotifications);
              
              if (guestNotifications.notifications && guestNotifications.notifications.length > 0) {
                console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã!');
                guestNotifications.notifications.forEach((notif, index) => {
                  console.log(`  ${index + 1}. ${notif.title}: ${notif.message}`);
                });
              } else {
                console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
              }
            } else {
              const errorText = await guestNotificationsResponse.text();
              console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', errorText);
            }
          } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–¥ –ì–æ—Å—Ç—å 4694');
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è:', error.message);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      }
      
      process.exit(0);
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

testNotificationCreation(); 