/**
 * –¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * -------------------------
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
 * 
 * –í–ê–ñ–ù–û:
 * - –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å (–±–µ–∑ WebSocket)
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
 * - –õ–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */

const fetch = require('node-fetch');

async function testNotificationChain() {
  console.log('=== –¢–ï–°–¢ –¶–ï–ü–û–ß–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  
  const baseUrl = 'https://social-marketplace-api.onrender.com';
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = {
      username: `chain_test_${Date.now()}`,
      email: `chain_test${Date.now()}@example.com`,
      password: 'testpass123',
      first_name: 'Chain',
      last_name: 'Test'
    };
    
    const registerResponse = await fetch(`${baseUrl}/api/users/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testUser)
    });
    
    if (!registerResponse.ok) {
      const errorText = await registerResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResponse.status} - ${errorText}`);
    }
    
    const userData = await registerResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userData.username, 'ID:', userData.id);
    
    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694" (ID: 109)
    console.log('\n2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ì–æ—Å—Ç—å 4694"...');
    const messageResponse = await fetch(`${baseUrl}/api/messages/send`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${userData.token}`
      },
      body: JSON.stringify({
        receiverId: 109,
        content: 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ø–æ—á–∫–∏!'
      })
    });
    
    if (!messageResponse.ok) {
      const errorText = await messageResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageResponse.status} - ${errorText}`);
    }
    
    const messageData = await messageResponse.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', messageData);
    
    // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–ª–æ—Å—å
    console.log('\n3. –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ì–æ—Å—Ç—å 4694" (—á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω)
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ì–æ—Å—Ç—å 4694"...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ "–ì–æ—Å—Ç—å 4694"
    const loginResponse = await fetch(`${baseUrl}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        username: 'guest_4694',
        password: 'guest123'
      })
    });
    
    if (!loginResponse.ok) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ "–ì–æ—Å—Ç—å 4694", –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      const senderNotificationsResponse = await fetch(`${baseUrl}/api/notifications`, {
        headers: {
          'Authorization': `Bearer ${userData.token}`
        }
      });
      
      if (senderNotificationsResponse.ok) {
        const senderNotifications = await senderNotificationsResponse.json();
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', senderNotifications);
        
        if (senderNotifications.notifications && senderNotifications.notifications.length > 0) {
          console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è!');
          console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', senderNotifications.notifications.length);
          console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', senderNotifications.notifications[0]);
        } else {
          console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
        }
      } else {
        const errorText = await senderNotificationsResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', senderNotificationsResponse.status, errorText);
      }
    } else {
      const guestData = await loginResponse.json();
      console.log('‚úÖ –í—Ö–æ–¥ –∫–∞–∫ "–ì–æ—Å—Ç—å 4694" –≤—ã–ø–æ–ª–Ω–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–ì–æ—Å—Ç—è 4694"
      const guestNotificationsResponse = await fetch(`${baseUrl}/api/notifications`, {
        headers: {
          'Authorization': `Bearer ${guestData.token}`
        }
      });
      
      if (guestNotificationsResponse.ok) {
        const guestNotifications = await guestNotificationsResponse.json();
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–ì–æ—Å—Ç—è 4694":', guestNotifications);
        
        if (guestNotifications.notifications && guestNotifications.notifications.length > 0) {
          console.log('üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è!');
          console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', guestNotifications.notifications.length);
          console.log('–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', guestNotifications.notifications[0]);
        } else {
          console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É "–ì–æ—Å—Ç—è 4694"');
        }
      } else {
        const errorText = await guestNotificationsResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "–ì–æ—Å—Ç—è 4694":', guestNotificationsResponse.status, errorText);
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    const unreadResponse = await fetch(`${baseUrl}/api/notifications/unread`, {
      headers: {
        'Authorization': `Bearer ${userData.token}`
      }
    });
    
    if (unreadResponse.ok) {
      const unreadData = await unreadResponse.json();
      console.log('‚úÖ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', unreadData);
    } else {
      const errorText = await unreadResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', unreadResponse.status, errorText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testNotificationChain(); 