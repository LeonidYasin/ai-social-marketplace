#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
 */

const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:');
const requiredDirs = ['backend', 'frontend', 'logs'];
const requiredFiles = ['package.json', 'backend/package.json', 'frontend/package.json'];

for (const dir of requiredDirs) {
  if (fs.existsSync(dir)) {
    console.log(`‚úÖ ${dir}/`);
  } else {
    console.log(`‚ùå ${dir}/ - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
}

for (const file of requiredFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:');
const logsDir = path.join(__dirname, 'logs');
if (fs.existsSync(logsDir)) {
  const logFiles = fs.readdirSync(logsDir).filter(f => f.endsWith('.json'));
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${logFiles.length} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –Ω–∞ –æ—à–∏–±–∫–∏
  if (logFiles.length > 0) {
    const latestLog = logFiles
      .map(f => ({ file: f, mtime: fs.statSync(path.join(logsDir, f)).mtime }))
      .sort((a, b) => b.mtime - a.mtime)[0];
    
    try {
      const logPath = path.join(logsDir, latestLog.file);
      const logContent = fs.readFileSync(logPath, 'utf8');
      const logData = JSON.parse(logContent);
      
      if (logData.logs) {
        const errors = logData.logs.filter(log => 
          log.level?.toLowerCase() === 'error' || 
          log.message?.toLowerCase().includes('error')
        );
        
        if (errors.length > 0) {
          console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ª–æ–≥–µ`);
          errors.slice(0, 3).forEach(error => {
            console.log(`   - ${error.message}`);
          });
        } else {
          console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: ${error.message}`);
    }
  }
} else {
  console.log('‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º backend/config.env
const configPath = path.join(__dirname, 'backend', 'config.env');
if (fs.existsSync(configPath)) {
  console.log('‚úÖ backend/config.env –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå backend/config.env –ù–ï –ù–ê–ô–î–ï–ù');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json —Ñ–∞–π–ª—ã
const packageFiles = ['package.json', 'backend/package.json', 'frontend/package.json'];
for (const pkgFile of packageFiles) {
  if (fs.existsSync(pkgFile)) {
    try {
      const pkgData = JSON.parse(fs.readFileSync(pkgFile, 'utf8'));
      if (pkgData.dependencies) {
        console.log(`‚úÖ ${pkgFile} - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã`);
      } else {
        console.log(`‚ö†Ô∏è ${pkgFile} - –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`);
      }
    } catch (error) {
      console.log(`‚ùå ${pkgFile} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`);
    }
  } else {
    console.log(`‚ùå ${pkgFile} - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
const appFiles = [
  'backend/src/app.js',
  'backend/src/utils/db.js',
  'backend/src/utils/logger.js',
  'frontend/src/App.jsx'
];

for (const appFile of appFiles) {
  if (fs.existsSync(appFile)) {
    console.log(`‚úÖ ${appFile}`);
  } else {
    console.log(`‚ùå ${appFile} - –ù–ï –ù–ê–ô–î–ï–ù`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml
console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è:');
const renderYaml = 'render.yaml';
if (fs.existsSync(renderYaml)) {
  console.log('‚úÖ render.yaml –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå render.yaml –ù–ï –ù–ê–ô–î–ï–ù');
}

console.log('\n' + '='.repeat(50));
console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
console.log('='.repeat(50)); 