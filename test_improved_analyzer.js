const puppeteer = require('puppeteer');
const ImprovedStateAnalyzer = require('./improved_state_analyzer');

class TestImprovedAnalyzer {
    constructor() {
        this.browser = null;
        this.page = null;
        this.analyzer = new ImprovedStateAnalyzer();
        this.baseUrl = 'http://localhost:3000';
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: { width: 1920, height: 1080 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        this.page = await this.browser.newPage();
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async pause(ms = 2000) {
        await new Promise(resolve => setTimeout(resolve, ms));
    }

    async testInitialState() {
        console.log('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        
        await this.page.goto(this.baseUrl);
        await this.pause(3000);
        
        const state = await this.analyzer.analyzeState(this.page);
        console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if (state.name === '–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' && state.confidence > 0.8) {
            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        }
        
        return state;
    }

    async testGuestMode() {
        console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞...');
        
        // –ö–ª–∏–∫–∞–µ–º "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"
        const guestButton = await this.analyzer.findElementByText(this.page, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å');
        if (guestButton) {
            await guestButton.element.click();
            await this.pause(3000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
            
            if (state.name === '–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º' && state.confidence > 0.7) {
                console.log('‚úÖ –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞');
            }
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testCreatePost() {
        console.log('\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
        const addButton = await this.analyzer.findElementByTestId(this.page, 'AddIcon');
        if (addButton) {
            await addButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
            
            if (state.name === '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞' && state.confidence > 0.8) {
                console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
            }
            
            // –û—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            const cancelButton = await this.analyzer.findElementByText(this.page, '–û—Ç–º–µ–Ω–∞');
            if (cancelButton) {
                await cancelButton.element.click();
                await this.pause(2000);
            }
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testMenuNavigation() {
        console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        const menuButton = await this.analyzer.findElementByTestId(this.page, 'MenuIcon');
        if (menuButton) {
            await menuButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            await menuButton.element.click();
            await this.pause(1000);
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async testSearchFunctionality() {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        const searchButton = await this.analyzer.findElementByTestId(this.page, 'SearchIcon');
        if (searchButton) {
            await searchButton.element.click();
            await this.pause(2000);
            
            const state = await this.analyzer.analyzeState(this.page);
            console.log('üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
            
            return state;
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }
    }

    async getDetailedPageInfo() {
        console.log('\nüìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
        
        const info = await this.analyzer.getPageInfo(this.page);
        console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', JSON.stringify(info, null, 2));
        
        return info;
    }

    async runAllTests() {
        try {
            console.log('üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');
            
            await this.init();
            
            // –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const initialState = await this.testInitialState();
            
            // –¢–µ—Å—Ç 2: –ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
            const guestState = await this.testGuestMode();
            
            // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            const createPostState = await this.testCreatePost();
            
            // –¢–µ—Å—Ç 4: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
            const menuState = await this.testMenuNavigation();
            
            // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫
            const searchState = await this.testSearchFunctionality();
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            const pageInfo = await this.getDetailedPageInfo();
            
            // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
            console.log('=' * 50);
            console.log(`–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialState?.name} (${initialState?.confidence * 100}%)`);
            console.log(`–ì–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º: ${guestState?.name} (${guestState?.confidence * 100}%)`);
            console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: ${createPostState?.name} (${createPostState?.confidence * 100}%)`);
            console.log(`–ú–µ–Ω—é: ${menuState?.name} (${menuState?.confidence * 100}%)`);
            console.log(`–ü–æ–∏—Å–∫: ${searchState?.name} (${searchState?.confidence * 100}%)`);
            
            const successCount = [initialState, guestState, createPostState, menuState, searchState]
                .filter(state => state && state.confidence > 0.7).length;
            
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/5`);
            
            if (successCount >= 4) {
                console.log('üéâ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!');
            } else if (successCount >= 3) {
                console.log('üëç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
            } else {
                console.log('‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    const tester = new TestImprovedAnalyzer();
    tester.runAllTests();
}

module.exports = TestImprovedAnalyzer; 