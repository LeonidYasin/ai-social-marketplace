#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å Render.com
 * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ Render –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RENDER_API_URL = 'https://social-marketplace-api.onrender.com';
const RENDER_FRONTEND_URL = 'https://social-marketplace-frontend.onrender.com';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  gray: '\x1b[90m'
};

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'User-Agent': 'Render-Logs-Collector/1.0',
        'Accept': 'application/json',
        ...options.headers
      },
      timeout: options.timeout || 10000
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: jsonData
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: { raw: data }
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function getAppLogs(type = 'all', params = {}) {
  try {
    console.log(colorize(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${type}`, 'cyan'));
    
    const queryParams = new URLSearchParams(params).toString();
    const url = `${RENDER_API_URL}/api/logs/${type}${queryParams ? '?' + queryParams : ''}`;
    
    console.log(colorize(`üì° –ó–∞–ø—Ä–æ—Å: ${url}`, 'gray'));
    
    const response = await makeRequest(url, { timeout: 15000 });
    
    if (response.status !== 200) {
      throw new Error(`HTTP ${response.status}: ${response.data.message || 'Unknown error'}`);
    }
    
    return response.data;
    
  } catch (error) {
    console.error(colorize(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`, 'red'));
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
async function checkServiceHealth() {
  console.log(colorize('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...', 'cyan'));
  
  const services = [
    { name: 'Backend API', url: `${RENDER_API_URL}/api/health` },
    { name: 'Frontend', url: RENDER_FRONTEND_URL }
  ];
  
  for (const service of services) {
    try {
      const response = await makeRequest(service.url, { timeout: 5000 });
      const status = response.status === 200 ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`${status} ${service.name}: HTTP ${response.status}`);
    } catch (error) {
      console.log(colorize(`‚ùå ${service.name}: ${error.message}`, 'red'));
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function getSystemInfo() {
  console.log(colorize('\nüíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', 'cyan'));
  
  try {
    const response = await makeRequest(`${RENDER_API_URL}/api/health`, { timeout: 5000 });
    if (response.status === 200 && response.data) {
      console.log(`Backend Version: ${response.data.version || 'Unknown'}`);
      console.log(`Environment: ${response.data.environment || 'Unknown'}`);
      console.log(`Database: ${response.data.database || 'Unknown'}`);
    }
  } catch (error) {
    console.log(colorize(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${error.message}`, 'red'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
function saveLogsToFile(logsData, type, params = {}) {
  if (!logsData || !logsData.success) {
    console.log(colorize('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'red'));
    return;
  }
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const paramsStr = Object.keys(params).length > 0 ? `-${Object.keys(params).join('-')}` : '';
  const filename = `render-logs-${type}${paramsStr}-${timestamp}.json`;
  const filepath = path.join('logs', filename);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync('logs')) {
    fs.mkdirSync('logs');
  }
  
  try {
    fs.writeFileSync(filepath, JSON.stringify(logsData, null, 2));
    console.log(colorize(`üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filepath}`, 'green'));
  } catch (error) {
    console.error(colorize(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'red'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
function displayLogs(logsData, type) {
  if (!logsData || !logsData.success) {
    console.log(colorize(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: ${logsData?.message || 'Unknown error'}`, 'red'));
    return;
  }
  
  if (type === 'stats') {
    displayStats(logsData.stats);
    return;
  }
  
  const logs = logsData.logs || [];
  const count = logsData.count || 0;
  
  console.log(colorize(`\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}`, 'green'));
  
  if (logs.length === 0) {
    console.log(colorize('üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'yellow'));
    return;
  }
  
  console.log(colorize('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:', 'cyan'));
  console.log('='.repeat(80));
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
  const recentLogs = logs.slice(-10);
  
  recentLogs.forEach((log, index) => {
    const timestamp = new Date(log.timestamp).toLocaleString('ru-RU');
    const level = log.level?.toUpperCase() || 'INFO';
    const source = log.source || 'unknown';
    const message = log.message || 'No message';
    
    // –¶–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let levelColor = 'white';
    switch (level.toLowerCase()) {
      case 'error': levelColor = 'red'; break;
      case 'warning': levelColor = 'yellow'; break;
      case 'info': levelColor = 'blue'; break;
      case 'debug': levelColor = 'magenta'; break;
    }
    
    console.log(colorize(`[${timestamp}] [${level}] [${source}] ${message}`, levelColor));
    
    // –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (log.data && Object.keys(log.data).length > 0) {
      console.log(colorize(`  üìÑ Data: ${JSON.stringify(log.data, null, 2)}`, 'gray'));
    }
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    if (index < recentLogs.length - 1) {
      console.log('-'.repeat(40));
    }
  });
  
  console.log('='.repeat(80));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats(stats) {
  console.log(colorize('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:', 'cyan'));
  console.log('='.repeat(50));
  
  console.log(colorize('üîß Backend:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ: ${stats.backend.total}`);
  console.log(`  –û—à–∏–±–∫–∏: ${colorize(stats.backend.errors, 'red')}`);
  console.log(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${colorize(stats.backend.warnings, 'yellow')}`);
  console.log(`  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${colorize(stats.backend.info, 'green')}`);
  
  console.log(colorize('\nüé® Frontend:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ: ${stats.frontend.total}`);
  console.log(`  –û—à–∏–±–∫–∏: ${colorize(stats.frontend.errors, 'red')}`);
  console.log(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${colorize(stats.frontend.warnings, 'yellow')}`);
  console.log(`  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${colorize(stats.frontend.info, 'green')}`);
  
  console.log(colorize('\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'blue'));
  console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${colorize(stats.total, 'cyan')}`);
  
  console.log('='.repeat(50));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(colorize('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –ª–æ–≥–æ–≤ —Å Render.com', 'green'));
  console.log(colorize(`üìç Backend API: ${RENDER_API_URL}`, 'gray'));
  console.log(colorize(`üìç Frontend: ${RENDER_FRONTEND_URL}`, 'gray'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
  await checkServiceHealth();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  await getSystemInfo();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(colorize('\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤...', 'cyan'));
  const statsData = await getAppLogs('stats');
  if (statsData) {
    displayStats(statsData.stats);
    saveLogsToFile(statsData, 'stats');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
  console.log(colorize('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤...', 'cyan'));
  const allLogsData = await getAppLogs('all', { limit: 100 });
  if (allLogsData) {
    displayLogs(allLogsData, 'all');
    saveLogsToFile(allLogsData, 'all');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ backend
  console.log(colorize('\nüîß –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ backend...', 'cyan'));
  const backendLogsData = await getAppLogs('backend', { limit: 50 });
  if (backendLogsData) {
    displayLogs(backendLogsData, 'backend');
    saveLogsToFile(backendLogsData, 'backend');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ frontend
  console.log(colorize('\nüé® –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ frontend...', 'cyan'));
  const frontendLogsData = await getAppLogs('frontend', { limit: 50 });
  if (frontendLogsData) {
    displayLogs(frontendLogsData, 'frontend');
    saveLogsToFile(frontendLogsData, 'frontend');
  }
  
  console.log(colorize('\n‚úÖ –°–±–æ—Ä –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'green'));
  console.log(colorize('üìÅ –í—Å–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É logs/', 'cyan'));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error(colorize('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', 'red'));
  console.error(reason);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(error => {
    console.error(colorize(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red'));
    process.exit(1);
  });
}

module.exports = {
  getAppLogs,
  checkServiceHealth,
  getSystemInfo,
  saveLogsToFile
}; 