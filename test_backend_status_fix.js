const fetch = require('node-fetch');

async function testBackendStatus() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
    const healthResponse = await fetch('http://localhost:8000/api/health', {
      timeout: 5000
    });
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç:', healthData.status);
    } else {
      console.log('‚ùå Health endpoint –æ—à–∏–±–∫–∞:', healthResponse.status);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º admin health endpoint
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ admin health endpoint...');
    const adminHealthResponse = await fetch('http://localhost:8000/api/admin/health', {
      timeout: 5000
    });
    
    if (adminHealthResponse.ok) {
      const adminHealthData = await adminHealthResponse.json();
      console.log('‚úÖ Admin health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç:', adminHealthData.status);
    } else {
      console.log('‚ùå Admin health endpoint –æ—à–∏–±–∫–∞:', adminHealthResponse.status);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend...');
    const frontendResponse = await fetch('http://localhost:3000', {
      timeout: 5000
    });
    
    if (frontendResponse.ok) {
      console.log('‚úÖ Frontend –æ—Ç–≤–µ—á–∞–µ—Ç:', frontendResponse.status);
    } else {
      console.log('‚ùå Frontend –æ—à–∏–±–∫–∞:', frontendResponse.status);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∞–º–ø–æ—á–∫—É —Å—Ç–∞—Ç—É—Å–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–µ–ª–µ–Ω–æ–π');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–µ–Ω—Ç—É —Å–æ–±—ã—Ç–∏–π - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"');
    console.log('4. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã (start-all.ps1)');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç—ã 8000 –∏ 3000');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏');
  }
}

testBackendStatus(); 