// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –¥–ª—è Node.js 18+ –∏–ª–∏ node-fetch –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
let fetch;
try {
  fetch = require('node-fetch');
} catch (error) {
  // –í Node.js 18+ fetch –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
  fetch = global.fetch;
}
const fs = require('fs');
const path = require('path');

const API_BASE = 'http://localhost:8000/api';
const LOG_DIR = './test_logs';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

class SecurityTester {
  constructor() {
    this.logs = [];
    this.vulnerabilities = [];
    this.testResults = {
      passed: 0,
      failed: 0,
      warnings: 0
    };
  }

  log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] [${type}] ${message}`;
    console.log(logEntry);
    this.logs.push(logEntry);
  }

  error(message) {
    this.log(message, 'ERROR');
    this.testResults.failed++;
  }

  success(message) {
    this.log(message, 'SUCCESS');
    this.testResults.passed++;
  }

  warning(message) {
    this.log(message, 'WARNING');
    this.testResults.warnings++;
  }

  addVulnerability(type, description, severity, details = {}) {
    this.vulnerabilities.push({
      type,
      description,
      severity,
      details,
      timestamp: new Date().toISOString()
    });
  }

  saveLogs(filename) {
    const filepath = path.join(LOG_DIR, filename);
    fs.writeFileSync(filepath, this.logs.join('\n'));
  }

  saveVulnerabilities(filename) {
    const filepath = path.join(LOG_DIR, filename);
    fs.writeFileSync(filepath, JSON.stringify(this.vulnerabilities, null, 2));
  }

  // –ë–∞–∑–æ–≤—ã–π HTTP –∑–∞–ø—Ä–æ—Å
  async makeRequest(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });

      const data = await response.json().catch(() => ({}));
      
      return {
        ok: response.ok,
        status: response.status,
        data,
        headers: response.headers
      };
    } catch (error) {
      return { ok: false, error: error.message };
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async testAuthentication() {
    this.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    // –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    this.log('  –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
    const protectedEndpoints = [
      '/users',
      '/posts',
      '/messages',
      '/auth/me'
    ];

    for (const endpoint of protectedEndpoints) {
      const result = await this.makeRequest(`${API_BASE}${endpoint}`);
      
      if (result.status === 401) {
        this.success(`‚úÖ ${endpoint} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`);
      } else {
        this.error(`‚ùå ${endpoint} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å: ${result.status})`);
        this.addVulnerability('Authentication', `${endpoint} –Ω–µ –∑–∞—â–∏—â–µ–Ω`, 'HIGH');
      }
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.log('  –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    const invalidCredentials = [
      { username: 'nonexistent@test.com', password: 'wrongpassword' },
      { username: '', password: 'password123' },
      { username: 'test@test.com', password: '' },
      { username: 'test@test.com', password: 'short' },
      { username: 'a'.repeat(1000), password: 'password123' }
    ];

    for (const creds of invalidCredentials) {
      const result = await this.makeRequest(`${API_BASE}/users/login`, {
        method: 'POST',
        body: JSON.stringify(creds)
      });

      if (result.status === 401 || result.status === 400) {
        this.success(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${creds.username}`);
      } else {
        this.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã: ${creds.username} (—Å—Ç–∞—Ç—É—Å: ${result.status})`);
        this.addVulnerability('Authentication', '–ü—Ä–∏–Ω—è—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞', 'HIGH');
      }
    }

    // –¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.log('  –¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    const invalidRegistrations = [
      { username: '', email: 'test@test.com', password: 'password123' },
      { username: 'test', email: 'invalid-email', password: 'password123' },
      { username: 'test', email: 'test@test.com', password: '123' },
      { username: 'a'.repeat(1000), email: 'test@test.com', password: 'password123' }
    ];

    for (const reg of invalidRegistrations) {
      const result = await this.makeRequest(`${API_BASE}/users/register`, {
        method: 'POST',
        body: JSON.stringify(reg)
      });

      if (result.status === 400) {
        this.success(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${reg.username}`);
      } else {
        this.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞: ${reg.username} (—Å—Ç–∞—Ç—É—Å: ${result.status})`);
        this.addVulnerability('Input Validation', '–ü—Ä–∏–Ω—è—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'MEDIUM');
      }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async testAuthorization() {
    this.log('üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const user1 = {
      username: 'security_user1',
      email: 'security1@test.com',
      password: 'password123',
      first_name: 'Security',
      last_name: 'User 1'
    };

    const user2 = {
      username: 'security_user2',
      email: 'security2@test.com',
      password: 'password123',
      first_name: 'Security',
      last_name: 'User 2'
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const token1 = await this.registerAndLogin(user1);
    const token2 = await this.registerAndLogin(user2);

    if (!token1 || !token2) {
      this.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const post = await this.createPost(token1, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    if (!post) {
      this.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç');
      return;
    }

    // –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç
    this.log('  –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç');
    const updateResult = await this.makeRequest(`${API_BASE}/posts/${post.id}`, {
      method: 'PUT',
      headers: { 'Authorization': `Bearer ${token2}` },
      body: JSON.stringify({ content: '–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –ø–æ—Å—Ç' })
    });

    if (updateResult.status === 403 || updateResult.status === 401) {
      this.success(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø–æ—Å—Ç–∞`);
    } else {
      this.error(`‚ùå –£–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç (—Å—Ç–∞—Ç—É—Å: ${updateResult.status})`);
      this.addVulnerability('Authorization', '–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–∏–µ –ø–æ—Å—Ç—ã', 'HIGH');
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç
    this.log('  –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç');
    const deleteResult = await this.makeRequest(`${API_BASE}/posts/${post.id}`, {
      method: 'DELETE',
      headers: { 'Authorization': `Bearer ${token2}` }
    });

    if (deleteResult.status === 403 || deleteResult.status === 401) {
      this.success(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –ø–æ—Å—Ç–∞`);
    } else {
      this.error(`‚ùå –£–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø–æ—Å—Ç (—Å—Ç–∞—Ç—É—Å: ${deleteResult.status})`);
      this.addVulnerability('Authorization', '–ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ –ø–æ—Å—Ç—ã', 'HIGH');
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.log('  –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    const messagesResult = await this.makeRequest(`${API_BASE}/messages`, {
      headers: { 'Authorization': `Bearer ${token2}` }
    });

    if (messagesResult.ok) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.success(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∞–Ω–Ω—ã—Ö)`);
    } else {
      this.warning(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: ${messagesResult.status})`);
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
  async testInputValidation() {
    this.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞...');

    // –¢–µ—Å—Ç 1: SQL Injection
    this.log('  –¢–µ—Å—Ç 1: SQL Injection');
    const sqlInjectionPayloads = [
      "'; DROP TABLE users; --",
      "' OR '1'='1",
      "' UNION SELECT * FROM users --",
      "'; INSERT INTO users VALUES (1, 'hacker', 'hacker@test.com'); --"
    ];

    for (const payload of sqlInjectionPayloads) {
      const result = await this.makeRequest(`${API_BASE}/users/login`, {
        method: 'POST',
        body: JSON.stringify({
          username: payload,
          password: payload
        })
      });

      if (result.status === 500) {
        this.error(`‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è SQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç—å —Å payload: ${payload}`);
        this.addVulnerability('SQL Injection', `–í–æ–∑–º–æ–∂–Ω–∞—è SQL Injection: ${payload}`, 'CRITICAL');
      } else {
        this.success(`‚úÖ SQL Injection payload –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${payload}`);
      }
    }

    // –¢–µ—Å—Ç 2: XSS
    this.log('  –¢–µ—Å—Ç 2: XSS');
    const xssPayloads = [
      '<script>alert("XSS")</script>',
      'javascript:alert("XSS")',
      '<img src="x" onerror="alert(\'XSS\')">',
      '"><script>alert("XSS")</script>'
    ];

    for (const payload of xssPayloads) {
      const result = await this.makeRequest(`${API_BASE}/posts`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${this.getTestToken()}` },
        body: JSON.stringify({
          content: payload,
          privacy: 'public'
        })
      });

      if (result.ok) {
        this.warning(`‚ö†Ô∏è XSS payload –ø—Ä–∏–Ω—è—Ç: ${payload}`);
        this.addVulnerability('XSS', `XSS payload –ø—Ä–∏–Ω—è—Ç: ${payload}`, 'MEDIUM');
      } else {
        this.success(`‚úÖ XSS payload –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${payload}`);
      }
    }

    // –¢–µ—Å—Ç 3: NoSQL Injection
    this.log('  –¢–µ—Å—Ç 3: NoSQL Injection');
    const nosqlPayloads = [
      { '$ne': '' },
      { '$gt': '' },
      { '$where': '1==1' }
    ];

    for (const payload of nosqlPayloads) {
      const result = await this.makeRequest(`${API_BASE}/users/login`, {
        method: 'POST',
        body: JSON.stringify({
          username: payload,
          password: payload
        })
      });

      if (result.status === 500) {
        this.error(`‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è NoSQL Injection —É—è–∑–≤–∏–º–æ—Å—Ç—å`);
        this.addVulnerability('NoSQL Injection', '–í–æ–∑–º–æ–∂–Ω–∞—è NoSQL Injection', 'CRITICAL');
      } else {
        this.success(`‚úÖ NoSQL Injection payload –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
      }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS
  async testCORS() {
    this.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS...');

    const testOrigins = [
      'http://malicious-site.com',
      'https://evil.com',
      'http://localhost:3001',
      'null'
    ];

    for (const origin of testOrigins) {
      const result = await this.makeRequest(`${API_BASE}/posts`, {
        method: 'OPTIONS',
        headers: {
          'Origin': origin,
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Content-Type'
        }
      });

      const corsHeader = result.headers.get('access-control-allow-origin');
      
      if (corsHeader === '*' || corsHeader === origin) {
        this.error(`‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è origin: ${origin}`);
        this.addVulnerability('CORS', `–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞: ${origin}`, 'MEDIUM');
      } else {
        this.success(`‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è origin: ${origin}`);
      }
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting
  async testRateLimiting() {
    this.log('‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...');

    const requests = [];
    const numRequests = 100;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
    for (let i = 0; i < numRequests; i++) {
      requests.push(
        this.makeRequest(`${API_BASE}/posts`)
      );
    }

    const results = await Promise.all(requests);
    const rateLimited = results.filter(r => r.status === 429).length;
    const successful = results.filter(r => r.ok).length;

    if (rateLimited > 0) {
      this.success(`‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç: ${rateLimited} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ`);
    } else {
      this.warning(`‚ö†Ô∏è Rate limiting –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${successful}/${numRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–æ`);
      this.addVulnerability('Rate Limiting', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç rate limiting', 'MEDIUM');
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS
  async testHTTPS() {
    this.log('üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API –ø–æ HTTP
    const httpResult = await this.makeRequest(`http://localhost:8000/api/health`);
    
    if (httpResult.ok) {
      this.warning(`‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)`);
      this.addVulnerability('HTTPS', 'API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP', 'MEDIUM');
    } else {
      this.success(`‚úÖ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP`);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async registerAndLogin(userData) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
    let result = await this.makeRequest(`${API_BASE}/users/login`, {
      method: 'POST',
      body: JSON.stringify({
        username: userData.email,
        password: userData.password
      })
    });

    if (result.ok) {
      return result.data.token;
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
    result = await this.makeRequest(`${API_BASE}/users/register`, {
      method: 'POST',
      body: JSON.stringify(userData)
    });

    if (result.ok) {
      return result.data.token;
    }

    return null;
  }

  async createPost(token, content) {
    const result = await this.makeRequest(`${API_BASE}/posts`, {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: JSON.stringify({
        content,
        privacy: 'public'
      })
    });

    return result.ok ? result.data : null;
  }

  getTestToken() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    return 'test-token';
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  async runSecurityTests() {
    this.log('üõ°Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n');

    try {
      // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      this.log('=== –≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');
      await this.testAuthentication();

      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      this.log('\n=== –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
      await this.testAuthorization();

      // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
      this.log('\n=== –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –í–í–û–î–ê ===');
      await this.testInputValidation();

      // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS
      this.log('\n=== –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CORS ===');
      await this.testCORS();

      // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting
      this.log('\n=== –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITING ===');
      await this.testRateLimiting();

      // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS
      this.log('\n=== –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTTPS ===');
      await this.testHTTPS();

      // 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.log('\n=== –≠–¢–ê–ü 7: –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===');
      this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:`);
      this.log(`   - –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
      this.log(`   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
      this.log(`   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.testResults.warnings}`);
      this.log(`   - –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${this.vulnerabilities.length}`);

      if (this.vulnerabilities.length > 0) {
        this.log(`üö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:`);
        this.vulnerabilities.forEach((vuln, index) => {
          this.log(`   ${index + 1}. [${vuln.severity}] ${vuln.type}: ${vuln.description}`);
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.saveLogs('security_test.log');
      this.saveVulnerabilities('security_vulnerabilities.json');

      this.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      this.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_logs/');

    } catch (error) {
      this.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${error.message}`);
    }

    return {
      results: this.testResults,
      vulnerabilities: this.vulnerabilities
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new SecurityTester();
  
  try {
    await tester.runSecurityTests();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = SecurityTester; 