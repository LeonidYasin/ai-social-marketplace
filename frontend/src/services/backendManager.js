import logger from './logging';

class BackendManager {
  constructor() {
    this.isBackendRunning = false;
    this.retryAttempts = 0;
    this.maxRetries = 3;
    this.retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    this.healthCheckInterval = null;
    this.autoStartEnabled = true;
    this.backendPort = 8000;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è production –∏–ª–∏ development
    if (process.env.NODE_ENV === 'production' || window.location.hostname !== 'localhost') {
      // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω, —á—Ç–æ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      this.backendUrl = 'https://social-marketplace-api.onrender.com';
    } else {
      // –í development –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
      this.backendUrl = `http://localhost:${this.backendPort}`;
    }
    
    this.autoStartEndpoint = '/api/backend/start'; // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞
  async checkBackendHealth() {
    try {
      const response = await fetch(`${this.backendUrl}/api/admin/health`, {
        method: 'GET',
        timeout: 5000
      });
      
      if (response.ok) {
        this.isBackendRunning = true;
        this.retryAttempts = 0;
        logger.info('Backend health check: OK');
        return true;
      }
    } catch (error) {
      this.isBackendRunning = false;
      logger.error('Backend health check failed:', error.message);
    }
    
    return false;
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞
  async tryAutoStartBackend() {
    if (!this.autoStartEnabled || this.retryAttempts >= this.maxRetries) {
      return false;
    }

    this.retryAttempts++;
    logger.info(`Attempting to start backend (attempt ${this.retryAttempts}/${this.maxRetries})`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      if (typeof window === 'undefined') {
        return false;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 1: –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ)
      const consoleStartResult = await this.tryAutoStartViaConsole();
      if (consoleStartResult) {
        logger.info('Backend auto-started via console commands');
        return true;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
      const scriptStartResult = await this.tryAutoStartViaScript();
      if (scriptStartResult) {
        logger.info('Backend auto-started via script');
        return true;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
      logger.info('Cannot auto-start backend - showing manual instructions');
      this.showManualStartInstructions();
      
      return false;
      
    } catch (error) {
      logger.error('Backend auto-start failed:', error.message);
    }

    return false;
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  async tryAutoStartViaConsole() {
    try {
      logger.info('Trying to auto-start backend via console commands');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
      if (typeof window !== 'undefined' && window.console) {
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        const commands = this.generateStartCommands();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
        console.log('%cüöÄ –ê–í–¢–û–ó–ê–ü–£–°–ö –ë–≠–ö–ï–ù–î–ê', 'color: #4CAF50; font-size: 16px; font-weight: bold;');
        console.log('%c–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:', 'color: #2196F3; font-size: 14px;');
        console.log('%c==========================================', 'color: #666;');
        
        commands.forEach((cmd, index) => {
          console.log(`%c${index + 1}. ${cmd}`, 'color: #FF9800; font-family: monospace; font-size: 12px;');
        });
        
        console.log('%c==========================================', 'color: #666;');
        console.log('%c–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'color: #4CAF50; font-size: 12px;');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showConsoleInstructions(commands);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
        return true;
      }
    } catch (error) {
      logger.error('Auto-start via console failed:', error.message);
    }
    
    return false;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞
  generateStartCommands() {
    const commands = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    const isWindows = navigator.platform.indexOf('Win') !== -1;
    
    if (isWindows) {
      // Windows –∫–æ–º–∞–Ω–¥—ã
      commands.push('cd backend');
      commands.push('npm start');
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      commands.push('cd backend && npm start');
      commands.push('start-all.ps1'); // –ï—Å–ª–∏ –µ—Å—Ç—å PowerShell —Å–∫—Ä–∏–ø—Ç
    } else {
      // Linux/Mac –∫–æ–º–∞–Ω–¥—ã
      commands.push('cd backend');
      commands.push('npm start');
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      commands.push('cd backend && npm start');
      commands.push('./start-all.sh'); // –ï—Å–ª–∏ –µ—Å—Ç—å bash —Å–∫—Ä–∏–ø—Ç
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    commands.push(`curl http://localhost:${this.backendPort}/api/admin/health`);
    commands.push(`netstat -an | grep :${this.backendPort}`);
    
    return commands;
  }

  // –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  showConsoleInstructions(commands) {
    // –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('%cüìã –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö –ë–≠–ö–ï–ù–î–ê', 'color: #FF9800; font-size: 16px; font-weight: bold;');
    console.log('%c–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:', 'color: #2196F3; font-size: 14px;');
    console.log('%c==========================================', 'color: #666;');
    
    commands.forEach((cmd, index) => {
      console.log(`%c${index + 1}. ${cmd}`, 'color: #FF9800; font-family: monospace; font-size: 12px;');
    });
    
    console.log('%c==========================================', 'color: #666;');
    console.log('%c–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'color: #4CAF50; font-size: 12px;');
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
  async tryAutoStartViaScript() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
      const scriptCheckUrl = `${window.location.origin}/api/backend/check-scripts`;
      
      const response = await fetch(scriptCheckUrl, {
        method: 'GET',
        timeout: 5000
      });

      if (response.ok) {
        const scripts = await response.json();
        
        if (scripts.available && scripts.startScript) {
          logger.logInfo(`Found start script: ${scripts.startScript}`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
          const startResponse = await fetch(`${window.location.origin}/api/backend/execute-script`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              script: scripts.startScript,
              action: 'start-backend'
            }),
            timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
          });

          if (startResponse.ok) {
            const result = await startResponse.json();
            logger.logInfo('Script execution result:', result);
            
            // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            const isHealthy = await this.checkBackendHealth();
            if (isHealthy) {
              logger.logInfo('Backend successfully started via script');
              return true;
            }
          }
        }
      }
    } catch (error) {
      logger.error('Auto-start via script failed:', error.message);
    }
    
    return false;
  }

  // –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async handleConnectionError(error, endpoint) {
    const errorMessage = error.message || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (errorMessage.includes('Failed to fetch') || errorMessage.includes('ERR_CONNECTION_REFUSED')) {
      return this.handleBackendUnavailableError(endpoint);
    } else if (errorMessage.includes('timeout')) {
      return this.handleTimeoutError(endpoint);
    } else if (errorMessage.includes('401')) {
      return this.handleAuthError();
    } else if (errorMessage.includes('500')) {
      return this.handleServerError(endpoint);
    } else {
      return this.handleGenericError(error, endpoint);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞
  async handleBackendUnavailableError(endpoint) {
    const userMessage = {
      type: 'backend_unavailable',
      title: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      message: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...',
      severity: 'warning',
      actions: [
        {
          label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
          action: () => this.retryConnection()
        }
      ]
    };

    // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥
    if (this.autoStartEnabled && this.retryAttempts < this.maxRetries) {
      const autoStartResult = await this.tryAutoStartBackend();
      
      if (autoStartResult) {
        userMessage.title = '–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!';
        userMessage.message = '–ë—ç–∫–µ–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...';
        userMessage.severity = 'success';
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else {
        userMessage.message = '–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞.';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
        this.showManualStartInstructions();
      }
    }

    return userMessage;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
  handleTimeoutError(endpoint) {
    return {
      type: 'timeout',
      title: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
      message: '–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.',
      severity: 'warning',
      actions: [
        {
          label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
          action: () => this.retryConnection()
        }
      ]
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  handleAuthError() {
    return {
      type: 'auth_error',
      title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      message: '–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞.',
      severity: 'error',
      actions: [
        {
          label: '–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞',
          action: () => window.location.href = '/settings'
        }
      ]
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–∏
  handleServerError(endpoint) {
    return {
      type: 'server_error',
      title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.',
      severity: 'error',
      actions: [
        {
          label: '–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ',
          action: () => this.reportError(endpoint)
        },
        {
          label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
          action: () => this.retryConnection()
        }
      ]
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏
  handleGenericError(error, endpoint) {
    return {
      type: 'generic_error',
      title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
      severity: 'error',
      actions: [
        {
          label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
          action: () => this.retryConnection()
        }
      ]
    };
  }

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async retryConnection() {
    logger.info('Retrying connection to backend...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±—ç–∫–µ–Ω–¥–∞
    const isHealthy = await this.checkBackendHealth();
    
    if (isHealthy) {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      window.location.reload();
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
      console.warn('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä.');
      this.showManualStartInstructions();
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  showManualStartInstructions() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    const commands = this.generateStartCommands();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    this.showConsoleInstructions(commands);
  }

  // –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
  reportError(endpoint, error = null) {
    const errorData = {
      endpoint,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      error: error ? {
        message: error.message,
        stack: error.stack,
        name: error.name
      } : null
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ localStorage –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    const errorReports = JSON.parse(localStorage.getItem('errorReports') || '[]');
    errorReports.push(errorData);
    localStorage.setItem('errorReports', JSON.stringify(errorReports));

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    console.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
  showErrorNotification(errorInfo) {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.warn('BackendManager Error:', errorInfo);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (typeof window !== 'undefined' && window.apiLogs) {
      window.apiLogs.push(`BackendManager Error: ${errorInfo.title} - ${errorInfo.message}`);
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞
  startHealthMonitoring() {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    this.checkBackendHealth();

    this.healthCheckInterval = setInterval(async () => {
      const isHealthy = await this.checkBackendHealth();
      
      if (!isHealthy && this.isBackendRunning) {
        logger.warn('Backend became unavailable');
        this.isBackendRunning = false;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        console.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  stopHealthMonitoring() {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
      this.healthCheckInterval = null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞
  getBackendStatus() {
    return {
      isRunning: this.isBackendRunning,
      retryAttempts: this.retryAttempts,
      maxRetries: this.maxRetries,
      autoStartEnabled: this.autoStartEnabled,
      backendUrl: this.backendUrl
    };
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  configure(options) {
    if (options.autoStartEnabled !== undefined) {
      this.autoStartEnabled = options.autoStartEnabled;
    }
    if (options.maxRetries !== undefined) {
      this.maxRetries = options.maxRetries;
    }
    if (options.retryDelay !== undefined) {
      this.retryDelay = options.retryDelay;
    }
    if (options.backendPort !== undefined) {
      this.backendPort = options.backendPort;
      this.backendUrl = `http://localhost:${this.backendPort}`;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const backendManager = new BackendManager();

export default backendManager; 