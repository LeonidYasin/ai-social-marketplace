import logger from './logging';
import { API_CONFIG, API_STATUS, ERROR_MESSAGES } from '../config/api';
import backendManager from './backendManager';

const API_BASE_URL = process.env.REACT_APP_API_URL ? `${process.env.REACT_APP_API_URL}/api` : 'http://localhost:8000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
const getAuthToken = () => {
  return localStorage.getItem('authToken');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const setAuthToken = (token) => {
  if (token) {
    localStorage.setItem('authToken', token);
  } else {
    localStorage.removeItem('authToken');
  }
};

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const apiRequest = async (endpoint, options = {}) => {
  const url = `${API_BASE_URL}${endpoint}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  const token = getAuthToken();
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers,
  };
  
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }
  
  const config = {
    headers,
    ...options,
  };

  console.log('API Request:', { url, method: config.method || 'GET', body: config.body });
  console.log('API Request headers:', config.headers);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (typeof window !== 'undefined') {
    if (!window.apiLogs) window.apiLogs = [];
    window.apiLogs.push(`API Request: ${config.method || 'GET'} ${url}`);
  }

  try {
    const response = await fetch(url, config);
    console.log('API Response status:', response.status);
    console.log('API Response headers:', response.headers);
    
    const data = await response.json();
    console.log('API Response data:', data);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (typeof window !== 'undefined') {
      if (!window.apiLogs) window.apiLogs = [];
      window.apiLogs.push(`API Response: ${response.status} ${url}`);
    }
    
    if (!response.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (response.status === 401) {
        setAuthToken(null);
        localStorage.removeItem('currentUser');
      }
      throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }
    
    return data;
  } catch (error) {
    console.error('API Error details:', {
      message: error.message,
      type: error.name,
      url: url,
      config: config
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (typeof window !== 'undefined') {
      if (!window.apiLogs) window.apiLogs = [];
      window.apiLogs.push(`API Error: ${error.message} ${url}`);
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const errorInfo = await backendManager.handleConnectionError(error, endpoint);
    // backendManager.showErrorNotification(errorInfo); // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logger.logApiError(config.method || 'GET', url, error);
    throw error;
  }
};

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const authAPI = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  register: async (userData) => {
    const { username, email, password, first_name, last_name, bio } = userData;
    
    const response = await apiRequest('/users/register', {
      method: 'POST',
      body: JSON.stringify({
        username,
        email,
        password,
        first_name,
        last_name,
        bio: bio || ''
      })
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    if (response.token) {
      setAuthToken(response.token);
    }
    
    return response;
  },

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  login: async (credentials) => {
    const { username, password } = credentials;
    
    const response = await apiRequest('/users/login', {
      method: 'POST',
      body: JSON.stringify({
        username,
        password
      })
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    if (response.token) {
      setAuthToken(response.token);
    }
    
    return response;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: async () => {
    return apiRequest('/auth/me');
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  getUser: async (userId) => {
    return apiRequest(`/users/${userId}`);
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  updateProfile: async (userId, profileData) => {
    return apiRequest(`/users/${userId}`, {
      method: 'PUT',
      body: JSON.stringify(profileData)
    });
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  deleteUser: async (userId) => {
    return apiRequest(`/users/${userId}`, {
      method: 'DELETE'
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getUsers: async () => {
    return apiRequest('/users');
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserRole: async (userId, newRole) => {
    return apiRequest(`/users/${userId}/role`, {
      method: 'PATCH',
      body: JSON.stringify({ role: newRole })
    });
  },

  // –í—ã—Ö–æ–¥
  logout: () => {
    setAuthToken(null);
    localStorage.removeItem('currentUser');
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated: () => {
    return !!getAuthToken();
  }
};

// –ü–æ—Å—Ç—ã
export const postsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã
  getPosts: async () => {
    try {
      const result = await apiRequest('/posts');
      return result;
    } catch (error) {
      let errorMsg = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤';
      if (error && error.message) {
        if (error.message.includes('Failed to fetch')) {
          errorMsg = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —Ä–∞–±–æ—Ç—É –±—ç–∫–µ–Ω–¥–∞.';
        } else if (error.message.includes('401')) {
          errorMsg = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
        } else if (error.message.includes('500')) {
          errorMsg = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.';
        } else {
          errorMsg = '–û—à–∏–±–∫–∞: ' + error.message;
        }
      }
      console.error('postsAPI.getPosts error:', error);
      // –û—Ç–∫–ª—é—á–∞–µ–º alert –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      // alert(errorMsg + (error && error.stack ? '\n' + error.stack : ''));
      // logger.logApiError('GET', '/posts', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
  createPost: async (postData) => {
    try {
      console.log('üöÄ postsAPI.createPost - –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
      console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞:', postData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const token = getAuthToken();
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token.substring(0, 20) + '...');
      
      const response = await apiRequest('/posts', {
        method: 'POST',
        body: JSON.stringify(postData)
      });
      
      console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', response);
      return response;
    } catch (error) {
      console.error('‚ùå postsAPI.createPost error:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞ backend
      sendClientLog('error', '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞', {
        postData,
        error: error.message,
        stack: error.stack
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      logger.logApiError('POST', '/posts', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ ID
  getPost: async (postId) => {
    try {
      return await apiRequest(`/posts/${postId}`);
    } catch (error) {
      let errorMsg = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞';
      if (error && error.message) {
        if (error.message.includes('Failed to fetch')) {
          errorMsg = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —Ä–∞–±–æ—Ç—É –±—ç–∫–µ–Ω–¥–∞.';
        } else if (error.message.includes('401')) {
          errorMsg = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
        } else if (error.message.includes('500')) {
          errorMsg = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.';
        } else {
          errorMsg = '–û—à–∏–±–∫–∞: ' + error.message;
        }
      }
      console.error('postsAPI.getPost error:', error);
      console.error(errorMsg + (error && error.stack ? '\n' + error.stack : ''));
      logger.logApiError('GET', `/posts/${postId}`, error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç
  updatePost: async (postId, postData) => {
    return apiRequest(`/posts/${postId}`, {
      method: 'PUT',
      body: JSON.stringify(postData)
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
  deletePost: async (postId) => {
    return apiRequest(`/posts/${postId}`, {
      method: 'DELETE'
    });
  }
};

// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
export const commentsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É
  getComments: async (postId) => {
    return apiRequest(`/posts/${postId}/comments`);
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  addComment: async (postId, commentData) => {
    try {
      return await apiRequest(`/posts/${postId}/comments`, {
        method: 'POST',
        body: JSON.stringify(commentData)
      });
    } catch (error) {
      let errorMsg = '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
      if (error && error.message) {
        if (error.message.includes('Failed to fetch')) {
          errorMsg = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —Ä–∞–±–æ—Ç—É –±—ç–∫–µ–Ω–¥–∞.';
        } else if (error.message.includes('401')) {
          errorMsg = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
        } else if (error.message.includes('500')) {
          errorMsg = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.';
        } else {
          errorMsg = '–û—à–∏–±–∫–∞: ' + error.message;
        }
      }
      console.error('commentsAPI.addComment error:', error);
      console.error(errorMsg + (error && error.stack ? '\n' + error.stack : ''));
      logger.logApiError('POST', `/posts/${postId}/comments`, error);
      throw error;
    }
  }
};

// –†–µ–∞–∫—Ü–∏–∏
export const reactionsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É
  getReactions: async (postId) => {
    return apiRequest(`/posts/${postId}/reactions`);
  },

  // –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
  addReaction: async (postId, reactionData) => {
    try {
      return await apiRequest(`/posts/${postId}/reactions`, {
        method: 'POST',
        body: JSON.stringify(reactionData)
      });
    } catch (error) {
      let errorMsg = '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏';
      if (error && error.message) {
        if (error.message.includes('Failed to fetch')) {
          errorMsg = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ —Ä–∞–±–æ—Ç—É –±—ç–∫–µ–Ω–¥–∞.';
        } else if (error.message.includes('401')) {
          errorMsg = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.';
        } else if (error.message.includes('500')) {
          errorMsg = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.';
        } else {
          errorMsg = '–û—à–∏–±–∫–∞: ' + error.message;
        }
      }
      console.error('reactionsAPI.addReaction error:', error);
      console.error(errorMsg + (error && error.stack ? '\n' + error.stack : ''));
      logger.logApiError('POST', `/posts/${postId}/reactions`, error);
      throw error;
    }
  }
};

// OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
export const oauthAPI = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google OAuth
  initGoogleAuth: () => {
    window.location.href = `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/auth/google`;
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OAuth —É—Å–ø–µ—Ö–∞
  handleOAuthSuccess: async (token, userData) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    localStorage.setItem('authToken', token);
    localStorage.setItem('currentUser', userData);
    
    return {
      token,
      user: JSON.parse(decodeURIComponent(userData))
    };
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  verifyToken: async () => {
    const token = localStorage.getItem('authToken');
    if (!token) {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return apiRequest('/auth/me', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
  },

  // –í—ã—Ö–æ–¥
  logout: () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('currentUser');
  }
};

// Telegram OAuth
export const telegramAPI = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  getBotInfo: async () => {
    return apiRequest('/telegram/bot-info');
  },

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
  login: async (telegramData) => {
    return apiRequest('/telegram/login', {
      method: 'POST',
      body: JSON.stringify(telegramData)
    });
  },

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Login Widget
  initTelegramWidget: (botUsername, onAuth) => {
    // –°–æ–∑–¥–∞–µ–º Telegram Login Widget
    const script = document.createElement('script');
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.setAttribute('data-telegram-login', botUsername);
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-auth-url', window.location.origin);
    script.setAttribute('data-request-access', 'write');
    script.setAttribute('data-lang', 'ru');
    
    script.onload = () => {
      // Telegram Widget –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      window.TelegramLoginWidget = {
        dataOnauth: onAuth
      };
    };
    
    document.head.appendChild(script);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ backend
export const sendClientLog = async (level, message, data) => {
  try {
            await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/client-log`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ level, message, data })
    });
  } catch (e) {
    // –ù–µ –º–µ—à–∞–µ–º —Ä–∞–±–æ—Ç–µ —Ñ—Ä–æ–Ω—Ç–∞, –µ—Å–ª–∏ –ª–æ–≥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª (—á–µ—Ä–µ–∑ backend) - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
export const logToFile = async (level, message, data = '') => {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] [${level.toUpperCase()}] ${message}`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
  await sendClientLog(level, logEntry, data);
};

export default {
  auth: authAPI,
  oauth: oauthAPI,
  telegram: telegramAPI,
  posts: postsAPI,
  comments: commentsAPI,
  reactions: reactionsAPI
}; 