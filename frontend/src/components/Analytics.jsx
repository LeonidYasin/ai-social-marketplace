import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  Chip,
  Avatar,
  Stack,
  Divider,
  Button,
  IconButton,
  Tooltip,
  LinearProgress,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  Tabs,
  Tab,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  TrendingUp as TrendingUpIcon,
  Visibility as VisibilityIcon,
  ThumbUp as ThumbUpIcon,
  Comment as CommentIcon,
  Share as ShareIcon,
  CalendarToday as CalendarIcon,
  BarChart as BarChartIcon,
  PieChart as PieChartIcon,
  Timeline as TimelineIcon,
  Star as StarIcon,
  EmojiEvents as TrophyIcon,
  Psychology as PsychologyIcon,
  Close as CloseIcon,
} from '@mui/icons-material';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const generateAnalyticsData = () => {
  const now = new Date();
  const days = [];
  const activity = [];
  const reactions = [];
  
  for (let i = 29; i >= 0; i--) {
    const date = new Date(now);
    date.setDate(date.getDate() - i);
    days.push(date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
    activity.push(Math.floor(Math.random() * 50) + 10);
    reactions.push(Math.floor(Math.random() * 100) + 20);
  }

  return { days, activity, reactions };
};

// –¢–æ–ø –ø–æ—Å—Ç–æ–≤
const generateTopPosts = () => [
  {
    id: 1,
    title: '–ü—Ä–æ–¥–∞—é iPhone 13',
    author: '–ê–Ω–Ω–∞',
    reactions: 45,
    comments: 12,
    views: 234,
    date: '2 –¥–Ω—è –Ω–∞–∑–∞–¥',
    type: 'sell',
  },
  {
    id: 2,
    title: 'MacBook Air, –ø–æ—á—Ç–∏ –Ω–æ–≤—ã–π',
    author: '–ú–∏—Ö–∞–∏–ª',
    reactions: 38,
    comments: 8,
    views: 189,
    date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
    type: 'sell',
  },
  {
    id: 3,
    title: '–û—Ç–¥–∞–º –∫–æ—Ç–µ–Ω–∫–∞ –≤ —Ö–æ—Ä–æ—à–∏–µ —Ä—É–∫–∏',
    author: '–ï–ª–µ–Ω–∞',
    reactions: 67,
    comments: 23,
    views: 456,
    date: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
    type: 'give',
  },
  {
    id: 4,
    title: '–ò—â—É —Ä–∞–±–æ—Ç—É –≤ IT —Å—Ñ–µ—Ä–µ',
    author: '–î–º–∏—Ç—Ä–∏–π',
    reactions: 29,
    comments: 15,
    views: 167,
    date: '4 –¥–Ω—è –Ω–∞–∑–∞–¥',
    type: 'tribune',
  },
  {
    id: 5,
    title: '–ö—É–ø–ª—é –∏–≥—Ä–æ–≤—É—é –ø—Ä–∏—Å—Ç–∞–≤–∫—É',
    author: '–û–ª—å–≥–∞',
    reactions: 34,
    comments: 9,
    views: 145,
    date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥',
    type: 'buy',
  },
];

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const generateAchievements = () => [
  { id: 1, name: '–ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è', description: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç', icon: 'üìù', earned: true, date: '2024-01-15' },
  { id: 2, name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–≤—Ç–æ—Ä', description: '–ü–æ–ª—É—á–∏–ª–∏ 50+ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã', icon: '‚≠ê', earned: true, date: '2024-01-20' },
  { id: 3, name: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä', description: '–û—Å—Ç–∞–≤–∏–ª–∏ 20+ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', icon: 'üí¨', earned: true, date: '2024-01-25' },
  { id: 4, name: '–í–∏—Ä—Ç—É–æ–∑ —Ä–µ–∞–∫—Ü–∏–π', description: '–ü–æ—Å—Ç–∞–≤–∏–ª–∏ 100+ —Ä–µ–∞–∫—Ü–∏–π', icon: 'üéØ', earned: false, progress: 75 },
  { id: 5, name: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞', description: '–ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é –æ—Ç 10 —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', icon: 'ü¶ã', earned: false, progress: 60 },
  { id: 6, name: '–¢–æ–ø –ø—Ä–æ–¥–∞–≤–µ—Ü', description: '–ü—Ä–æ–¥–∞–ª–∏ 5+ —Ç–æ–≤–∞—Ä–æ–≤', icon: 'üí∞', earned: false, progress: 20 },
];

const Analytics = ({ open, onClose, posts, userReactions, comments, isPageMode = false }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [activeTab, setActiveTab] = useState(0);
  const [analyticsData] = useState(generateAnalyticsData());
  const [topPosts] = useState(generateTopPosts());
  const [achievements] = useState(generateAchievements());

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userStats = {
    totalPosts: (posts || []).length,
    totalReactions: Object.values(userReactions || {}).filter(r => r).length,
    totalComments: Object.values(comments || {}).flat().length,
    averageReactions: (posts || []).length > 0 ? 
      (posts || []).reduce((sum, post) => sum + Object.values(post.reactions || {}).reduce((a, b) => a + b, 0), 0) / (posts || []).length : 0,
    mostActiveDay: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    favoriteSection: '–ü—Ä–æ–¥–∞–º',
  };

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
  const generateRecommendations = () => {
    const recommendations = [];
    
    if (userStats.totalPosts < 5) {
      recommendations.push({
        type: 'post',
        title: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤',
        description: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è',
        priority: 'high',
      });
    }
    
    if (userStats.averageReactions < 10) {
      recommendations.push({
        type: 'engagement',
        title: '–£–ª—É—á—à–∏—Ç–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å',
        description: '–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è',
        priority: 'medium',
      });
    }
    
    if (userStats.totalComments < 10) {
      recommendations.push({
        type: 'social',
        title: '–ë—É–¥—å—Ç–µ –±–æ–ª–µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏',
        description: '–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        priority: 'medium',
      });
    }
    
    return recommendations;
  };

  const recommendations = generateRecommendations();

  const renderOverviewTab = () => (
    <Grid container spacing={2}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Grid item xs={12} md={6}>
        <Card sx={{ height: '100%' }}>
          <CardContent>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <BarChartIcon color="primary" />
              –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </Typography>
            <Stack spacing={2}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="body2">–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤</Typography>
                <Chip label={userStats.totalPosts} color="primary" size="small" />
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="body2">–í–∞—à–∏—Ö —Ä–µ–∞–∫—Ü–∏–π</Typography>
                <Chip label={userStats.totalReactions} color="secondary" size="small" />
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="body2">–í–∞—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</Typography>
                <Chip label={userStats.totalComments} color="info" size="small" />
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="body2">–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏</Typography>
                <Chip label={userStats.averageReactions.toFixed(1)} color="success" size="small" />
              </Box>
            </Stack>
          </CardContent>
        </Card>
      </Grid>

      {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º */}
      <Grid item xs={12} md={6}>
        <Card sx={{ height: '100%' }}>
          <CardContent>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <TimelineIcon color="primary" />
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (30 –¥–Ω–µ–π)
            </Typography>
            <Box sx={{ height: 200, display: 'flex', alignItems: 'end', gap: 1, mt: 2 }}>
              {analyticsData.activity.slice(-7).map((value, index) => (
                <Box
                  key={index}
                  sx={{
                    flex: 1,
                    height: `${(value / 60) * 100}%`,
                    bgcolor: 'primary.main',
                    borderRadius: '4px 4px 0 0',
                    minHeight: 20,
                    position: 'relative',
                  }}
                >
                  <Tooltip title={`${value} –¥–µ–π—Å—Ç–≤–∏–π`}>
                    <Box sx={{ height: '100%' }} />
                  </Tooltip>
                </Box>
              ))}
            </Box>
            <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            </Typography>
          </CardContent>
        </Card>
      </Grid>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <Grid item xs={12}>
        <Card>
          <CardContent>
            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <PsychologyIcon color="primary" />
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å
            </Typography>
            <Grid container spacing={2}>
              {recommendations.map((rec, index) => (
                <Grid item xs={12} sm={6} md={4} key={index}>
                  <Card variant="outlined" sx={{ 
                    borderColor: rec.priority === 'high' ? 'error.main' : 
                               rec.priority === 'medium' ? 'warning.main' : 'info.main' 
                  }}>
                    <CardContent sx={{ p: 2 }}>
                      <Typography variant="subtitle2" sx={{ mb: 1 }}>
                        {rec.title}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {rec.description}
                      </Typography>
                      <Chip 
                        label={rec.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : 
                               rec.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'} 
                        size="small" 
                        color={rec.priority === 'high' ? 'error' : 
                               rec.priority === 'medium' ? 'warning' : 'info'}
                        sx={{ mt: 1 }}
                      />
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </CardContent>
        </Card>
      </Grid>
    </Grid>
  );

  const renderTopPostsTab = () => (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <TrophyIcon color="primary" />
          –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏
        </Typography>
        <List>
          {topPosts.map((post, index) => (
            <React.Fragment key={post.id}>
              <ListItem>
                <ListItemAvatar>
                  <Avatar sx={{ bgcolor: index < 3 ? 'primary.main' : 'grey.400' }}>
                    {index + 1}
                  </Avatar>
                </ListItemAvatar>
                <ListItemText
                  primary={post.title}
                  secondary={
                    <Box>
                      <Typography variant="body2" component="span">
                        –ê–≤—Ç–æ—Ä: {post.author} ‚Ä¢ {post.date}
                      </Typography>
                      <Box sx={{ display: 'flex', gap: 1, mt: 0.5 }}>
                        <Chip size="small" label={`üëç ${post.reactions}`} />
                        <Chip size="small" label={`üí¨ ${post.comments}`} />
                        <Chip size="small" label={`üëÅ ${post.views}`} />
                      </Box>
                    </Box>
                  }
                />
                <ListItemSecondaryAction>
                  <Chip 
                    label={post.type === 'sell' ? '–ü—Ä–æ–¥–∞–º' : 
                           post.type === 'buy' ? '–ö—É–ø–ª—é' : 
                           post.type === 'give' ? '–û—Ç–¥–∞–º' : '–¢—Ä–∏–±—É–Ω–∞'} 
                    size="small" 
                    color="primary" 
                    variant="outlined"
                  />
                </ListItemSecondaryAction>
              </ListItem>
              {index < topPosts.length - 1 && <Divider />}
            </React.Fragment>
          ))}
        </List>
      </CardContent>
    </Card>
  );

  const renderAchievementsTab = () => (
    <Card>
      <CardContent>
        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
          <StarIcon color="primary" />
          –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        </Typography>
        <Grid container spacing={2}>
          {achievements.map((achievement) => (
            <Grid item xs={12} sm={6} md={4} key={achievement.id}>
              <Card variant="outlined" sx={{ 
                borderColor: achievement.earned ? 'success.main' : 'grey.300',
                bgcolor: achievement.earned ? 'success.50' : 'background.paper',
              }}>
                <CardContent sx={{ p: 2, textAlign: 'center' }}>
                  <Typography variant="h4" sx={{ mb: 1 }}>
                    {achievement.icon}
                  </Typography>
                  <Typography variant="subtitle2" sx={{ mb: 1 }}>
                    {achievement.name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    {achievement.description}
                  </Typography>
                  {achievement.earned ? (
                    <Chip label="–ü–æ–ª—É—á–µ–Ω–æ" color="success" size="small" />
                  ) : (
                    <Box>
                      <Typography variant="caption" color="text.secondary">
                        –ü—Ä–æ–≥—Ä–µ—Å—Å: {achievement.progress}%
                      </Typography>
                      <LinearProgress 
                        variant="determinate" 
                        value={achievement.progress} 
                        sx={{ mt: 1 }}
                      />
                    </Box>
                  )}
                  {achievement.date && (
                    <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 1 }}>
                      –ü–æ–ª—É—á–µ–Ω–æ: {new Date(achievement.date).toLocaleDateString()}
                    </Typography>
                  )}
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  );

  const tabs = [
    { label: '–û–±–∑–æ—Ä', content: renderOverviewTab() },
    { label: '–¢–æ–ø –ø–æ—Å—Ç—ã', content: renderTopPostsTab() },
    { label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', content: renderAchievementsTab() },
  ];

  if (isPageMode) {
    return (
      <Box>
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={activeTab} 
            onChange={(e, newValue) => setActiveTab(newValue)}
            variant={isMobile ? "scrollable" : "fullWidth"}
            scrollButtons={isMobile ? "auto" : false}
          >
            {tabs.map((tab, index) => (
              <Tab key={index} label={tab.label} sx={{ textTransform: 'none' }} />
            ))}
          </Tabs>
        </Box>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <Box sx={{ p: 2 }}>
          {tabs[activeTab].content}
        </Box>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        bgcolor: 'rgba(0, 0, 0, 0.5)',
        zIndex: 1300,
        display: open ? 'flex' : 'none',
        alignItems: 'center',
        justifyContent: 'center',
        p: isMobile ? 1 : 3,
      }}
      onClick={onClose}
    >
      <Box
        sx={{
          bgcolor: 'background.paper',
          borderRadius: 3,
          boxShadow: 3,
          width: '100%',
          maxWidth: 1200,
          maxHeight: '90vh',
          overflow: 'hidden',
          display: 'flex',
          flexDirection: 'column',
        }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'space-between', 
          p: 2, 
          borderBottom: 1, 
          borderColor: 'divider' 
        }}>
          <Typography variant="h5" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <TrendingUpIcon color="primary" />
            –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
          </Typography>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs 
            value={activeTab} 
            onChange={(e, newValue) => setActiveTab(newValue)}
            variant={isMobile ? "scrollable" : "fullWidth"}
            scrollButtons={isMobile ? "auto" : false}
          >
            {tabs.map((tab, index) => (
              <Tab key={index} label={tab.label} sx={{ textTransform: 'none' }} />
            ))}
          </Tabs>
        </Box>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>
          {tabs[activeTab].content}
        </Box>
      </Box>
    </Box>
  );
};

export default Analytics; 