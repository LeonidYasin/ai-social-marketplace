const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

class DocumentationScreenshotCreator {
    constructor() {
        this.browser = null;
        this.page = null;
        this.screenshotsDir = 'documentation_screenshots';
        this.baseUrl = 'http://localhost:3000';
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        this.browser = await puppeteer.launch({
            headless: false,
            defaultViewport: { width: 1920, height: 1080 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        this.page = await this.browser.newPage();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if (!fs.existsSync(this.screenshotsDir)) {
            fs.mkdirSync(this.screenshotsDir, { recursive: true });
        }
    }

    async universalWait(selector, timeout = 10000) {
        try {
            await this.page.waitForSelector(selector, { timeout });
            return true;
        } catch (error) {
            console.log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}ms`);
            return false;
        }
    }

    async universalClick(selector, description = '') {
        try {
            await this.page.waitForSelector(selector, { timeout: 5000 });
            await this.page.click(selector);
            console.log(`‚úÖ –ö–ª–∏–∫: ${description || selector}`);
            await new Promise(resolve => setTimeout(resolve, 1000));
            return true;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ ${description || selector}: ${error.message}`);
            return false;
        }
    }

    async clickButtonByText(text, description = '') {
        const buttons = await this.page.$$('button, .MuiButtonBase-root');
        for (const btn of buttons) {
            const btnText = await this.page.evaluate(el => el.textContent, btn);
            if (btnText && btnText.trim() === text) {
                await btn.click();
                console.log(`‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º: "${text}" - ${description}`);
                await new Promise(resolve => setTimeout(resolve, 1000));
                return true;
            }
        }
        console.log(`‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (${description})`);
        return false;
    }

    async takeScreenshot(name, description = '') {
        const filename = `${name}.png`;
        const filepath = path.join(this.screenshotsDir, filename);
        await this.page.screenshot({ 
            path: filepath, 
            fullPage: true
        });
        console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${filename} - ${description}`);
        return filepath;
    }

    async navigateToPage() {
        console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await this.page.goto(this.baseUrl, { waitUntil: 'networkidle2' });
        await new Promise(resolve => setTimeout(resolve, 3000));
    }

    async captureMainPage() {
        console.log('\nüì± –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        await this.takeScreenshot('01_main_page', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }

    async captureGuestLogin() {
        console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞...');
        // –ö–ª–∏–∫ –Ω–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"
        await this.clickButtonByText('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å', '–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"');
        await this.takeScreenshot('02_guest_login_clicked', '–ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"');
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.takeScreenshot('03_guest_form', '–§–æ—Ä–º–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞');
    }

    async captureLoginForm() {
        console.log('\nüîê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
        // –ö–ª–∏–∫ –Ω–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        await this.clickButtonByText('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', '–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"');
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.takeScreenshot('04_login_form', '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞');
        try {
            const emailInput = await this.page.$('input[placeholder*="email"], input[placeholder*="Email"], input[placeholder*="–ø–æ—á—Ç–∞"], input[type="email"]');
            const passwordInput = await this.page.$('input[placeholder*="–ø–∞—Ä–æ–ª—å"], input[placeholder*="password"], input[type="password"]');
            if (emailInput) await emailInput.type('test@example.com');
            if (passwordInput) await passwordInput.type('password123');
            await this.takeScreenshot('05_login_form_filled', '–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            // –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –∏–ª–∏ "Login"
            await this.clickButtonByText('–í–æ–π—Ç–∏', '–ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏"');
            await this.clickButtonByText('Login', '–ö–Ω–æ–ø–∫–∞ "Login"');
            await new Promise(resolve => setTimeout(resolve, 3000));
            await this.takeScreenshot('06_after_login', '–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞:', error.message);
            await this.takeScreenshot('05_login_form_error', '–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã');
        }
    }

    async captureUserProfile() {
        console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        const avatar = await this.page.$('.MuiAvatar-root, img[alt*="avatar"], img[alt*="profile"]');
        if (avatar) {
            await avatar.click();
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.takeScreenshot('07_user_profile', '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else {
            await this.takeScreenshot('07_no_profile', '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    async captureFeed() {
        console.log('\nüì∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ª–µ–Ω—Ç—ã...');
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ª–µ–Ω—Ç—É (—É–∂–µ –Ω–∞ –Ω–µ–π)
        await this.takeScreenshot('09_feed_page', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–µ–Ω—Ç—ã');
        
        // –°–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å—Ç–æ–≤
        await this.page.evaluate(() => window.scrollTo(0, 500));
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.takeScreenshot('10_feed_scrolled', '–õ–µ–Ω—Ç–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º');
    }

    async capturePostCreation() {
        console.log('\n‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...');
        await this.clickButtonByText('–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?', '–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.takeScreenshot('11_create_post_form', '–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
        try {
            const postInput = await this.page.$('input[placeholder*="–Ω–æ–≤–æ–≥–æ"], textarea[placeholder*="–Ω–æ–≤–æ–≥–æ"], .MuiInputBase-input');
            if (postInput) {
                await postInput.type('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
                await this.takeScreenshot('12_post_form_filled', '–§–æ—Ä–º–∞ –ø–æ—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
                await this.clickButtonByText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"');
                await new Promise(resolve => setTimeout(resolve, 3000));
                await this.takeScreenshot('13_post_created', '–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç:', error.message);
        }
    }

    async captureChat() {
        console.log('\nüí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —á–∞—Ç–∞...');
        await this.clickButtonByText('–ß–∞—Ç—ã', '–í–∫–ª–∞–¥–∫–∞ "–ß–∞—Ç—ã"');
        await new Promise(resolve => setTimeout(resolve, 2000));
        await this.takeScreenshot('14_chat_page', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞');
        const userItem = await this.page.$('.MuiListItem-root, [role="listitem"]');
        if (userItem) {
            await userItem.click();
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.takeScreenshot('15_chat_conversation', '–î–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ');
            const messageInput = await this.page.$('input[placeholder*="—á–∞—Ç"], input[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .MuiInputBase-input');
            if (messageInput) {
                await messageInput.type('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                await this.takeScreenshot('16_message_typing', '–í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è');
                await this.clickButtonByText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"');
                await new Promise(resolve => setTimeout(resolve, 2000));
                await this.takeScreenshot('17_message_sent', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
        }
    }

    async captureSidebar() {
        console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏...');
        
        // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        await this.takeScreenshot('18_left_sidebar', '–õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
        
        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        await this.takeScreenshot('19_right_sidebar', '–ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å');
    }

    async captureNotifications() {
        console.log('\nüîî –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationButton = await this.page.$('button[aria-label*="—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"], button[aria-label*="notification"], .MuiIconButton-root');
        if (notificationButton) {
            await notificationButton.click();
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.takeScreenshot('21_notifications_panel', '–ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        } else {
            await this.takeScreenshot('21_no_notifications', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    async captureSearch() {
        console.log('\nüîç –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
        
        // –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        const searchInput = await this.page.$('input[placeholder*="–ü–æ–∏—Å–∫"], input[placeholder*="Search"], input[placeholder*="—á–∞—Ç"]');
        if (searchInput) {
            await searchInput.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            await this.takeScreenshot('22_search_form', '–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞');
            
            // –í–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await searchInput.type('—Ç–µ—Å—Ç');
            await new Promise(resolve => setTimeout(resolve, 2000));
            await this.takeScreenshot('23_search_results', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');
        } else {
            await this.takeScreenshot('22_no_search', '–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    async captureMobileView() {
        console.log('\nüì± –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        await this.page.setViewport({ width: 375, height: 667 });
        await new Promise(resolve => setTimeout(resolve, 1000));
        await this.takeScreenshot('24_mobile_main', '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≥–ª–∞–≤–Ω–∞—è');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        await this.page.setViewport({ width: 1920, height: 1080 });
    }

    async createDocumentation() {
        console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
        
        const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è UI - –°–∫—Ä–∏–Ω—à–æ—Ç—ã</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
        h1 { color: #333; text-align: center; }
        .screenshot { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .screenshot img { max-width: 100%; height: auto; border: 1px solid #ccc; }
        .screenshot h3 { color: #666; margin-bottom: 10px; }
        .screenshot p { color: #888; font-size: 14px; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì∏ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è UI - –°–∫—Ä–∏–Ω—à–æ—Ç—ã</h1>
        <p>–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
        
        <div class="grid">
            <div class="screenshot">
                <h3>01. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
                <img src="01_main_page.png" alt="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
                <p>–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            </div>
            
            <div class="screenshot">
                <h3>02. –ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥</h3>
                <img src="02_guest_login_clicked.png" alt="–ì–æ—Å—Ç–µ–≤–æ–π –≤—Ö–æ–¥">
                <p>–ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å"</p>
            </div>
            
            <div class="screenshot">
                <h3>03. –§–æ—Ä–º–∞ –≥–æ—Å—Ç—è</h3>
                <img src="03_guest_form.png" alt="–§–æ—Ä–º–∞ –≥–æ—Å—Ç—è">
                <p>–§–æ—Ä–º–∞ –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>04. –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞</h3>
                <img src="04_login_form.png" alt="–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞">
                <p>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>05. –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞</h3>
                <img src="05_login_form_filled.png" alt="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞">
                <p>–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</p>
            </div>
            
            <div class="screenshot">
                <h3>06. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞</h3>
                <img src="06_after_login.png" alt="–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞">
                <p>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>07. –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
                <img src="07_user_profile.png" alt="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
            </div>
            
            <div class="screenshot">
                <h3>09. –õ–µ–Ω—Ç–∞</h3>
                <img src="09_feed_page.png" alt="–õ–µ–Ω—Ç–∞">
                <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤</p>
            </div>
            
            <div class="screenshot">
                <h3>10. –õ–µ–Ω—Ç–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º</h3>
                <img src="10_feed_scrolled.png" alt="–õ–µ–Ω—Ç–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º">
                <p>–õ–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏</p>
            </div>
            
            <div class="screenshot">
                <h3>11. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞</h3>
                <img src="11_create_post_form.png" alt="–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞">
                <p>–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>12. –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–æ—Å—Ç</h3>
                <img src="12_post_form_filled.png" alt="–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–æ—Å—Ç">
                <p>–§–æ—Ä–º–∞ –ø–æ—Å—Ç–∞ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>
            </div>
            
            <div class="screenshot">
                <h3>13. –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω</h3>
                <img src="13_post_created.png" alt="–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω">
                <p>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>14. –ß–∞—Ç</h3>
                <img src="14_chat_page.png" alt="–ß–∞—Ç">
                <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>15. –î–∏–∞–ª–æ–≥</h3>
                <img src="15_chat_conversation.png" alt="–î–∏–∞–ª–æ–≥">
                <p>–î–∏–∞–ª–æ–≥ –≤ —á–∞—Ç–µ</p>
            </div>
            
            <div class="screenshot">
                <h3>16. –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
                <img src="16_message_typing.png" alt="–í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è">
                <p>–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
            </div>
            
            <div class="screenshot">
                <h3>17. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</h3>
                <img src="17_message_sent.png" alt="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">
                <p>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
            </div>
            
            <div class="screenshot">
                <h3>18. –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å</h3>
                <img src="18_left_sidebar.png" alt="–õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å">
                <p>–õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</p>
            </div>
            
            <div class="screenshot">
                <h3>19. –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å</h3>
                <img src="19_right_sidebar.png" alt="–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å">
                <p>–ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å</p>
            </div>
            
            <div class="screenshot">
                <h3>21. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                <img src="21_notifications_panel.png" alt="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è">
                <p>–ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            </div>
            
            <div class="screenshot">
                <h3>22. –ü–æ–∏—Å–∫</h3>
                <img src="22_search_form.png" alt="–ü–æ–∏—Å–∫">
                <p>–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>23. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h3>
                <img src="23_search_results.png" alt="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞">
                <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</p>
            </div>
            
            <div class="screenshot">
                <h3>24. –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</h3>
                <img src="24_mobile_main.png" alt="–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è">
                <p>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏</p>
            </div>
        </div>
    </div>
</body>
</html>`;

        fs.writeFileSync(path.join(this.screenshotsDir, 'documentation.html'), htmlContent);
        console.log('‚úÖ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: documentation_screenshots/documentation.html');
    }

    async run() {
        try {
            await this.init();
            await this.navigateToPage();
            
            // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            await this.captureMainPage();
            await this.captureGuestLogin();
            await this.captureLoginForm();
            await this.captureUserProfile();
            await this.captureFeed();
            await this.capturePostCreation();
            await this.captureChat();
            await this.captureSidebar();
            await this.captureNotifications();
            await this.captureSearch();
            await this.captureMobileView();
            
            // –°–æ–∑–¥–∞–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            await this.createDocumentation();
            
            console.log('\nüéâ –í—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            console.log(`üìÅ –ü–∞–ø–∫–∞: ${this.screenshotsDir}`);
            console.log('üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: documentation_screenshots/documentation.html');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        } finally {
            if (this.browser) {
                await this.browser.close();
            }
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const creator = new DocumentationScreenshotCreator();
creator.run(); 